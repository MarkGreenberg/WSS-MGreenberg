(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    493380,      10600]
NotebookOptionsPosition[    486423,      10480]
NotebookOutlinePosition[    487231,      10507]
CellTagsIndexPosition[    487188,      10504]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Computer Analysis of Poetry", "Title",
 CellChangeTimes->{{3.770055572438499*^9, 3.7700555729498453`*^9}, {
   3.770055604008165*^9, 3.7700556066618843`*^9}, 
   3.771604725161281*^9},ExpressionUUID->"49ab34ee-bfd5-49f5-beef-\
400d3cc456dd"],

Cell["Mark Greenberg", "Text",
 CellChangeTimes->{{3.549624168509506*^9, 3.549624171985794*^9}, {
  3.549624508772977*^9, 3.549624510775043*^9}, {3.5498187159613867`*^9, 
  3.5498187170087957`*^9}, {3.549819049020514*^9, 3.5498190533440437`*^9}, {
  3.77005561844785*^9, 3.7700556489651537`*^9}, {3.7716046908678007`*^9, 
  3.771604696246951*^9}},ExpressionUUID->"94536f76-3fd2-4bf6-b228-\
fa93ec9acae9"],

Cell["Christoper Wolfram", "Text",
 CellChangeTimes->{{3.549624515773694*^9, 3.5496245246892014`*^9}, {
  3.5498187208956137`*^9, 3.5498187221413403`*^9}, {3.5498190558319674`*^9, 
  3.54981906151682*^9}, {3.770055624686027*^9, 3.770055659820487*^9}, {
  3.77160470378553*^9, 
  3.771604709133194*^9}},ExpressionUUID->"b70c649b-a958-4202-9f22-\
238ea1f9c7d4"],

Cell[CellGroupData[{

Cell["Part 1: Metrical Pattern", "Chapter",
 CellChangeTimes->{{3.7656268178099813`*^9, 3.76562687076138*^9}, {
  3.765968908887895*^9, 
  3.765968909647869*^9}},ExpressionUUID->"d0492975-865f-4cc2-aeef-\
d7e4b6b3ffdd"],

Cell[TextData[{
 "Poets pay attention to the natural stresses in words, and sometimes they \
arrange words so that the stresses form patterns. Typical patterns stress \
every other syllable (duple meter) or every third syllable (triple meter). A \
convention exists to further classify poetic lines according to a unit of two \
or three syllables, called a foot. I choose not to follow this convention, \
instead looking at the line of poetry as a continuous pattern. The goal of \
Part 1 is to display the metrical pattern of a stanza of poetry graphically \
around the printed syllables.\n\nThe analyzeMeter function that does this \
accepts a stanza of English poetry and returns the stress pattern of the \
syllables. It gets the stress information from the \
\[OpenCurlyDoubleQuote]PhoneticForm\[CloseCurlyDoubleQuote] property in \
WordData and the syllabification information from the \
\[OpenCurlyDoubleQuote]Hyphenation\[CloseCurlyDoubleQuote] property. \
Sometimes words are not in WordData, or the database doesn\[CloseCurlyQuote]t \
have phonetic or hyphenation values for a word. In those cases we use neural \
networks to infer the phonetic form and/or syllabification. Also, 1-syllable \
words are stressed in the database, but minor words like ",
 StyleBox["the",
  FontSlant->"Italic"],
 " and ",
 StyleBox["and",
  FontSlant->"Italic"],
 ", called \[OpenCurlyDoubleQuote]stopwords\[CloseCurlyDoubleQuote] in the \
Wolfram Language, are usually unstressed in context. The code demotes \
single-syllable stopwords from stressed to undetermined. A combination of \
replacement rules and the SequencePredict function attempts to resolve \
syllables that the program has not yet determined to be stressed or \
unstressed.\n"
}], "Text",
 CellChangeTimes->{{3.765626898273408*^9, 3.765626954937441*^9}, {
   3.7656270079132338`*^9, 3.765627045841*^9}, {3.765627139737274*^9, 
   3.7656273300727386`*^9}, {3.765627408792733*^9, 3.765627421256626*^9}, {
   3.7656275680481853`*^9, 3.7656276391598177`*^9}, {3.765627670656046*^9, 
   3.765627720519814*^9}, {3.765627980000391*^9, 3.765627981727165*^9}, {
   3.765628031102827*^9, 3.7656280795189657`*^9}, {3.7656281484468393`*^9, 
   3.7656281964626703`*^9}, {3.765632499877741*^9, 3.765632547300952*^9}, {
   3.7657388970319777`*^9, 3.765738930111755*^9}, {3.765738962119906*^9, 
   3.765738965343671*^9}, {3.765815620282917*^9, 3.76581562057798*^9}, {
   3.76591840217126*^9, 3.765918409042807*^9}, {3.765918477818604*^9, 
   3.76591855516289*^9}, {3.765929533967945*^9, 3.765929623214843*^9}, {
   3.765930158753688*^9, 3.7659302995290527`*^9}, {3.7659303921934557`*^9, 
   3.765930475281217*^9}, {3.76593091364081*^9, 3.765930925056438*^9}, {
   3.765931331135857*^9, 3.765931338655542*^9}, {3.765966544838873*^9, 
   3.765966556958544*^9}, {3.765966590414316*^9, 3.7659666491259193`*^9}, {
   3.7661419434045753`*^9, 3.766142103682455*^9}, {3.766142238922536*^9, 
   3.7661423033459787`*^9}, {3.766142334018032*^9, 3.766142348402335*^9}, {
   3.766142398793767*^9, 3.7661424432578497`*^9}, {3.76614248856989*^9, 
   3.766142637033471*^9}, {3.766142673825862*^9, 3.7661426756888657`*^9}, {
   3.766142794865367*^9, 3.766142874456966*^9}, {3.766143211992564*^9, 
   3.7661433507201157`*^9}, 3.766153406145886*^9, 3.7661687179756393`*^9, {
   3.770892428689817*^9, 3.770892452608233*^9}, {3.770896109988144*^9, 
   3.770896164021143*^9}, {3.771068159151546*^9, 3.7710681602011557`*^9}, {
   3.771068197906453*^9, 3.7710682010036*^9}, {3.771068559444038*^9, 
   3.771068617585823*^9}, {3.771068740612537*^9, 3.771069025477571*^9}, {
   3.771069057047061*^9, 3.771069113231739*^9}, {3.771069177622283*^9, 
   3.771069195511973*^9}, {3.7710692982267027`*^9, 3.771069348560597*^9}, {
   3.771074978626318*^9, 3.771075014706788*^9}, {3.771075052369485*^9, 
   3.771075118940222*^9}, {3.771101817938445*^9, 3.7711018262885523`*^9}, {
   3.7711018806863747`*^9, 3.771101886184306*^9}, {3.7711020799914837`*^9, 
   3.771102083991723*^9}, {3.7711021435230007`*^9, 3.771102158818994*^9}, {
   3.771408651184121*^9, 3.771408823053317*^9}, 3.771450253247798*^9, {
   3.771601773988332*^9, 3.771601782258726*^9}, {3.771601827209939*^9, 
   3.771601935383253*^9}, {3.771602032410549*^9, 
   3.7716020365828238`*^9}},ExpressionUUID->"bceea5bb-6add-46e4-8627-\
c51d49057fd3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["The Phonetic/Syllabification Neural Network", "Subtitle",
 CellChangeTimes->{{3.771069406505253*^9, 3.7710694651037483`*^9}, {
  3.771170167279163*^9, 3.7711701678766403`*^9}, {3.7712515144327927`*^9, 
  3.7712515207323217`*^9}},ExpressionUUID->"50a37f85-010e-4cdd-aa37-\
23d37c049ca0"],

Cell["\<\
This neural network takes a single word for which WordData can\
\[CloseCurlyQuote]t provide the phonetic and syllabic information, and \
returns a phonetic representation in the International Phonetic Alphabet \
(IPA) along with the original word divided into syllables. It is trained on \
WordData, which provides 27,811 words that have both phonetic and syllabic \
information. This set is divided into two subsets, 85% becoming the training \
set and 15% becoming the test set. The phonetic part of the network is a \
teacher forcing network, which takes three inputs during training (e.g., \
\[OpenCurlyDoubleQuote]formation\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]>f\:0254rm\:02c8e\:026a\:0283\:0259n<\
\[CloseCurlyDoubleQuote], and {\[OpenCurlyDoubleQuote]for\
\[CloseCurlyDoubleQuote],\[CloseCurlyDoubleQuote]ma\[CloseCurlyDoubleQuote],\
\[CloseCurlyDoubleQuote]tion\[CloseCurlyDoubleQuote]}). Each character of the \
English word is fed to a Long Short-Term Memory layer (LSTM). The network \
tries to predict the next phonetic character, the success of which is fed \
back to the LSTM. This pattern continues until it encounters the end-of-word \
character \[OpenCurlyDoubleQuote]<\[CloseCurlyDoubleQuote]. The gated \
recurrent layer has a second output for the syllabification of the word, \
which outputs a list of syllables.

This is what the training data looks like, one input and two outputs.\
\>", "Text",
 CellChangeTimes->{{3.771069479639296*^9, 3.771069639975339*^9}, {
   3.771069854737454*^9, 3.771069988810161*^9}, {3.7710753649203453`*^9, 
   3.771075372524658*^9}, 3.7710826209024477`*^9, {3.771102356458016*^9, 
   3.771102366385672*^9}, {3.77110251865201*^9, 3.7711025884741077`*^9}, {
   3.7711026807182903`*^9, 3.77110268442493*^9}, {3.7711027326279716`*^9, 
   3.77110275845722*^9}, {3.7711028314221373`*^9, 3.77110293974762*^9}, {
   3.771103012901306*^9, 3.771103108376404*^9}, {3.771103251764369*^9, 
   3.771103265278861*^9}, {3.771103298978064*^9, 3.771103424997919*^9}, {
   3.7711034601467333`*^9, 3.771103590112918*^9}, {3.7711100089209547`*^9, 
   3.7711100124851007`*^9}, 3.7711663228928328`*^9, {3.771251617572454*^9, 
   3.7712516718194723`*^9}, {3.771251715914246*^9, 3.771251918185445*^9}, {
   3.771251970903414*^9, 3.771252034173628*^9}, {3.771252066468842*^9, 
   3.771252095400463*^9}, {3.7712521277945557`*^9, 3.7712522277817*^9}, {
   3.7712522701469603`*^9, 3.771252282240142*^9}, {3.7714088796921864`*^9, 
   3.7714089008109407`*^9}, {3.771408995654007*^9, 3.7714090080793047`*^9}, {
   3.771410040142664*^9, 3.771410041844426*^9}, {3.771410200229239*^9, 
   3.7714102145993967`*^9}, {3.7714114667271023`*^9, 3.771411495931711*^9}, {
   3.771413949601468*^9, 3.771413970707796*^9}, {3.771602062370058*^9, 
   3.771602062832856*^9}, {3.771602115539929*^9, 3.771602152711834*^9}, {
   3.771602185691708*^9, 3.771602197256736*^9}, {3.771602255882395*^9, 
   3.771602280477026*^9}},ExpressionUUID->"87a35d28-484e-415f-8432-\
23c154bc1739"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "1234", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allWords", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"Select", "[", 
     RowBox[{
      RowBox[{"ToLowerCase", "[", 
       RowBox[{"WordData", "[", "]"}], "]"}], ",", 
      RowBox[{"StringMatchQ", "[", 
       RowBox[{"LetterCharacter", ".."}], "]"}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allWordsAssocs", "=", 
   RowBox[{"Quiet", "[", 
    RowBox[{"DeleteMissing", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"<|", 
         RowBox[{
          RowBox[{"\"\<Input\>\"", "\[Rule]", "#"}], ",", 
          RowBox[{"\"\<FullTargetSequence\>\"", "\[Rule]", 
           RowBox[{"WordData", "[", 
            RowBox[{"#", ",", "\"\<PhoneticForm\>\""}], "]"}]}], ",", 
          RowBox[{"\"\<SyllabicTarget\>\"", "\[Rule]", 
           RowBox[{"WordData", "[", 
            RowBox[{"#", ",", "\"\<Hyphenation\>\""}], "]"}]}]}], "|>"}], 
        "&"}], "/@", "allWords"}], ",", "1", ",", "2"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"netInputData", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"Fold", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"#2", "[", "#1", "]"}], "&"}], ",", 
      RowBox[{"DeleteMissing", "[", 
       RowBox[{"allWordsAssocs", ",", "1", ",", "2"}], "]"}], ",", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"MapAt", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"\"\<>\>\"", "<>", "#", "<>", "\"\<<\>\""}], "&"}], ",", 
          RowBox[{"{", 
           RowBox[{"All", ",", "\"\<FullTargetSequence\>\""}], "}"}]}], "]"}],
         ",", "\[IndentingNewLine]", 
        RowBox[{"MapAt", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"ToExpression", "[", 
            RowBox[{"Characters", "[", 
             RowBox[{"StringJoin", "[", 
              RowBox[{"StringReplace", "[", 
               RowBox[{"#", ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"_", "~~", "EndOfString"}], "\[Rule]", 
                   "\"\<2\>\""}], ",", 
                  RowBox[{"_", "\[Rule]", "\"\<1\>\""}]}], "}"}]}], "]"}], 
              "]"}], "]"}], "]"}], "&"}], ",", 
          RowBox[{"{", 
           RowBox[{"All", ",", "\"\<SyllabicTarget\>\""}], "}"}]}], "]"}]}], 
       "}"}]}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"train3", ",", " ", "test3"}], "}"}], "=", " ", 
   RowBox[{"TakeDrop", "[", 
    RowBox[{"netInputData", ",", " ", 
     RowBox[{"Floor", "[", 
      RowBox[{
       RowBox[{"Length", "[", "netInputData", "]"}], "*", "0.85"}], "]"}]}], 
    "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
 RowBox[{"Column", "[", 
  RowBox[{"RandomSample", "[", 
   RowBox[{"test3", ",", "4"}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.7714100839532433`*^9, 3.771410100061112*^9}, {
   3.771410145559306*^9, 3.771410173242869*^9}, {3.771410233906724*^9, 
   3.771410276760035*^9}, {3.771410901611455*^9, 3.771410914946938*^9}, {
   3.771410962596858*^9, 3.771410965937785*^9}, 3.771411544991335*^9, {
   3.7714118259602833`*^9, 3.7714118797141857`*^9}, 3.7714119510284157`*^9},
 CellLabel->
  "In[1903]:=",ExpressionUUID->"6f5240b5-4982-4917-ac4c-f5e0acc32d46"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"Input\"\>", "\[Rule]", "\<\"militancy\"\>"}], ",", 
       RowBox[{"\<\"FullTargetSequence\"\>", 
        "\[Rule]", "\<\">m\:02c8\:026al\:0259t\:0259nsi<\"\>"}], ",", 
       RowBox[{"\<\"SyllabicTarget\"\>", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
         "1", ",", "1", ",", "2", ",", "2", ",", "1", ",", "1", ",", "2", ",",
           "1", ",", "2"}], "}"}]}]}], "\[RightAssociation]"}]},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"Input\"\>", "\[Rule]", "\<\"crowing\"\>"}], ",", 
       RowBox[{"\<\"FullTargetSequence\"\>", 
        "\[Rule]", "\<\">kr\:02c8o\:028a\:026a\:014b<\"\>"}], ",", 
       RowBox[{"\<\"SyllabicTarget\"\>", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
         "1", ",", "1", ",", "1", ",", "2", ",", "1", ",", "1", ",", "2"}], 
         "}"}]}]}], "\[RightAssociation]"}]},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"Input\"\>", "\[Rule]", "\<\"sailfish\"\>"}], ",", 
       RowBox[{"\<\"FullTargetSequence\"\>", 
        "\[Rule]", "\<\">s\:02c8e\:026alf\:02cc\:026a\:0283<\"\>"}], ",", 
       RowBox[{"\<\"SyllabicTarget\"\>", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
         "1", ",", "1", ",", "1", ",", "2", ",", "1", ",", "1", ",", "1", ",",
           "2"}], "}"}]}]}], "\[RightAssociation]"}]},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"Input\"\>", "\[Rule]", "\<\"coo\"\>"}], ",", 
       RowBox[{"\<\"FullTargetSequence\"\>", 
        "\[Rule]", "\<\">k\:02c8u<\"\>"}], ",", 
       RowBox[{"\<\"SyllabicTarget\"\>", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1", ",", "2"}], "}"}]}]}], "\[RightAssociation]"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{3.771411989436596*^9, 3.771443602529644*^9, 
  3.771444418976866*^9, 3.771444767630929*^9, 3.771451733662559*^9, 
  3.771520682020082*^9, 3.771526883804063*^9, 3.7715891525633173`*^9, 
  3.771683286440836*^9},
 CellLabel->
  "Out[1908]=",ExpressionUUID->"a44a77f6-55f1-4512-8dd4-a3f787ec81a5"]
}, Open  ]],

Cell["\<\
Thanks to Timothee Verdier for extensive help with this neural network, which \
has an unusual architecture and had to be assembled from scratch. Here we \
distill from WordData all the characters in the International Phonetic \
Alphabet that are relevant to representing English. This becomes the list of \
possible characters for the phonetic feedback loop within the neural network.\
\
\>", "Text",
 CellChangeTimes->{{3.7714834400930433`*^9, 3.771483548967143*^9}, {
   3.7714836175995817`*^9, 3.771483684583624*^9}, 
   3.771483726084592*^9},ExpressionUUID->"fbae500f-5205-49c9-bf79-\
89149bb54a9f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"ipaChars", "=", 
   RowBox[{"Sort", "@", 
    RowBox[{"DeleteDuplicates", "@", 
     RowBox[{"Flatten", "@", 
      RowBox[{"Characters", "[", 
       RowBox[{"netInputData", "\[LeftDoubleBracket]", 
        RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}], "]"}]}]}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"inputEncoder", "=", 
   RowBox[{"NetEncoder", "[", 
    RowBox[{"{", "\"\<Characters\>\"", "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"targetEncoder", "=", 
  RowBox[{"NetEncoder", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<Characters\>\"", ",", "ipaChars"}], "}"}], "]"}]}]}], "Input",\

 CellChangeTimes->{
  3.7714552589303627`*^9, {3.771455348692872*^9, 3.7714553530534763`*^9}, 
   3.771483567786475*^9},
 CellLabel->
  "In[1909]:=",ExpressionUUID->"c1d3246f-fb2d-4056-a7bb-791dc8d170be"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetEncoder", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Characters\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector of \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], "\" \"", 
                    TemplateBox[{"\"indices\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"range\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"1", "\"..\"", "40"}, "RowDefault"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}, 
                   "RowDefault"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Characters\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Encoding\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  PaneBox[
                   TagBox[
                    RowBox[{"\[LeftAngleBracket]", 
                    
                    RowBox[{
                    "\"<\"", ",", "\">\"", ",", "\"\:014b\"", ",", 
                    "\"\:0252\"", ",", "\"\:0254\"", ",", "\"\:0259\"", ",", 
                    "\"\:025b\"", ",", "\"\:025d\"", ",", "\"\:0261\"", ",", 
                    "\"\:026a\"", ",", "\"\:0283\"", ",", "\"\:028a\"", ",", 
                    "\"\:028c\"", ",", "\"\:0292\"", ",", "\"\:02c8\"", ",", 
                    "\"\:02cc\"", ",", "\"a\"", ",", "\"\[AE]\"", ",", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], ",",
                     "\"f\"", ",", "\"h\"", ",", "\"i\"", ",", "\"j\"", ",", 
                    "\"k\"", ",", "\"l\"", ",", "\"m\"", ",", "\"n\"", ",", 
                    "\"o\"", ",", "\"p\"", ",", "\"r\"", ",", "\"s\"", ",", 
                    "\"t\"", ",", "\"u\"", ",", "\"v\"", ",", "\"w\"", ",", 
                    "\"z\"", ",", "\"\[Theta]\""}], "\[RightAngleBracket]"}], 
                    Short[#, 3]& ], 
                   BaseStyle -> {
                    IndentMaxFraction -> 0.1, ShowStringCharacters -> False}, 
                   ContentPadding -> False, ImageSize -> {250}], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output form\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Index\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Ignore case\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["False", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Count\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["40", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Target length\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["All", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector of \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], "\" \"", 
                    TemplateBox[{"\"indices\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"range\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"1", "\"..\"", "40"}, "RowDefault"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}, 
                   "RowDefault"], "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 3}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetEncoder[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.771483569626746*^9, 3.7715206821705627`*^9, 
  3.7715269050902567`*^9, 3.771589071920323*^9, 3.771589165591421*^9, 
  3.771683286619385*^9},
 CellLabel->
  "Out[1911]=",ExpressionUUID->"7edcd829-8e09-4596-996c-2dc8cd05b240"]
}, Open  ]],

Cell["\<\
The net has one configuration for training, which is shown below, and a \
different configuration for production. In this diagram, we can see the basic \
structure of the network with two inputs (the training data and the \
\[OpenCurlyDoubleQuote]teacher\[CloseCurlyDoubleQuote] data that is fed back \
to be reprocessed), and two outputs (phonetic and syllabic representations). \
Clicking on the boxes named phoneticDecoder and sylabicDecoder will reveal \
the logical structure of the net\[CloseCurlyQuote]s two halves.\
\>", "Text",
 CellChangeTimes->{
  3.771411838701693*^9, {3.771412382323357*^9, 3.7714124141814423`*^9}, {
   3.7714124635330477`*^9, 3.771412645364958*^9}, {3.771483196384281*^9, 
   3.7714833602529078`*^9}, {3.771483711204893*^9, 3.771483720958843*^9}, {
   3.771483835086914*^9, 3.7714839259436007`*^9}, {3.7714839686487617`*^9, 
   3.771484001780933*^9}},ExpressionUUID->"8148676e-c16b-48a4-bbfc-\
b5fae0cbe27b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", " ", "=", " ", 
  RowBox[{"NetGraph", "[", "\n", "\t", 
   RowBox[{
    RowBox[{"{", "\n", "\t", 
     RowBox[{
      RowBox[{"\"\<charEnc\>\"", " ", "\[Rule]", " ", 
       RowBox[{"NetChain", "[", 
        RowBox[{"{", "\n", "\t\t", 
         RowBox[{
          RowBox[{"EmbeddingLayer", "[", "32", "]"}], ",", "\n", "\t\t", 
          RowBox[{"NetBidirectionalOperator", "[", 
           RowBox[{"LongShortTermMemoryLayer", "[", "64", "]"}], "]"}]}], 
         "\n", "\t\t", "}"}], "]"}]}], ",", "\n", "\t", 
      RowBox[{"\"\<phoneticDec\>\"", " ", "\[Rule]", " ", 
       RowBox[{"NetGraph", "[", "\[IndentingNewLine]", "\t\t", 
        RowBox[{
         RowBox[{"{", "\n", "\t\t", 
          RowBox[{
           RowBox[{"SequenceLastLayer", "[", "]"}], ",", "\n", "\t\t", 
           RowBox[{"EmbeddingLayer", "[", "32", "]"}], ",", "\n", "\t\t", 
           RowBox[{"GatedRecurrentLayer", "[", "128", "]"}], ",", "\n", 
           "\t\t", 
           RowBox[{"NetMapOperator", "[", 
            RowBox[{"LinearLayer", "[", "]"}], "]"}], ",", "\n", "\t\t", 
           RowBox[{"SoftmaxLayer", "[", "]"}]}], "\[IndentingNewLine]", 
          "\t\t", "}"}], "\[IndentingNewLine]", "\t\t", ",", 
         "\[IndentingNewLine]", "\t\t", 
         RowBox[{"{", " ", "\n", "\t\t\t", 
          RowBox[{
           RowBox[{
            RowBox[{"NetPort", "[", "\"\<State\>\"", "]"}], "\[Rule]", " ", 
            RowBox[{"1", " ", "\[Rule]", " ", 
             RowBox[{"NetPort", "[", 
              RowBox[{"3", ",", "\"\<State\>\""}], "]"}]}]}], ",", "\n", 
           "\t\t\t", 
           RowBox[{
            RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "\[Rule]", " ", 
            RowBox[{"2", " ", "\[Rule]", " ", 
             RowBox[{"3", " ", "\[Rule]", " ", 
              RowBox[{"4", " ", "\[Rule]", " ", 
               RowBox[{"5", " ", "\[Rule]", " ", 
                RowBox[{
                "NetPort", "[", "\"\<phoneticOutput\>\"", "]"}]}]}]}]}]}]}], 
          "\n", "\t\t\t", "}"}]}], "\[IndentingNewLine]", "\t\t", "]"}]}], 
      ",", "\n", "\t", 
      RowBox[{"\"\<sylabicDec\>\"", " ", "\[Rule]", " ", 
       RowBox[{"NetGraph", "[", "\[IndentingNewLine]", "\t\t", 
        RowBox[{
         RowBox[{"{", "\n", "\t\t", 
          RowBox[{
           RowBox[{"SequenceLastLayer", "[", "]"}], ",", "\n", "\t\t", 
           RowBox[{"GatedRecurrentLayer", "[", "128", "]"}], ",", "\n", 
           "\t\t", 
           RowBox[{"NetMapOperator", "[", 
            RowBox[{"LinearLayer", "[", "2", "]"}], "]"}], ",", "\n", "\t\t", 
           
           RowBox[{"SoftmaxLayer", "[", "]"}]}], "\[IndentingNewLine]", 
          "\t\t", "}"}], "\[IndentingNewLine]", "\t\t", ",", 
         "\[IndentingNewLine]", "\t\t\t", 
         RowBox[{"{", " ", "\n", "\t\t\t", 
          RowBox[{
           RowBox[{
            RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], " ", "\[Rule]", 
            " ", 
            RowBox[{"1", " ", "\[Rule]", " ", 
             RowBox[{"NetPort", "[", 
              RowBox[{"2", ",", " ", "\"\<State\>\""}], "]"}]}]}], ",", "\n", 
           "\t\t\t", 
           RowBox[{
            RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], " ", "\[Rule]", 
            " ", 
            RowBox[{"2", " ", "\[Rule]", " ", 
             RowBox[{"3", " ", "\[Rule]", " ", 
              RowBox[{"4", " ", "\[Rule]", " ", 
               RowBox[{
               "NetPort", "[", "\"\<sylabicOutput\>\"", "]"}]}]}]}]}]}], "\n",
           "\t\t\t", "}"}]}], "\[IndentingNewLine]", "\t\t", "]"}]}]}], "\n", 
     "\t", "}"}], "\n", "\t", ",", "\n", "\t", 
    RowBox[{"{", "\n", "\t", 
     RowBox[{
      RowBox[{"\"\<charEnc\>\"", " ", "\[Rule]", " ", 
       RowBox[{"NetPort", "[", 
        RowBox[{"\"\<phoneticDec\>\"", ",", " ", "\"\<State\>\""}], "]"}]}], 
      ",", "\n", "\t", 
      RowBox[{"\"\<charEnc\>\"", " ", "\[Rule]", " ", "\"\<sylabicDec\>\""}], 
      ",", "\n", "\t", 
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Target\>\"", "]"}], "\[Rule]", " ", 
       RowBox[{"NetPort", "[", 
        RowBox[{"\"\<phoneticDec\>\"", ",", " ", "\"\<Input\>\""}], "]"}]}]}],
      "\n", "\t", "}"}], "\n", "\t", ",", "\n", "\t", 
    RowBox[{"\"\<Input\>\"", " ", "\[Rule]", " ", "inputEncoder"}]}], "\n", 
   "\t", "]"}]}]], "Input",
 CellChangeTimes->{
  3.771414152588982*^9, {3.771414361731707*^9, 3.771414368848442*^9}, {
   3.771414440866823*^9, 3.7714144454735928`*^9}, 3.7714443564375257`*^9, {
   3.771455193719336*^9, 3.771455199861668*^9}},
 CellLabel->
  "In[1912]:=",ExpressionUUID->"46a0a36c-bd7c-4169-8838-9534ebda8bca"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.0149], {
                   GrayLevel[0.6], 
                   Thickness[0.03], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of outputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["3", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.0149], {
                   GrayLevel[0.6], 
                   Thickness[0.03], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], {
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-2., 
                    1.2246467991473532`*^-16}, {-0.9999999999999999, 1.}}], 
                    
                    LineBox[{{-2., 1.2246467991473532`*^-16}, {-1., 
                    6.123233995736766*^-17}}], 
                    LineBox[{{-1., 6.123233995736766*^-17}, {0., 0.}}], 
                    
                    LineBox[{{-2., 1.0000000000000002`}, {-0.9999999999999999,
                     1.}}], 
                    
                    LineBox[{{-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    1.4695761589768238`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736765*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    0.6}, {-0.25, 0}, 
                    Offset[8], {1., 0.9999999999999999}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    8.572527594031473*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-0.4, 
                    2.4492935982947065`*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., -2.220446049250313*^-16}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-0.3999999999999999, 1.}, {-0.25, 0}, 
                    Offset[8], {1., 0.}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3., 1.8369701987210297`*^-16}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{12, 12}, {-2., 1.2246467991473532`*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-2., 1.2246467991473532`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"charEnc\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["charEnc", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-0.9999999999999999, 1.}], 
                    Offset[{12, 12}, {-0.9999999999999999, 1.}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-0.9999999999999999, 
                    1.}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"phoneticDec\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["phoneticDec", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[5], 
                    Skeleton[7]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-1., 6.123233995736766*^-17}], 
                    Offset[{12, 12}, {-1., 6.123233995736766*^-17}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-1., 
                    6.123233995736766*^-17}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"sylabicDec\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "6", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["sylabicDec", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[4], 
                    Skeleton[6]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"sylabicOutput\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["sylabicOutput", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-2., 1.0000000000000002`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Target\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Target", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{6.123233995736766*^-17, 1.}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"phoneticOutput\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["phoneticOutput", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    StyleBox[{{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    Offset[{0, -7}, {-3., 1.8369701987210297`*^-16}], {0, 1.},
                     Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"charEnc\"", TraditionalForm], 
                    Offset[{0, -15}, {-2., 1.2246467991473532`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"phoneticD..\"", "\"phoneticDec\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "phoneticDec", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -15}, {-0.9999999999999999, 1.}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"sylabicDec\"", TraditionalForm], 
                    Offset[{0, -15}, {-1., 6.123233995736766*^-17}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"sylabicOu..\"", "\"sylabicOutput\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "sylabicOutput", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -7}, {0., 0.}], {0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Target\"", TraditionalForm], 
                    Offset[{0, -7}, {-2., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"phoneticO..\"", "\"phoneticOutput\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "phoneticOutput", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -7}, {6.123233995736766*^-17, 1.}], {0, 1.}, 
                    Automatic, {1, 0}]}}, FontColor -> GrayLevel[0.5], 
                    StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False]}, "RowWithSeparators"], 
                    TraditionalForm], 
                    
                    Offset[{3.3677786976552205`*^-16, 
                    5.5}, {-2.4000000000000004`, 1.4695761589768238`*^-16}], {
                    0., -0.17}, Automatic, {1., -6.123233995736765*^-17}], 
                    InsetBox[
                    FormBox[
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"128\""}, "RowWithSeparators"], 
                    TraditionalForm], 
                    
                    Offset[{-3.889087296526011, 3.8890872965260117`}, {-1.4, 
                    0.6}], {0., -0.17}, Automatic, {0.7071067811865476, 
                    0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"128\""}, "RowWithSeparators"], 
                    TraditionalForm], 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-1.4, 
                    8.572527594031473*^-17}], {0., -0.17}, Automatic, {
                    1., -6.123233995736766*^-17}], 
                    InsetBox[
                    FormBox[
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"2\""}, "RowWithSeparators"], 
                    TraditionalForm], 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-0.4, 
                    2.4492935982947065`*^-17}], {0., -0.17}, Automatic, {
                    1., -6.123233995736766*^-17}], 
                    InsetBox[
                    FormBox[
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False]}, "RowWithSeparators"], 
                    TraditionalForm], 
                    Offset[{1.2212453270876722`*^-15, 5.5}, {-1.4, 1.}], {
                    0., -0.17}, Automatic, {1., -2.220446049250313*^-16}], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-0.3999999999999999, 1.}], {0., -0.17},
                     Automatic, {1., 0.}]}, FontColor -> GrayLevel[0.7], 
                    FontSize -> 8, FontWeight -> "Thin", StripOnInput -> 
                    False]}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}, {-0.9999999999999999, 
                    1.}, {-1., 6.123233995736766*^-17}, {0., 0.}, {-2., 
                    1.0000000000000002`}, {6.123233995736766*^-17, 1.}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 24, 24, 8, 8, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, ImageSize -> {221., 102.00000000000001`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{28., 28.}, {28.999999999999996`, 18.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "charEnc"], 
                    NeuralNetworks`NetPath["Nodes", "phoneticDec"], 
                    NeuralNetworks`NetPath["Nodes", "sylabicDec"], 
                    NeuralNetworks`NetPath["Outputs", "sylabicOutput"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "phoneticOutput"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> Association["Form" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1771327500]}, 
                    NeuralNetworks`IndexIntegerT[97]], "Type" -> "Characters",
                     "Encoding" -> NeuralNetworks`ValidatedParameter[
                    MXNetLink`CharacterEncodingData[
                    1, RawArray["UnsignedInteger8",{128, 0, 0, 128, 128, 128, 
                    128, 128, 128, 128, 128, 1, 2, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 
                    13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                    27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 
                    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 
                    55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 
                    69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 
                    83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 
                    97, 128}], 
                    RawArray["UnsignedInteger8",{9, 10, 32, 33, 34, 35, 36, 
                    37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 
                    51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 
                    65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 
                    79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 
                    93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 
                    106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 
                    117, 118, 119, 120, 121, 122, 123, 124, 125, 126}], 97, 
                    Automatic]], "OutputForm" -> "Index", "IgnoreCase" -> 
                    False, "Count" -> 97, "TargetLength" -> All, 
                    "$TargetLength" -> NeuralNetworks`LengthVar[342648405], 
                    "$Padding" -> Automatic, "$Version" -> "12.0.10"], 
                    "Target" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[847712148]}, 
                    NeuralNetworks`IndexIntegerT[NeuralNetworks`SizeT]]], 
                    Association["phoneticOutput" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "sylabicOutput" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1771327500], 2}, 
                    NeuralNetworks`RealT]], 
                    Association[
                    "charEnc" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Embedding", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{97, 32}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["OutputDimension" -> 32, "ClassCount" -> 97, 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1771327500]}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1771327500]}, 
                    NeuralNetworks`IndexIntegerT[97]]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1771327500], 32}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "NetBidirectional", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["ForwardNet" -> 
                    Association["Type" -> "LongShortTermMemory", "Arrays" -> 
                    Association["InputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{64, 32}, NeuralNetworks`RealT], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{64, 64}, NeuralNetworks`RealT], 
                    "InputGateBiases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{64, 32}, NeuralNetworks`RealT], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{64, 64}, NeuralNetworks`RealT], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`TensorT[{64, 32}, NeuralNetworks`RealT], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`TensorT[{64, 64}, NeuralNetworks`RealT], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`TensorT[{64, 32}, NeuralNetworks`RealT], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`TensorT[{64, 64}, NeuralNetworks`RealT], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "OutputSize" -> 64, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    32, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1771327500], 
                    "$CellStateConnectedQ" -> False], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1771327500], 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1771327500], 64}, 
                    NeuralNetworks`RealT]], "States" -> 
                    Association["State" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "CellState" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]]], "BackwardNet" -> 
                    Association["Type" -> "LongShortTermMemory", "Arrays" -> 
                    Association["InputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{64, 32}, NeuralNetworks`RealT], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{64, 64}, NeuralNetworks`RealT], 
                    "InputGateBiases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{64, 32}, NeuralNetworks`RealT], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{64, 64}, NeuralNetworks`RealT], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`TensorT[{64, 32}, NeuralNetworks`RealT], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`TensorT[{64, 64}, NeuralNetworks`RealT], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`TensorT[{64, 32}, NeuralNetworks`RealT], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`TensorT[{64, 64}, NeuralNetworks`RealT], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "OutputSize" -> 64, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    32, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1771327500], 
                    "$CellStateConnectedQ" -> False], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1771327500], 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1771327500], 64}, 
                    NeuralNetworks`RealT]], "States" -> 
                    Association["State" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "CellState" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]]], "Aggregation" -> Catenate, 
                    "$InputTensor" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1771327500], 32}, 
                    NeuralNetworks`RealT], "$ForwardTensor" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1771327500], 64}, 
                    NeuralNetworks`RealT], "$BackwardTensor" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1771327500], 64}, 
                    NeuralNetworks`RealT], "$SequentialOutput" -> True], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1771327500], 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1771327500], 128}, 
                    NeuralNetworks`RealT]], "InteriorStates" -> 
                    Association[{"ForwardNet", "State"} -> 
                    NeuralNetworks`NetPath[
                    "Parameters", "ForwardNet", "States", "State"], {
                    "ForwardNet", "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Parameters", "ForwardNet", "States", "CellState"], {
                    "BackwardNet", "State"} -> 
                    NeuralNetworks`NetPath[
                    "Parameters", "BackwardNet", "States", "State"], {
                    "BackwardNet", "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Parameters", "BackwardNet", "States", "CellState"]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1771327500]}, 
                    NeuralNetworks`IndexIntegerT[97]]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1771327500], 128}, 
                    NeuralNetworks`RealT]], "InteriorStates" -> 
                    Association[{2, "ForwardNet", "State"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Parameters", "ForwardNet", "States", 
                    "State"], {2, "ForwardNet", "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Parameters", "ForwardNet", "States", 
                    "CellState"], {2, "BackwardNet", "State"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Parameters", "BackwardNet", "States", 
                    "State"], {2, "BackwardNet", "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Parameters", "BackwardNet", "States", 
                    "CellState"]]], "sylabicDec" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1771327500], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["sylabicOutput" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1771327500], 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "SequenceLast", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1771327500], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "GatedRecurrent", "Arrays" -> 
                    Association["InputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{128, 128}, NeuralNetworks`RealT], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{128, 128}, NeuralNetworks`RealT], 
                    "InputGateBiases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "ResetGateInputWeights" -> 
                    NeuralNetworks`TensorT[{128, 128}, NeuralNetworks`RealT], 
                    "ResetGateStateWeights" -> 
                    NeuralNetworks`TensorT[{128, 128}, NeuralNetworks`RealT], 
                    "ResetGateBiases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`TensorT[{128, 128}, NeuralNetworks`RealT], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`TensorT[{128, 128}, NeuralNetworks`RealT], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["OutputSize" -> 128, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    128, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1771327500]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1771327500], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1771327500], 128}, 
                    NeuralNetworks`RealT]], "States" -> 
                    Association["State" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "3" -> Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Net" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 128}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 128, "$InputDimensions" -> {128}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[1771327500],
                     "$InputShape" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1771327500], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1771327500], 2}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1771327500], 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1771327500], 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "States", "State"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "sylabicOutput"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}], "phoneticDec" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[847712148]}, 
                    NeuralNetworks`IndexIntegerT[NeuralNetworks`SizeT]], 
                    "State" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1771327500], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["phoneticOutput" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "2" -> Association[
                    "Type" -> "Embedding", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT, 32}, 
                    NeuralNetworks`RealT]], "Parameters" -> 
                    Association["OutputDimension" -> 32, "ClassCount" -> 
                    NeuralNetworks`SizeT, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[847712148]}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[847712148]}, 
                    NeuralNetworks`IndexIntegerT[NeuralNetworks`SizeT]]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[847712148], 32}, 
                    NeuralNetworks`RealT]]], "1" -> 
                    Association[
                    "Type" -> "SequenceLast", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1771327500], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "3" -> Association[
                    "Type" -> "GatedRecurrent", "Arrays" -> 
                    Association["InputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{128, 32}, NeuralNetworks`RealT], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{128, 128}, NeuralNetworks`RealT], 
                    "InputGateBiases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "ResetGateInputWeights" -> 
                    NeuralNetworks`TensorT[{128, 32}, NeuralNetworks`RealT], 
                    "ResetGateStateWeights" -> 
                    NeuralNetworks`TensorT[{128, 128}, NeuralNetworks`RealT], 
                    "ResetGateBiases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`TensorT[{128, 32}, NeuralNetworks`RealT], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`TensorT[{128, 128}, NeuralNetworks`RealT], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["OutputSize" -> 128, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    32, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[847712148]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[847712148], 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[847712148], 128}, 
                    NeuralNetworks`RealT]], "States" -> 
                    Association["State" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "4" -> Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Net" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT, 128}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "Parameters" -> 
                    Association["OutputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$OutputSize" -> NeuralNetworks`SizeT, "$InputSize" -> 
                    128, "$InputDimensions" -> {128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[847712148], "$InputShape" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[847712148], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[847712148]}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]], "5" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[847712148]}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "State"], 
                    NeuralNetworks`NetPath["Nodes", "3", "States", "State"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "phoneticOutput"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}]], 
                    Association[]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"string\"", "SummaryItem"], "", "", 
                    StyleBox[
                    
                    TemplateBox[{"\"phoneticOutput\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"array\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector of \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\" \"", "\"indices\""}, 
                    "RowDefault"], "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"sylabicOutput\"", "\":\""}, "RowDefault"],
                     "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"2\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.771414196288369*^9, 3.77141437070697*^9, 
  3.7714144504982233`*^9, 3.771455378724711*^9, 3.771520682284329*^9, 
  3.7715269146145782`*^9, 3.771589180964528*^9, 3.771683286736628*^9},
 CellLabel->
  "Out[1912]=",ExpressionUUID->"4c6d7858-e58c-4d44-a110-e2d1971310d4"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.771414848819125*^9, 3.771414855707608*^9}},
 CellLabel->
  "In[1913]:=",ExpressionUUID->"37e42455-7c77-4002-8b56-dd5a8702d685"],

Cell["\<\
What the last diagram showed is then boxed and called studentNet so it can be \
embedded within the apparatus needed during training of the network. Notice \
that instead of two output ports, this \[OpenCurlyDoubleQuote]loss\
\[CloseCurlyDoubleQuote] version has a single output so it can keep track of \
the combined loss value of the syllabic and phonetic sides.\
\>", "Text",
 CellChangeTimes->{{3.771484280096456*^9, 3.771484503658143*^9}, {
  3.771484550910071*^9, 3.771484627163463*^9}, {3.771602454659706*^9, 
  3.771602462424114*^9}, {3.771602504393568*^9, 
  3.771602543011979*^9}},ExpressionUUID->"4c0c94c5-a2cf-4e0f-82e3-\
328a32248686"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"lossNet", " ", "=", " ", 
   RowBox[{"NetGraph", "[", "\n", "\t", 
    RowBox[{
     RowBox[{"<|", "\n", "\t", 
      RowBox[{
       RowBox[{"\"\<studentNet\>\"", "\[Rule]", " ", "net"}], "\n", "\t", ",",
        " ", 
       RowBox[{"\"\<sylabicLoss\>\"", " ", "\[Rule]", " ", 
        RowBox[{"CrossEntropyLossLayer", "[", "\"\<Index\>\"", "]"}]}], "\n", 
       "\t", ",", " ", 
       RowBox[{"\"\<phoneticLoss\>\"", " ", "\[Rule]", " ", 
        RowBox[{"CrossEntropyLossLayer", "[", "\"\<Index\>\"", "]"}]}], "\n", 
       "\t", ",", " ", 
       RowBox[{"\"\<toPredict\>\"", " ", "\[Rule]", " ", 
        RowBox[{"SequenceRestLayer", "[", "]"}]}], "\n", "\t", ",", " ", 
       RowBox[{"\"\<previousAnswer\>\"", " ", "\[Rule]", " ", 
        RowBox[{"SequenceMostLayer", "[", "]"}]}], "\n", "\t", ",", " ", 
       RowBox[{"\"\<finalLoss\>\"", " ", "\[Rule]", " ", 
        RowBox[{"ThreadingLayer", "[", "Plus", "]"}]}]}], "\n", "\t", "|>"}], 
     "\n", "\t", ",", "\n", "\t", 
     RowBox[{"{", "\n", "\t", 
      RowBox[{
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<FullTargetSequence\>\"", "]"}], " ", 
        "\[Rule]", " ", 
        RowBox[{"\"\<toPredict\>\"", " ", "\[Rule]", " ", 
         RowBox[{"NetPort", "[", 
          RowBox[{"\"\<phoneticLoss\>\"", ",", " ", "\"\<Target\>\""}], 
          "]"}]}]}], ",", "\n", "\t", 
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<FullTargetSequence\>\"", "]"}], " ", 
        "\[Rule]", " ", 
        RowBox[{"\"\<previousAnswer\>\"", " ", "\[Rule]", " ", 
         RowBox[{"NetPort", "[", 
          RowBox[{"\"\<studentNet\>\"", ",", " ", "\"\<Target\>\""}], 
          "]"}]}]}], ",", "\n", "\t", 
       RowBox[{
        RowBox[{"NetPort", "[", 
         RowBox[{"\"\<studentNet\>\"", ",", " ", "\"\<phoneticOutput\>\""}], 
         "]"}], " ", "\[Rule]", " ", 
        RowBox[{"NetPort", "[", 
         RowBox[{"\"\<phoneticLoss\>\"", ",", " ", "\"\<Input\>\""}], "]"}]}],
        ",", "\n", "\t", 
       RowBox[{
        RowBox[{"NetPort", "[", 
         RowBox[{"\"\<studentNet\>\"", ",", " ", "\"\<sylabicOutput\>\""}], 
         "]"}], " ", "\[Rule]", " ", 
        RowBox[{"NetPort", "[", 
         RowBox[{"\"\<sylabicLoss\>\"", ",", " ", "\"\<Input\>\""}], "]"}]}], 
       ",", "\n", "\t", 
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<SylabicTarget\>\"", "]"}], " ", 
        "\[Rule]", " ", 
        RowBox[{"NetPort", "[", 
         RowBox[{"\"\<sylabicLoss\>\"", ",", " ", "\"\<Target\>\""}], "]"}]}],
        ",", "\n", "\t", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<phoneticLoss\>\"", ",", " ", "\"\<sylabicLoss\>\""}], 
         "}"}], " ", "\[Rule]", " ", 
        RowBox[{"\"\<finalLoss\>\"", " ", "\[Rule]", " ", 
         RowBox[{"NetPort", "[", "\"\<Loss\>\"", "]"}]}]}]}], "\n", "\t", 
      "}"}], ",", "\n", "\t", 
     RowBox[{
     "\"\<FullTargetSequence\>\"", " ", "\[Rule]", " ", "targetEncoder"}]}], 
    "\[IndentingNewLine]", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.771414859706705*^9, 3.77141486248415*^9}, 
   3.771416698202519*^9, 3.7714443415883007`*^9, 3.7714552376956244`*^9, {
   3.771455434180273*^9, 3.771455438465404*^9}},
 CellLabel->
  "In[1914]:=",ExpressionUUID->"742dd5d3-6480-466d-999a-7f297608aefa"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.0149], {
                   GrayLevel[0.6], 
                   Thickness[0.03], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["3", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Loss\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["6", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.0149], {
                   GrayLevel[0.6], 
                   Thickness[0.03], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], {
                    
                    LineBox[{{-5., 3.061616997868383*^-16}, {-4., 
                    1.0000000000000002`}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEiBziLb+5fz7/NZmX6m0dfzwsfKJkcqrrp1lab
iCU8NndnCR94W9wwVWHBVhuebQnc2xKED+SLRAn8jt9qc3jOi4AGReEDf0se
TXWU2mpTB9YgdGDaVEm1L+e22Ni/nGz3crLQAeuy/weE6rbYsPhvf9buKnTg
jdiUtLnqW2zOdPKxSnwSPLCi/LrYlNObbWbNBAHBA3kzTl78lrnZ5hVIu53g
AStJ4Un9rJttLPseW/Q9FjjAMSsmSGPhJpuuDhAQOHBVapnQQZtNNjeadIFI
4MCC2e8vRd7YaBPwa4n/ryX8B/JkLCd/Kt5o8+EdCPAdsJrbFNzNv9EGbJwF
3wF2uTPCKqs32OiBDeA9cGWe6JU9bhtszp4BAZ4DDvb7NFYfWW8DDh5pngNn
GhbNK2Bcb/MrcaLRhxLuA25Omv9jPdfZtICsv8F1YFlzkFfxnLVQ/3IdeOci
17Dh1xqb6mN6cf/3cB5QautZIJqyBuo/zgN27nNXL7qx2gas/BTHAZeOgIXh
Eatt1hioW4kkcBww8lzWaPJ4lQ0kvjgOcHXN87GsXGUDANNR2Bw=
                    "]], 
                    
                    
                    LineBox[{{-4., 1.0000000000000002`}, {-3., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-4., 2.0000000000000004`}, {-3., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-3., 1.0000000000000002`}, {-2., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-3., 
                    1.0000000000000002`}, {-1.9999999999999998`, 2.}}], 
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-2., 1.0000000000000002`}, {-0.9999999999999999,
                     1.}}], 
                    LineBox[{{-3., 2.}, {-1.9999999999999998`, 2.}}], 
                    
                    LineBox[{{-1.9999999999999998`, 2.}, {-0.9999999999999999,
                     1.}}], 
                    
                    LineBox[{{-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-4.4, 
                    0.6000000000000002}, {-0.25, 0}, 
                    Offset[8], {1., 0.9999999999999999}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-3.777777777777778, 
                    2.3132217317227785`*^-16}, {-0.25, 0}, 
                    Offset[8], {
                    0.17777777777777803`, -1.0885749325754216`*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    1.4000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., -1.0000000000000002`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-2.4, 
                    1.6}, {-0.25, 0}, 
                    Offset[8], {1.0000000000000002`, 0.9999999999999998}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    0.6000000000000002}, {-0.25, 0}, 
                    Offset[8], {1., 1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., -2.220446049250313*^-16}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-2.4, 
                    2.}, {-0.25, 0}, 
                    Offset[8], {1.0000000000000002`, 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    1.4}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999999, -1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-0.3999999999999999, 1.}, {-0.25, 0}, 
                    Offset[8], {1., 0.}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-5., 3.061616997868383*^-16}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"FullTargetSequence\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["FullTargetSequence", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-4., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-4., 1.0000000000000002`}]]}, 
                    InsetBox[
                    FormBox["\"SM\"", TraditionalForm], 
                    Offset[{0, -1}, {-4., 1.0000000000000002`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"previousAnswer\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SequenceMostLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", 
                    RowBox[{"Restricted", "[", 
                    RowBox[{"\"Integer\"", ",", "40"}], "]"}]}], "}"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["previousAnswer", Bold], 
                    Style[
                    HoldForm[
                    SequenceMostLayer["Input" -> {"Varying", 
                    Restricted["Integer", 40]}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{10, 10}, {-3., 1.8369701987210297`*^-16}]]}, 
                    InsetBox[
                    FormBox["\"SR\"", TraditionalForm], 
                    Offset[{0, -1}, {-3., 1.8369701987210297`*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"toPredict\"", Bold, StripOnInput -> False]}, {
                    
                    StyleBox[
                    TagBox[
                    RowBox[{"SequenceRestLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", 
                    RowBox[{"Restricted", "[", 
                    RowBox[{"\"Integer\"", ",", "40"}], "]"}]}], "}"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["toPredict", Bold], 
                    Style[
                    HoldForm[
                    SequenceRestLayer["Input" -> {"Varying", 
                    Restricted["Integer", 40]}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-3., 1.0000000000000002`}], 
                    Offset[{12, 12}, {-3., 1.0000000000000002`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-3., 
                    1.0000000000000002`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"studentNet\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "6", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["studentNet", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[3], 
                    Skeleton[6]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-4., 2.0000000000000004`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9333333333333333, 0.5133333333333334, 
                    0.5133333333333334]], 
                    EdgeForm[
                    Hue[0, 0.7, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-2., 1.0000000000000002`}]]}, 
                    InsetBox[
                    FormBox["\"CE\"", TraditionalForm], 
                    Offset[{0, -1}, {-2., 1.0000000000000002`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"phoneticLoss\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CrossEntropyLossLayer", "[", 
                    RowBox[{"\"Index\"", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "40"}], "}"}]}], ",", 
                    RowBox[{"\"Target\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", 
                    RowBox[{"Restricted", "[", 
                    RowBox[{"\"Integer\"", ",", "40"}], "]"}]}], "}"}]}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["phoneticLoss", Bold], 
                    Style[
                    HoldForm[
                    CrossEntropyLossLayer[
                    "Index", "Input" -> {"Varying", 40}, 
                    "Target" -> {"Varying", 
                    Restricted["Integer", 40]}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9333333333333333, 0.5133333333333334, 
                    0.5133333333333334]], 
                    EdgeForm[
                    Hue[0, 0.7, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-1.9999999999999998`, 2.}], 
                    Offset[{10, 10}, {-1.9999999999999998`, 2.}]]}, 
                    InsetBox[
                    FormBox["\"CE\"", TraditionalForm], 
                    Offset[{0, -1}, {-1.9999999999999998`, 2.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"sylabicLoss\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CrossEntropyLossLayer", "[", 
                    RowBox[{"\"Index\"", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", "2"}], "}"}]}], ",", 
                    RowBox[{"\"Target\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Varying\"", ",", 
                    RowBox[{"Restricted", "[", 
                    RowBox[{"\"Integer\"", ",", "2"}], "]"}]}], "}"}]}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["sylabicLoss", Bold], 
                    Style[
                    HoldForm[
                    CrossEntropyLossLayer[
                    "Index", "Input" -> {"Varying", 2}, 
                    "Target" -> {"Varying", 
                    Restricted["Integer", 2]}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-0.9999999999999999, 1.}], 
                    Offset[{10, 10}, {-0.9999999999999999, 1.}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"+\"", 14, StripOnInput -> False], 
                    TraditionalForm]], {-0.9999999999999999, 1.}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"finalLoss\"", Bold, StripOnInput -> False]}, {
                    
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Real\"", ",", "\"Real\""}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["finalLoss", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[Plus, "Inputs" -> {"Real", "Real"}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3., 2.}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"SylabicTarget\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["SylabicTarget", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{6.123233995736766*^-17, 1.}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    StyleBox[{{
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"FullTarge..\"", "\"FullTargetSequence\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "FullTargetSequence", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -7}, {-5., 3.061616997868383*^-16}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"previousA..\"", "\"previousAnswer\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "previousAnswer", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -13}, {-4., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"toPredict\"", TraditionalForm], 
                    Offset[{0, -13}, {-3., 1.8369701987210297`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"studentNet\"", TraditionalForm], 
                    Offset[{0, -15}, {-3., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    Offset[{0, -7}, {-4., 2.0000000000000004`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"phoneticL..\"", "\"phoneticLoss\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "phoneticLoss", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -13}, {-2., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"sylabicLo..\"", "\"sylabicLoss\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "sylabicLoss", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -13}, {-1.9999999999999998`, 2.}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"finalLoss\"", TraditionalForm], 
                    Offset[{0, -13}, {-0.9999999999999999, 1.}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"SylabicTa..\"", "\"SylabicTarget\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "SylabicTarget", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -7}, {-3., 2.}], {0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Loss\"", TraditionalForm], 
                    Offset[{0, -7}, {6.123233995736766*^-17, 1.}], {0, 1.}, 
                    Automatic, {1, 0}]}}, FontColor -> GrayLevel[0.5], 
                    StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False]}, "RowWithSeparators"], 
                    TraditionalForm], 
                    Offset[{-3.889087296526011, 3.8890872965260117`}, {-4.4, 
                    0.6000000000000002}], {0., -0.17}, Automatic, {
                    0.7071067811865476, 0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False]}, "RowWithSeparators"], 
                    TraditionalForm], 
                    
                    Offset[{3.3677786976552057`*^-16, 
                    5.5}, {-3.777777777777778, 2.3132217317227785`*^-16}], {
                    0., -0.17}, Automatic, {1., -6.123233995736738*^-17}], 
                    InsetBox[
                    FormBox[
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False]}, "RowWithSeparators"], 
                    TraditionalForm], 
                    Offset[{0., 5.5}, {-3.4, 1.0000000000000002`}], {
                    0., -0.17}, Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox[
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False]}, "RowWithSeparators"], 
                    TraditionalForm], 
                    
                    Offset[{3.8890872965260117`, 3.889087296526011}, {-3.4, 
                    1.4000000000000004`}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865476}], 
                    InsetBox[
                    FormBox[
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"40\""}, "RowWithSeparators"], 
                    TraditionalForm], 
                    
                    Offset[{0., 5.5}, {-2.4000000000000004`, 
                    1.0000000000000002`}], {0., -0.17}, Automatic, {1., 0.}], 
                    
                    InsetBox[
                    FormBox[
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"2\""}, "RowWithSeparators"], 
                    TraditionalForm], 
                    
                    Offset[{-3.8890872965260104`, 3.8890872965260117`}, {-2.4,
                     1.6}], {0., -0.17}, Automatic, {0.7071067811865476, 
                    0.7071067811865474}], 
                    InsetBox[
                    FormBox[
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False]}, "RowWithSeparators"], 
                    TraditionalForm], 
                    
                    Offset[{-3.889087296526011, 
                    3.889087296526011}, {-2.4000000000000004`, 
                    0.6000000000000002}], {0., -0.17}, Automatic, {
                    0.7071067811865475, 0.7071067811865475}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    Offset[{1.2212453270876722`*^-15, 5.5}, {-1.4, 1.}], {
                    0., -0.17}, Automatic, {1., -2.220446049250313*^-16}], 
                    InsetBox[
                    FormBox[
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False]}, "RowWithSeparators"], 
                    TraditionalForm], 
                    Offset[{0., 5.5}, {-2.4, 2.}], {0., -0.17}, Automatic, {
                    1., 0.}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{3.8890872965260117`, 3.889087296526011}, {-1.4, 
                    1.4}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865476}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-0.3999999999999999, 1.}], {0., -0.17},
                     Automatic, {1., 0.}]}, FontColor -> GrayLevel[0.7], 
                    FontSize -> 8, FontWeight -> "Thin", StripOnInput -> 
                    False]}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-5., 3.061616997868383*^-16}, {-4., 
                    1.0000000000000002`}, {-3., 
                    1.8369701987210297`*^-16}, {-3., 
                    1.0000000000000002`}, {-4., 2.0000000000000004`}, {-2., 
                    1.0000000000000002`}, {-1.9999999999999998`, 
                    2.}, {-0.9999999999999999, 1.}, {-3., 2.}, {
                    6.123233995736766*^-17, 1.}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 20, 20, 24, 8, 20, 20, 20, 8, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, ImageSize -> {331., 156.00000000000003`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{28.000000000000007`, 28.}, {28., 18.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "FullTargetSequence"], 
                    NeuralNetworks`NetPath["Nodes", "previousAnswer"], 
                    NeuralNetworks`NetPath["Nodes", "toPredict"], 
                    NeuralNetworks`NetPath["Nodes", "studentNet"], 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "phoneticLoss"], 
                    NeuralNetworks`NetPath["Nodes", "sylabicLoss"], 
                    NeuralNetworks`NetPath["Nodes", "finalLoss"], 
                    NeuralNetworks`NetPath["Inputs", "SylabicTarget"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> Association["Form" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[232246688]}, 
                    NeuralNetworks`IndexIntegerT[97]], "Type" -> "Characters",
                     "Encoding" -> NeuralNetworks`ValidatedParameter[
                    MXNetLink`CharacterEncodingData[
                    1, RawArray["UnsignedInteger8",{128, 0, 0, 128, 128, 128, 
                    128, 128, 128, 128, 128, 1, 2, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 
                    13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                    27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 
                    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 
                    55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 
                    69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 
                    83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 
                    97, 128}], RawArray["UnsignedInteger8",{9, 10, 32, 33, 34,
                     35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 
                    49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 
                    63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 
                    77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 
                    91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 
                    104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 
                    115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 
                    126}], 97, Automatic]], "OutputForm" -> "Index", 
                    "IgnoreCase" -> False, "Count" -> 97, "TargetLength" -> 
                    All, "$TargetLength" -> 
                    NeuralNetworks`LengthVar[342648405], "$Padding" -> 
                    Automatic, "$Version" -> "12.0.10"], "FullTargetSequence" -> 
                    Association["Form" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1657356029]}, 
                    NeuralNetworks`IndexIntegerT[40]], "Type" -> "Characters",
                     "Encoding" -> NeuralNetworks`ValidatedParameter[
                    MXNetLink`CharacterEncodingData[1, CompressedData["
1:eJxV0LlKA0EAgOH1jPd93zHepbYiWIpd1ELEYkM2MR4b2USDtnZi5dP4CBY+
h7WP4Ddg48K3PzMMM8PkS/VipT2KokaPXzFuHWZZ/HQyanCWNmrVNCkfpc2k
mmR7u2lYt0NoW/T/2/+bP6CDYws6w5Ymu/RUu/Vcc3qh4chL7dVY+/Ra+/VF
B/RVB/VNh/Rdh/VTR/RLw21jxvhmnBITlJnkhykSpqkwwxWz1JgL5zPPDQvc
ssgdS6QsU2eFe/JkrIZ3pECTNR5Y55ENWmzyzBYfHmtbfwE0DSLD
                    "], 
                    RawArray["UnsignedInteger32",{60, 62, 331, 594, 596, 601, 
                    603, 605, 609, 618, 643, 650, 652, 658, 712, 716, 97, 230,
                     98, 100, 240, 101, 102, 104, 105, 106, 107, 108, 109, 
                    110, 111, 112, 114, 115, 116, 117, 118, 119, 122, 952}], 
                    40, {"<", ">", "\:014b", "\:0252", "\:0254", "\:0259", 
                    "\:025b", "\:025d", "\:0261", "\:026a", "\:0283", 
                    "\:028a", "\:028c", "\:0292", "\:02c8", "\:02cc", "a", 
                    "\[AE]", "b", "d", "\[Eth]", "e", "f", "h", "i", "j", "k",
                     "l", "m", "n", "o", "p", "r", "s", "t", "u", "v", "w", 
                    "z", "\[Theta]"}]], "OutputForm" -> "Index", "IgnoreCase" -> 
                    False, "Count" -> 40, "TargetLength" -> All, 
                    "$TargetLength" -> NeuralNetworks`LengthVar[1074552296], 
                    "$Padding" -> Automatic, "$Version" -> "12.0.10"], 
                    "SylabicTarget" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[232246688]}, 
                    NeuralNetworks`IndexIntegerT[2]]], 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], 
                    Association[
                    "previousAnswer" -> 
                    Association[
                    "Type" -> "SequenceMost", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[1657356029], 
                    "$Shape" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[40]], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[2070216753]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1657356029]}, 
                    NeuralNetworks`IndexIntegerT[40]]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2070216753]}, 
                    NeuralNetworks`IndexIntegerT[40]]]], "studentNet" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[232246688]}, 
                    NeuralNetworks`IndexIntegerT[97]], "Target" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2070216753]}, 
                    NeuralNetworks`IndexIntegerT[40]]], "Outputs" -> 
                    Association["phoneticOutput" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2070216753], 40}, 
                    NeuralNetworks`RealT], "sylabicOutput" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[232246688], 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "charEnc" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Embedding", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{97, 32}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "OutputDimension" -> 32, "ClassCount" -> 97, 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[232246688]}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[232246688]}, 
                    NeuralNetworks`IndexIntegerT[97]]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[232246688], 32}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "NetBidirectional", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["ForwardNet" -> 
                    Association["Type" -> "LongShortTermMemory", "Arrays" -> 
                    Association["InputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{64, 32}, NeuralNetworks`RealT], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{64, 64}, NeuralNetworks`RealT], 
                    "InputGateBiases" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "OutputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{64, 32}, NeuralNetworks`RealT], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{64, 64}, NeuralNetworks`RealT], 
                    "OutputGateBiases" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "ForgetGateInputWeights" -> 
                    NeuralNetworks`TensorT[{64, 32}, NeuralNetworks`RealT], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`TensorT[{64, 64}, NeuralNetworks`RealT], 
                    "ForgetGateBiases" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MemoryGateInputWeights" -> 
                    NeuralNetworks`TensorT[{64, 32}, NeuralNetworks`RealT], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`TensorT[{64, 64}, NeuralNetworks`RealT], 
                    "MemoryGateBiases" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]], "Parameters" -> 
                    Association["OutputSize" -> 64, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    32, "$SequenceLength" -> NeuralNetworks`LengthVar[
                    232246688], "$CellStateConnectedQ" -> False], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[232246688], 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[232246688], 64}, 
                    NeuralNetworks`RealT]], "States" -> 
                    Association["State" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "BackwardNet" -> Association[
                    "Type" -> "LongShortTermMemory", "Arrays" -> 
                    Association["InputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{64, 32}, NeuralNetworks`RealT], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{64, 64}, NeuralNetworks`RealT], 
                    "InputGateBiases" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "OutputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{64, 32}, NeuralNetworks`RealT], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{64, 64}, NeuralNetworks`RealT], 
                    "OutputGateBiases" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "ForgetGateInputWeights" -> 
                    NeuralNetworks`TensorT[{64, 32}, NeuralNetworks`RealT], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`TensorT[{64, 64}, NeuralNetworks`RealT], 
                    "ForgetGateBiases" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MemoryGateInputWeights" -> 
                    NeuralNetworks`TensorT[{64, 32}, NeuralNetworks`RealT], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`TensorT[{64, 64}, NeuralNetworks`RealT], 
                    "MemoryGateBiases" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]], "Parameters" -> 
                    Association["OutputSize" -> 64, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    32, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[232246688], 
                    "$CellStateConnectedQ" -> False], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[232246688], 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[232246688], 64}, 
                    NeuralNetworks`RealT]], "States" -> 
                    Association["State" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "CellState" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Aggregation" -> Catenate, "$InputTensor" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[232246688], 32}, 
                    NeuralNetworks`RealT], "$ForwardTensor" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[232246688], 64}, 
                    NeuralNetworks`RealT], "$BackwardTensor" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[232246688], 64}, 
                    NeuralNetworks`RealT], "$SequentialOutput" -> True], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[232246688], 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[232246688], 128}, 
                    NeuralNetworks`RealT]], "InteriorStates" -> 
                    Association[{"ForwardNet", "State"} -> 
                    NeuralNetworks`NetPath[
                    "Parameters", "ForwardNet", "States", "State"], {
                    "ForwardNet", "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Parameters", "ForwardNet", "States", "CellState"], {
                    "BackwardNet", "State"} -> 
                    NeuralNetworks`NetPath[
                    "Parameters", "BackwardNet", "States", "State"], {
                    "BackwardNet", "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Parameters", "BackwardNet", "States", "CellState"]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[232246688]}, 
                    NeuralNetworks`IndexIntegerT[97]]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[232246688], 128}, 
                    NeuralNetworks`RealT]], "InteriorStates" -> 
                    Association[{2, "ForwardNet", "State"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Parameters", "ForwardNet", "States", 
                    "State"], {2, "ForwardNet", "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Parameters", "ForwardNet", "States", 
                    "CellState"], {2, "BackwardNet", "State"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Parameters", "BackwardNet", "States", 
                    "State"], {2, "BackwardNet", "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Parameters", "BackwardNet", "States", 
                    "CellState"]]], "sylabicDec" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[232246688], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["sylabicOutput" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[232246688], 2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "SequenceLast", "Arrays" -> 
                    Association[], "Parameters" -> Association[], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[232246688], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "GatedRecurrent", "Arrays" -> 
                    Association["InputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{128, 128}, NeuralNetworks`RealT], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{128, 128}, NeuralNetworks`RealT], 
                    "InputGateBiases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "ResetGateInputWeights" -> 
                    NeuralNetworks`TensorT[{128, 128}, NeuralNetworks`RealT], 
                    "ResetGateStateWeights" -> 
                    NeuralNetworks`TensorT[{128, 128}, NeuralNetworks`RealT], 
                    "ResetGateBiases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`TensorT[{128, 128}, NeuralNetworks`RealT], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`TensorT[{128, 128}, NeuralNetworks`RealT], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "OutputSize" -> 128, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    128, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[232246688]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[232246688], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[232246688], 128}, 
                    NeuralNetworks`RealT]], "States" -> 
                    Association["State" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "3" -> Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Net" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 128}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 128, "$InputDimensions" -> {128}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[232246688], "$InputShape" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[232246688], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[232246688], 2}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Softmax", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> -1],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[232246688], 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[232246688], 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "States", "State"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "sylabicOutput"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}], "phoneticDec" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2070216753]}, 
                    NeuralNetworks`IndexIntegerT[40]], "State" -> 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[232246688], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["phoneticOutput" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2070216753], 40}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["2" -> 
                    Association["Type" -> "Embedding", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{40, 32}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "OutputDimension" -> 32, "ClassCount" -> 40, 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2070216753]}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2070216753]}, 
                    NeuralNetworks`IndexIntegerT[40]]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2070216753], 32}, 
                    NeuralNetworks`RealT]]], "1" -> 
                    Association["Type" -> "SequenceLast", "Arrays" -> 
                    Association[], "Parameters" -> Association[], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[232246688], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "3" -> Association[
                    "Type" -> "GatedRecurrent", "Arrays" -> 
                    Association["InputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{128, 32}, NeuralNetworks`RealT], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{128, 128}, NeuralNetworks`RealT], 
                    "InputGateBiases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "ResetGateInputWeights" -> 
                    NeuralNetworks`TensorT[{128, 32}, NeuralNetworks`RealT], 
                    "ResetGateStateWeights" -> 
                    NeuralNetworks`TensorT[{128, 128}, NeuralNetworks`RealT], 
                    "ResetGateBiases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`TensorT[{128, 32}, NeuralNetworks`RealT], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`TensorT[{128, 128}, NeuralNetworks`RealT], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "OutputSize" -> 128, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    32, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2070216753]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2070216753], 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2070216753], 128}, 
                    NeuralNetworks`RealT]], "States" -> 
                    Association["State" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "4" -> Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Net" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{40, 128}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputDimensions" -> {40}, "$OutputSize" -> 40, 
                    "$InputSize" -> 128, "$InputDimensions" -> {128}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{40}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2070216753], "$InputShape" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{40}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2070216753], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2070216753], 40}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Softmax", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> -1],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2070216753], 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2070216753], 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "State"], 
                    NeuralNetworks`NetPath["Nodes", "3", "States", "State"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "phoneticOutput"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "charEnc", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "phoneticDec", "Inputs", "State"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "charEnc", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "sylabicDec", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "charEnc", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "sylabicOutput"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sylabicDec", "Outputs", "sylabicOutput"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "phoneticDec", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "phoneticOutput"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "phoneticDec", "Outputs", "phoneticOutput"]}, 
                    "InteriorStates" -> 
                    Association[{"charEnc", 2, "ForwardNet", "State"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "charEnc", "Nodes", "2", "Parameters", 
                    "ForwardNet", "States", "State"], {
                    "charEnc", 2, "ForwardNet", "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "charEnc", "Nodes", "2", "Parameters", 
                    "ForwardNet", "States", "CellState"], {
                    "charEnc", 2, "BackwardNet", "State"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "charEnc", "Nodes", "2", "Parameters", 
                    "BackwardNet", "States", "State"], {
                    "charEnc", 2, "BackwardNet", "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "charEnc", "Nodes", "2", "Parameters", 
                    "BackwardNet", "States", "CellState"]]], "toPredict" -> 
                    Association[
                    "Type" -> "SequenceRest", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[1657356029], 
                    "$Shape" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[40]], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[2070216753]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1657356029]}, 
                    NeuralNetworks`IndexIntegerT[40]]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2070216753]}, 
                    NeuralNetworks`IndexIntegerT[40]]]], "phoneticLoss" -> 
                    Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["TargetForm" -> "Index", "$InputDimensions" -> {
                    NeuralNetworks`LengthVar[2070216753]}, "$Classes" -> 40], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2070216753], 40}, 
                    NeuralNetworks`RealT], "Target" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2070216753]}, 
                    NeuralNetworks`IndexIntegerT[40]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "sylabicLoss" -> 
                    Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["TargetForm" -> "Index", "$InputDimensions" -> {
                    NeuralNetworks`LengthVar[232246688]}, "$Classes" -> 2], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[232246688], 2}, 
                    NeuralNetworks`RealT], "Target" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[232246688]}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "finalLoss" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    Association[]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"string\"", "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Loss\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {
                    StyleBox[
                    
                    TemplateBox[{"\"FullTargetSequence\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"string\"", "SummaryItem"], "", "", "", ""}, {
                    StyleBox[
                    TemplateBox[{"\"SylabicTarget\"", "\":\""}, "RowDefault"],
                     "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"vector of \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\" \"", 
                    TemplateBox[{"\"indices\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"range\"",
                     "\":\"", "\" \"", 
                    TemplateBox[{"1", "\"..\"", "2"}, "RowDefault"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}, 
                    "RowDefault"], "SummaryItem"], "", "", "", ""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.771414618724815*^9, 3.7714148707587557`*^9, 
  3.771416704153955*^9, 3.771455449510478*^9, 3.77152068238726*^9, 
  3.771526992187443*^9, 3.7715891944944267`*^9, 3.771683286842497*^9},
 CellLabel->
  "Out[1914]=",ExpressionUUID->"e81879c7-c7c3-4752-bd94-e816a051b595"]
}, Open  ]],

Cell["\<\
The network is trained on 85% of the data collected from WordData, the \
remaining 15% held back for testing purposes. We halt the training after \
eighteen rounds because the validation loss stops improving. Continuing the \
training beyond that point causes overfitting, a sort of memorization of the \
training data rather than a holistic fitting of the features.\
\>", "Text",
 CellChangeTimes->{{3.771490256177142*^9, 3.771490321568924*^9}, {
  3.771490369637748*^9, 3.771490568638588*^9}, {3.771490647656971*^9, 
  3.771490666030284*^9}},ExpressionUUID->"2952e7ac-314c-44e4-9f0f-\
0d48c459f81d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netTrainRes", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"lossNet", ",", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Input\>\"", "\[Rule]", 
       RowBox[{"train3", "\[LeftDoubleBracket]", 
        RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}]}], ",", 
      RowBox[{"\"\<FullTargetSequence\>\"", "\[Rule]", 
       RowBox[{"train3", "\[LeftDoubleBracket]", 
        RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}]}], ",", " ", 
      RowBox[{"\"\<SylabicTarget\>\"", " ", "\[Rule]", 
       RowBox[{"train3", "\[LeftDoubleBracket]", 
        RowBox[{"All", ",", "3"}], "\[RightDoubleBracket]"}]}]}], "|>"}], ",",
     "All", ",", " ", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Input\>\"", "\[Rule]", 
        RowBox[{"test3", "\[LeftDoubleBracket]", 
         RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}]}], ",", 
       RowBox[{"\"\<FullTargetSequence\>\"", "\[Rule]", 
        RowBox[{"test3", "\[LeftDoubleBracket]", 
         RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}]}], ",", 
       RowBox[{"\"\<SylabicTarget\>\"", " ", "\[Rule]", 
        RowBox[{"test3", "\[LeftDoubleBracket]", 
         RowBox[{"All", ",", "3"}], "\[RightDoubleBracket]"}]}]}], "|>"}]}], 
    ",", " ", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "50"}]}], "]"}]}]], "Input",
 CellLabel->
  "In[1915]:=",ExpressionUUID->"51c32f67-e877-42fc-957a-83a7ac235f52"],

Cell[BoxData[
 FrameBox[GridBox[{
    {
     ItemBox[
      FrameBox[
       StyleBox["\<\"NetTrain Results\"\>", "SuggestionsBarText",
        StripOnInput->False,
        FontSize->12],
       FrameMargins->{{10, 5}, {-4, 2}},
       FrameStyle->None,
       StripOnInput->False],
      Alignment->{Left, Bottom},
      Background->RGBColor[0.96, 0.96, 0.96],
      Frame->{{False, False}, {True, False}},
      FrameStyle->Opacity[0.1],
      ItemSize->{Automatic, 1},
      StripOnInput->False]},
    {
     ItemBox[
      TagBox[
       FrameBox[
        TagBox[GridBox[{
           {
            TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"summary\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            
            TemplateBox[{
             ",","\",\"",
              TemplateBox[{"\[ThinSpace]", "\" \"", "\"batches:\"", "17213"}, 
               "RowWithSeparators"],
              TemplateBox[{"\[ThinSpace]", "\" \"", "\"rounds:\"", "24"}, 
               "RowWithSeparators"],
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"time:\"", "\"4.6min\""}, 
               "RowWithSeparators"],
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"examples/s:\"", "2013"}, 
               "RowWithSeparators"]},
             "RowWithSeparators"]},
           {
            TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"data\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            
            TemplateBox[{
             ",","\",\"",
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"training examples:\"", "23639"}, 
               "RowWithSeparators"],
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"validation examples:\"", "4172"}, 
               "RowWithSeparators"],
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"processed examples:\"", "550816"}, 
               "RowWithSeparators"],
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"skipped examples:\"", "0"}, 
               "RowWithSeparators"]},
             "RowWithSeparators"]},
           {
            TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"method\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            
            TemplateBox[{
             ",","\",\"",
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"ADAM\"", "\"optimizer\""}, 
               "RowWithSeparators"],
              TemplateBox[{"\[ThinSpace]", "\" \"", "\"batch size\"", "32"}, 
               "RowWithSeparators"],"\"CPU\""},
             "RowWithSeparators"]},
           {
            TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"round\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            TemplateBox[{",","\",\"",TemplateBox[{"\[ThinSpace]", "\" \"", 
                TagBox[
                 TooltipBox["\"loss:\"", 
                  TagBox[
                   GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"loss\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"]], Annotation[#, 
                  Column[{
                    Row[{"Measurement: ", "loss"}]}], "Tooltip"]& ], 
                TagBox[
                 InterpretationBox[
                  RowBox[{"\"2.55\"", "\[Times]", 
                    SuperscriptBox["10", "\"-1\""]}], 0.25517888883044776`, 
                  AutoDelete -> True], ScientificForm[#, 3]& ]}, 
               "RowWithSeparators"]},
             "RowWithSeparators"]},
           {
            
            TemplateBox[{
             TemplateBox[{5}, "Spacer1"],StyleBox["\"validation\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            TemplateBox[{",","\",\"",TemplateBox[{"\[ThinSpace]", "\" \"", 
                TagBox[
                 TooltipBox["\"loss:\"", 
                  TagBox[
                   GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"loss\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"]], Annotation[#, 
                  Column[{
                    Row[{"Measurement: ", "loss"}]}], "Tooltip"]& ], 
                TagBox[
                 InterpretationBox[
                  RowBox[{"\"5.29\"", "\[Times]", 
                    SuperscriptBox["10", "\"-1\""]}], 0.5291267880360253, 
                  AutoDelete -> True], ScientificForm[#, 3]& ]}, 
               "RowWithSeparators"]},
             "RowWithSeparators"]},
           {
            ItemBox[GridBox[{
               {"", 
                ItemBox["\<\"rounds\"\>",
                 DefaultBaseStyle->"LabeledLabel"]},
               {
                RotationBox[
                 ItemBox["\<\"loss\"\>",
                  DefaultBaseStyle->"LabeledLabel"],
                 BoxRotation->1.5708], 
                GraphicsBox[
                 {AbsoluteThickness[1.25], {
                   {Hue[0.083, 1., 1.], LineBox[CompressedData["
1:eJwtl3k8VH0bxiVSsiXJnn1fZxjanFv0tHjakUgqFCqkoo0sKbRpUZRKKspW
CaG47SEJYx3bLFK0UEl73pnf+/zl43PmnPmd+76u63uNxvbA9T7CQkJCBlOE
hAR/a5JWbT07N5+6L0QdjvzApf7/fzXl7rft/JlwNqXvsz/BWauJ8kzV7+jy
6f3vehuVFlw3fNeLRU383fp9r2o39baqqdH1chelRz7fT8VwN3/K9+6ksl/b
X0q5xKFKPjhuyL/a8d/9gxQvsUXo4KF2qt9xo3HE1SFK68J5SnNfG/WNPG+Y
Wq4379myViYlk+df7ZX6jnJfWKpaVNBKGZDnf6TWs5RvlsW3UhoSVK7WhjGq
t3HGi81SLVQO+b5P1LOC2LCQbc3UfFx+eE7HZ0q64P7OiH+a/vv+ccpm+U1l
Z3YjtS54/T9im75SvR8d19XINFJ95DwTlOUP2rF2xQbKT2ez7I+eb9RRtVVy
7i/qqK/kfD+o8fqCjzEhtVRkl0//yJaflJ3vvJViwdWUJDnvL6pku9iQZ3oN
lXwqMLOX85ty25aXOL+zmtIh5/9L3UliZN2XraAe2R4KafKepFRmXUkeFKui
5pH3EYINjsGJlxaVUq8P2mmwvwjB/rzbbeaqJVQWeb8p8M/33DipjaXUXsHx
rYTB8LXLdRuPAsqavK8wvLmSxTt9roj6Y+T4oSVkKtiuiCzS/J5HVZH3F4GX
GVc3JgoVUnGia5kri0SgtEBuW0z4Y2oNmYcoME++vLXsQyE1Z8CpuOqHKJg7
jBVouTykesh8poF/aLEZPTGLulW06eaihWIQ1bTql1FjOrWTzEsM/pXJ4Xze
fJ4yubAlpuDodDAS9tZr+XWD+kLmNwMqtRnjIwbnqeJdXrtMy2bAwJryf+vq
LlLHyDzFoUonouTCqQRq6VLfdRmT4iB6PEfF6nQkziTznQm9UWunfv8dQ7Wo
7bFWt5OAZWenZz2cjMYrZN4SYMMdP5a/5hDlwf+25ChJUN7Ru48hHEZpkflL
waDCtKwddnE4zB+ObLUURFWp+54fzcIHZB/S4ALZR+ccScen7aX7a4RlIOhr
SwMj8D6qkf3IAE48PEH7koqRS8rfRN6WAaPgqqf7/+TgINmXDNSwFRTKlqfj
sgeVbrYOsyBERUhIZn8eZpL9zQK7icxX3JBHKKlS8/Ln4Cz4uliaKWlRjEFk
n7Kwd0O6nW9KHjJjn8OTGFmQ3dhYf1apABlkv7Iwsm1F/lTTEkz+Wv94n+5s
MGdIcxR+5ONvsu/ZwKv/OTL6sRA9tzfqmj+fDdKdn8c7rj7BSrJ/OfiYMt77
uL0cdV41Jb/fKQe6BdlDynPKMJboQQ4e57R02LmU4LuFLRL3p8+BxW6fYaVY
Ga4m+pgDpTemXmqoqMBH95jHfO7PgaRlmW7jhxDliF7mwINe0bTDxeUYyjef
xkp5iN+jWhOdUYksoh950G/qLUlWrMDFUYKFy0PMimuGnKhyTCV6mgsm8f6P
2/xrcOooq+vqqblwtn7yiAZVgTuIvubCTasyiae7KrHeXeBYBRjm3fogMV6J
xkRvCtAxruByKakGz9UNlM1+qQCHj+rIR3nU4meiP0Uodot1TFrzHJ2tuBbN
exSB8WtI4hazBouIHhWBpzd5WYv3HJXTBu+cllKCebvLlkVurMVwok8l0PBa
6hIsWoscqTdzVzxQgtyBg0k6WIsORK9KEOPn9+LS72rMODIcL7pWGTro9fIp
IfUoTvSrDNLv5VxcZWpxz9t3fyrGlOHOTK31ZVmN2Ez0rAK6KwwWRxQ1IN35
Y1D4eRW4Z7/ljndfE14m+laByaEo11MeL/FHxRhvAU0VFHs9zI4mNuJmondV
MKA5mu3e9hLR9IvLt1ZVCHBYlGsh1ICaRP9qkPLtTGafRT3GXBMISA2+KAqz
JIWa8C3xgxok7XFRjl7dgI7Tvy8KkpsHb3p3p3y5Wo+5xB/zQH76awP2+xc4
68DPB8YF8+DtxgVxHe4vsIT4RR1KlWYpV11uwvf8048bqkO+itTA2rTm//yj
Ds9tTLaqnnmFazMmG9YfUQd7g29yp++8wijiJ3VIF8n2s1Ntwvy+CJFHL9RB
Z0Bb1M+8BYeIv9RhZri/zB+5VlSQE7aVVtEAiUtHFW/GvsKVxG8aoD8zrLXm
eQseXRkdume3BiREXn3meKgZc4n/NMBkz0/tiKRmZAse/0wDuhtizyypbEZZ
4kcN+CP3zdhJphkdnsSMGEhqwpcHs8NWrWvBEOJPTRCv4STFSbXgvQ/TtGM9
NGFfRV/kC88WZBG/akKA4nKLX0eYKMG/OpSjCadKb/xKW9yKtsS/mqC07yWL
m8TEILcZVxz+asLmAxNyTjNbMY34WQs25DPPvctoxbaE+Oa01VqwOnDQSLq5
BacZC/ytBXt0VQwydVvR5vlM8Sk3tUDFeXRdhk8r+hO/a8H87pICQ18mpvw5
be85yr/eE6qZz2BiE/G/Nvwe+/q+gd6OQpZSYaWUNlwQHnKiNbUhjeSBNkSI
uX5ujGWit/+5QuUEbfBxbMheerUNL5N80IalJ5qKJW3bsS5VZuwQWxuSy951
R5e14U+SFzrwttmmUmQZE407zxt0metAU4L4YUZ3K24h+aEDX93kzsZcb8cE
ydlejEgdSJ4oLnuo2IaVJE90IOBisejPljYcF6yrRQd20s7aVcS2oy7JFx1Q
3m16MfxOO7oK6K6hC5Rxnpm7QTvGk7zRhTQdbfq94Q589vCy9LpgXZA0lXxz
WLULP5L80YWMnTVbmzI7UF1g30pdkD2pNauysh3XkzzSBSeX8W66VwceF9Bj
th40nw+NkXJvx0KST3rwevUu6p1zO77doPRsl5ce6K41W5Dh045KJK/0AO26
ZDLHOvHfeIHB9CDOZEShf2sHhpP80gN576To2OAOfFiuYqYvog8pqXLdKwo6
kEvyTB9q/7WPDtnYhXLfrvuecNIHeR+ffjWxTvyH5Js+aLjONA9U6cSDJvP4
CaUPpiETmRXnuzGT5J0+zMoq4xTYdGGvV2rPkq/6IOGg8HwotwulJgX5ZwDS
Mrnc4souhKsac24tNQA7e8bYdEYnBpM8NIBUSDjWc6kb7/DVN5loAEbqw7oM
/y7sIPloAJ+6bI36zFg4XUwgcANgRmYU1QR24gKSl4YQk3Rdim7QjbsX3614
yjCE8LV/7WUTWXiD5Kch3PgU5pvtxcLmfbq/FE8awnunsQPixSwUlhYsxBDu
ht2g6c3vRsvMDMuDnfz7g8V9J+NZuIPkqyGk9c98d66iG5PY+gEdekZQo3hk
PLCxCxtI3hqBkKphSOyTbvwtL3iAEQRo5NdGlLDQlOSvETzVnIi6HM3CrauM
OBfqjGAoVNmScurFCySPjUD5xhH5/PBurI7OVvqkYAw6ZUX3TWx6cILkszFE
SImUVgz1o36JidMaP2OIUd+0c6pzL7qRvDaG4eXcw/bT+/H0WO6ZnGJjWGgX
vXnOvh4sI/ltDCnL3mrffduNY3y3zhQ3AdNCnVhWKQs1KwV5bgJT0lnjj627
0cnjkZC/mwmIvcj5+UiThSdIvptAZF2ym111LxZdpC2oyzSBNtbS0tdXe3CE
5L0JMG95hs2t7UGVBn6c/DKB5B7PKEZaD64m+W8Kr5dq5hnfHMAIIauc446m
8EosSG0yvQ/zCA9M4VBBwOgH2z4cZBQOca+ZQtjt34nes/pQvlXAB1Pw0XIO
ozuwcblgHO9N4UKAmOisw/14mPDCDNQ3JMRXrenD7NsCw5jBgqFb3i2xPdhP
+GEGE9Yhz9ZZ9aIMa/7FP6fN4P3onbY9qT24hPDEDIq7Za+MWPfifpmnje59
ZnCRqbrV6GIfMglfzGHIvCHH+2Qv7tZSm9onbw55ulNp7X5sFN0r4I05SIu/
u14lwsYbZf38Sm0Oa30eGrzYwEZrwh9zSHOq9RsQG8BmgZ13mkNRqdb2ULkB
9CM8MgdW1JPg6fQBFP7qucn/nDmYfD/g/3XaAF4jfDIHHW37W8mZfWiZoB6S
/MQcsj3LGQsH+vAl4ZU5/F30zn/rwT7cIZDXgDnUan3P9VHux0nCL3OwfCSt
Vsi/nlR768E3MQs4lCWzLD6SjRaEZxZgs35NyOZnHGzYJgh0Cyis/q3kvJuN
XoRvFuBap6sgZs/G3781h51dLaDkaZD0tDg2JhLeWcDA5WR6twYbTZN4ojER
FuCuFx7YkDGAzwn/LOCCSuzc1XvZuJV+RzP/ngXQ3t2s8zsxgD8IDy1AqlLY
X4LBxgtN3hSv2QI6U3/79ykMoBHhowV4Jw82iL7rx2ryA8kCenqCMo+69qMH
4SUN1HIfilpc5uCEiIDYNFhqgGdcnTl4jvCTBmzG/A0mdzion5qeGLSCBq7x
x3h3T7GxgvCUBnFt91q1hTnotnBn3s29NMg+GaoT687BL4SvNNjNjIo7a8PB
0x16fGLRYMnkt7vfT7BRh/CWBkFzRTwytrCxbK/A0DTYFjq3PmYXGzcS/tLg
hMS+DB+KjWN8WpmM0CDQ1FN3mjUb4wiPaWCrkqbbeoCNmvcEL0iHVSkj1Xl+
HHxK+EyHvVZdqcePcNHJ3nDJqQV0yIkod8zX5eAHwms6xNsWutrd5+AJftqV
bKdDWkejbGMLB+cRftPhXipjsMyTi0WHsviJRYek3T8Dmtw4uI7wnA4HNMTD
YhM4OCK3O0nhMR0ywWXZAv790YTvdFjNqIiq9WajykPjgmU9dEif0XnhdjsH
Cwjv6VC7z+u8wio2riY//yxhsE1pE4uvpzeE/5bg631l1akbPIwYyvl418gS
juVWdRdq81CR9AFLSAuQ+NKhzMW8yICZ7RssgTNamzLVjIOOpB9YQkBWxUUF
Ew4OCvB11BK0A0PnerpxMYz0BUtYf3eKXrgHB+WLRh3odywh802vkd40Lj4g
/cESqlWDtG8v5OLyDQ/5CreEI6JedgF1HOSQPmEJPqJDhiJyHDwsiNNxS3ht
w/Rd1MDB2YsE/cIKHg/w1vTTeZgdZ3GtXMUK/rglebZd4eFS0jesIGBibbjq
SR72a39+MupgBbyhFM5IMQ9DSf+wAr2jKjL527koU57XprbHCmDG+vb9HA7e
J32E/3x9Qw8FiodL3Pd9WpVoBbnlZtyLwoPYQ/qJFVRfmyNkosfF/RN0/sCs
IE50WDmdzUVJB0FfsYLt/iZ3o0Y5mM5Po+zXVjB13emDDy9xkCL9xQp6Cqsu
KfP10SVYnyQDHI6tHVLK5OBe0mcYkBB786DqMA/F6w54izMYcDLk/oIsy0G8
TfoNA6glaySf+/BwEf+087cw4LXy0YQznTxsJ32HAZ6Sm4QC6FwM+DvBLxAM
8B17EHTlLg/F/hX0Hwa8ZbkdF/XhYmryk5IruQywZdoGGvL1PJ/0IQa480YN
A9S52Mqnb20HA1iNuV075Hm4i/QjBoQ+c8l05l8XabYZ//qXAYu2qQzu+szF
66QvWQN7YfSXvHIeMnb9kNHRs4b8q1Pk1z/g4SvSn6wh3rfA9dyuQfSdJgCo
Nbi6LXjClB/E/wFn9R0U
                    "]]}, {}}, {
                   {Hue[0.59, 0.7, 0.75], LineBox[CompressedData["
1:eJxTTMoPSmViYGAQB2IQPe9G59wbnW/tJQT71wiev2Dv/+aI35sj/+xlzm3Z
Ub9wv71GWZJ6WRK7g6z/uuLip0uhfH6HVR4Zj9IMF+wXsd4oDEQOd8+p3P26
cgeUL+5wbIHf8qiXB6F8aYecXwrbPO4fgfLlHU7HSTCWrj25v2suyAGKDlc+
FYt0mp+B8pUdyn/MKUxUPgflqzrIisn5Hve8sJ8BDDQcXv+98/qPyEUoX8uh
RCQyUvQljK/jsCJLddXcVzC+noNgqP8Gx5swvoFDQ2ROaXPlJSjf0CHn2Y7K
GAkY38jhD1NReKcajG/sIH3y4+xzmTC+icP7FTsOt8DNM3XYXzL3h1MTjG/m
8EO4NkJrBoxv7vBC0rXYaOPF/QCElpT+
                    "]]}, 
                   {Hue[0.59, 0.7, 0.65], AbsolutePointSize[
                    3.310344827586207], PointBox[CompressedData["
1:eJxTTMoPSmViYGAQB2IQPe9G59wbnW/tJQT71wiev2Dv/+aI35sj/+xlzm3Z
Ub9wv71GWZJ6WRK7g6z/uuLip0uhfH6HVR4Zj9IMF+wXsd4oDEQOd8+p3P26
cgeUL+5wbIHf8qiXB6F8aYecXwrbPO4fgfLlHU7HSTCWrj25v2suyAGKDlc+
FYt0mp+B8pUdyn/MKUxUPgflqzrIisn5Hve8sJ8BDDQcXv+98/qPyEUoX8uh
RCQyUvQljK/jsCJLddXcVzC+noNgqP8Gx5swvoFDQ2ROaXPlJSjf0CHn2Y7K
GAkY38jhD1NReKcajG/sIH3y4+xzmTC+icP7FTsOt8DNM3XYXzL3h1MTjG/m
8EO4NkJrBoxv7vBC0rXYaOPF/QCElpT+
                    "]]}}},
                 AspectRatio->Full,
                 Axes->None,
                 Background->GrayLevel[1],
                 
                 BaseStyle->{
                  FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                   GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                   ScriptMinSize -> 6},
                 Frame->True,
                 FrameStyle->GrayLevel[0.5],
                 FrameTicks->None,
                 GridLines->{{5., 10., 15., 20., 25., 30.}, {{-2., 
                    GrayLevel[0.3001]}, {-1., 
                    GrayLevel[0.3001]}, {0., 
                    GrayLevel[0.3001]}, {-1.6989700043360185`, 
                    GrayLevel[0.8501]}, {-1.3979400086720375`, 
                    GrayLevel[0.8501]}, {-1.2218487496163564`, 
                    GrayLevel[0.8501]}, {-1.0969100130080565`, 
                    GrayLevel[0.8501]}, {-0.6989700043360187, 
                    GrayLevel[0.8501]}, {-0.39794000867203755`, 
                    GrayLevel[0.8501]}, {-0.22184874961635626`, 
                    GrayLevel[0.8501]}, {-0.09691001300805638, 
                    GrayLevel[0.8501]}, {0.30102999566398114`, 
                    GrayLevel[0.8501]}, {0.6020599913279623, 
                    GrayLevel[0.8501]}, {0.7781512503836435, 
                    GrayLevel[0.8501]}, {0.9030899869919434, 
                    GrayLevel[0.8501]}}},
                 ImagePadding->1,
                 ImageSize->{302, 182.},
                 
                 PlotRange->{{0, 23.31055480378906}, {-1.4220000000000002`, 
                   0.8220000000000001}},
                 PlotRangeClipping->True,
                 PlotRangePadding->None,
                 Prolog->{{
                    InsetBox[
                    FormBox["5", TraditionalForm], 
                    Offset[{-2, -2}, {5., 0.8220000000000001}], {1., 1.}], 
                    InsetBox[
                    FormBox["10", TraditionalForm], 
                    Offset[{-2, -2}, {10., 0.8220000000000001}], {1., 1.}], 
                    InsetBox[
                    FormBox["15", TraditionalForm], 
                    Offset[{-2, -2}, {15., 0.8220000000000001}], {1., 1.}], 
                    InsetBox[
                    FormBox["20", TraditionalForm], 
                    Offset[{-2, -2}, {20., 0.8220000000000001}], {1., 1.}], 
                    InsetBox[
                    FormBox["25", TraditionalForm], 
                    Offset[{-2, -2}, {25., 0.8220000000000001}], {1., 1.}], 
                    InsetBox[
                    FormBox["30", TraditionalForm], 
                    Offset[{-2, -2}, {30., 0.8220000000000001}], {1., 1.}]}, {
                   
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"10", "\"-1\""}, "Superscript", SyntaxForm -> 
                    SuperscriptBox], TraditionalForm], 
                    Offset[{3, 0}, {0, -1.}], {-1, -1.}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    Offset[{3, 0}, {0, 0.}], {-1, -1.}]}}]}
              },
              
              BaseStyle->{
               FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                GrayLevel[0.4]},
              
              GridBoxAlignment->{
               "Columns" -> {{Center}}, "Rows" -> {{Center}}},
              GridBoxSpacings->{"Columns" -> {{0.5}}}],
             Alignment->Center,
             StripOnInput->False], "\[SpanFromLeft]"},
           {
            ItemBox[
             StyleBox[
              RowBox[{
               GraphicsBox[{},
                Axes->None,
                Background->Hue[0.083, 1., 1.],
                ImagePadding->{{0, 0}, {5, 2}},
                ImageSize->{13, 1}], "  ", "\<\"training set\"\>", "\t", 
               GraphicsBox[{},
                Axes->None,
                Background->Hue[0.59, 0.7, 0.75],
                ImagePadding->{{0, 0}, {5, 2}},
                ImageSize->{13, 1}], "  ", "\<\"validation set\"\>"}],
              FontFamily->"Verdana",
              FontSize->8,
              FontColor->GrayLevel[0.4]],
             Alignment->Center,
             StripOnInput->False], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          ColumnsEqual->False,
          
          GridBoxAlignment->{
           "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {False, {
               Opacity[0.15]}, False}},
          GridBoxItemSize->{"Columns" -> {8, {26}}, "Rows" -> {{1.}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], 
              Offset[1.1199999999999999`], {
               Offset[1.75]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.8]}, 
              Offset[0.2]}}],
         "Grid"],
        FrameMargins->{{10, 10}, {10, 5}},
        FrameStyle->None,
        StripOnInput->False],
       Deploy,
       DefaultBaseStyle->"Deploy"],
      Alignment->Center,
      BaseStyle->{
       FontWeight -> "Light", FontSize -> 11, FontFamily -> ".SF NS Text", 
        NumberMarks -> False, Deployed -> False},
      StripOnInput->False]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.5599999999999999]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], 
       Offset[0.8], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Background->GrayLevel[1],
  FrameMargins->{{0, 0}, {0, 0}},
  FrameStyle->GrayLevel[0.85],
  RoundingRadius->5,
  StripOnInput->False]], "Output",
 CellChangeTimes->{3.7714560441048517`*^9, 3.771520884552847*^9, 
  3.771527250353855*^9, 3.7715894224466267`*^9, 3.771683561137211*^9},
 CellLabel->
  "Out[1915]=",ExpressionUUID->"5b339ff8-842a-4101-956d-41ec9cca7364"]
}, Open  ]],

Cell["\<\
Now for the process Timothee calls surgery, cutting the part of the network \
that does the actual generation from the training apparatus. Note that the \
names of the functions mostly contain \[OpenCurlyDoubleQuote]Delete\
\[CloseCurlyDoubleQuote], \[CloseCurlyDoubleQuote]Replace\
\[CloseCurlyDoubleQuote], and \[OpenCurlyDoubleQuote]Extract.\
\[CloseCurlyDoubleQuote]\
\>", "Text",
 CellChangeTimes->{{3.771492048347574*^9, 3.7714921261011744`*^9}, {
  3.771492218577075*^9, 3.771492340120185*^9}, {3.7714923911274776`*^9, 
  3.771492392596978*^9}, {3.771492487164192*^9, 3.771492493899043*^9}, {
  3.771527270486909*^9, 
  3.771527271423684*^9}},ExpressionUUID->"f21ea08f-e19f-437e-9ed3-\
b07a0bd133ea"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainedNet2", "=", 
   RowBox[{"netTrainRes", "[", "\"\<TrainedNet\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"phoTeachNet", "=", 
   RowBox[{"NetDelete", "[", 
    RowBox[{"trainedNet2", ",", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<sylabicLoss\>\"", ",", " ", "\"\<finalLoss\>\""}], "}"}]}],
     "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"generationNet", " ", "=", " ", 
   RowBox[{"NetDelete", "[", 
    RowBox[{"trainedNet2", ",", " ", 
     RowBox[{"{", 
      RowBox[{
      "\"\<phoneticLoss\>\"", ",", "\"\<sylabicLoss\>\"", ",", " ", 
       "\"\<finalLoss\>\"", ",", " ", "\"\<toPredict\>\""}], "}"}]}], "]"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"wordEncoding", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"NetExtract", "[", 
       RowBox[{"generationNet", ",", " ", 
        RowBox[{"{", 
         RowBox[{"\"\<studentNet\>\"", ",", " ", "1"}], "}"}]}], "]"}], "}"}],
      ",", " ", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", " ", 
      RowBox[{"NetExtract", "[", 
       RowBox[{"generationNet", ",", " ", "\"\<Input\>\""}], "]"}]}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"phoneticDec", " ", "=", " ", 
   RowBox[{"NetReplacePart", "[", 
    RowBox[{
     RowBox[{"NetDelete", "[", 
      RowBox[{
       RowBox[{"NetExtract", "[", 
        RowBox[{"generationNet", ",", " ", 
         RowBox[{"{", 
          RowBox[{"\"\<studentNet\>\"", ",", " ", "\"\<phoneticDec\>\""}], 
          "}"}]}], "]"}], ",", "1"}], "]"}], ",", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", " ", 
      RowBox[{"NetExtract", "[", 
       RowBox[{"phoTeachNet", ",", "\"\<FullTargetSequence\>\""}], "]"}]}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"phoneticDec", " ", "=", " ", 
   RowBox[{"NetReplacePart", "[", 
    RowBox[{
     RowBox[{"NetRename", "[", 
      RowBox[{
       RowBox[{"NetAppend", "[", 
        RowBox[{
         RowBox[{"NetFlatten", "[", "phoneticDec", "]"}], ",", " ", 
         RowBox[{"SequenceLastLayer", "[", "]"}]}], "]"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "\[Rule]", " ", 
         RowBox[{"NetPort", "[", "\"\<PrevPhoneticChar\>\"", "]"}]}], "}"}]}],
       "]"}], ",", " ", 
     RowBox[{"\"\<Output\>\"", " ", "\[Rule]", " ", 
      RowBox[{"NetDecoder", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<Class\>\"", ",", " ", 
         RowBox[{"targetEncoder", "[", 
          RowBox[{"[", "\"\<Encoding\>\"", "]"}], "]"}]}], "}"}], "]"}]}]}], 
    "]"}]}], ";", 
  RowBox[{"phoneticDec", " ", "=", " ", 
   RowBox[{"NetReplacePart", "[", 
    RowBox[{
     RowBox[{"NetDelete", "[", 
      RowBox[{
       RowBox[{"NetExtract", "[", 
        RowBox[{"generationNet", ",", " ", 
         RowBox[{"{", 
          RowBox[{"\"\<studentNet\>\"", ",", " ", "\"\<phoneticDec\>\""}], 
          "}"}]}], "]"}], ",", "1"}], "]"}], ",", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", " ", 
      RowBox[{"NetExtract", "[", 
       RowBox[{"phoTeachNet", ",", "\"\<FullTargetSequence\>\""}], "]"}]}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"phoneticDec", " ", "=", " ", 
   RowBox[{"NetReplacePart", "[", 
    RowBox[{
     RowBox[{"NetRename", "[", 
      RowBox[{
       RowBox[{"NetAppend", "[", 
        RowBox[{
         RowBox[{"NetFlatten", "[", "phoneticDec", "]"}], ",", " ", 
         RowBox[{"SequenceLastLayer", "[", "]"}]}], "]"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "\[Rule]", " ", 
         RowBox[{"NetPort", "[", "\"\<PrevPhoneticChar\>\"", "]"}]}], "}"}]}],
       "]"}], ",", " ", 
     RowBox[{"\"\<Output\>\"", " ", "\[Rule]", " ", 
      RowBox[{"NetDecoder", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<Class\>\"", ",", " ", 
         RowBox[{"targetEncoder", "[", 
          RowBox[{"[", "\"\<Encoding\>\"", "]"}], "]"}]}], "}"}], "]"}]}]}], 
    "]"}]}], ";", 
  RowBox[{"phoneticDec", " ", "=", " ", 
   RowBox[{"NetReplacePart", "[", 
    RowBox[{
     RowBox[{"NetDelete", "[", 
      RowBox[{
       RowBox[{"NetExtract", "[", 
        RowBox[{"generationNet", ",", " ", 
         RowBox[{"{", 
          RowBox[{"\"\<studentNet\>\"", ",", " ", "\"\<phoneticDec\>\""}], 
          "}"}]}], "]"}], ",", "1"}], "]"}], ",", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", " ", 
      RowBox[{"NetExtract", "[", 
       RowBox[{"phoTeachNet", ",", "\"\<FullTargetSequence\>\""}], "]"}]}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"phoneticDec", " ", "=", " ", 
   RowBox[{"NetReplacePart", "[", 
    RowBox[{
     RowBox[{"NetRename", "[", 
      RowBox[{
       RowBox[{"NetAppend", "[", 
        RowBox[{
         RowBox[{"NetFlatten", "[", "phoneticDec", "]"}], ",", " ", 
         RowBox[{"SequenceLastLayer", "[", "]"}]}], "]"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "\[Rule]", " ", 
         RowBox[{"NetPort", "[", "\"\<PrevPhoneticChar\>\"", "]"}]}], "}"}]}],
       "]"}], ",", " ", 
     RowBox[{"\"\<Output\>\"", " ", "\[Rule]", " ", 
      RowBox[{"NetDecoder", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<Class\>\"", ",", " ", 
         RowBox[{"targetEncoder", "[", 
          RowBox[{"[", "\"\<Encoding\>\"", "]"}], "]"}]}], "}"}], "]"}]}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"syllabicDec", " ", "=", " ", 
   RowBox[{"NetExtract", "[", 
    RowBox[{"generationNet", ",", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<studentNet\>\"", ",", " ", "\"\<sylabicDec\>\""}], "}"}]}],
     "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toStrChunks", "[", 
    RowBox[{"x_Integer", ",", "y_"}], "]"}], " ", ":=", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toStrChunks", "[", 
    RowBox[{"x_List", ",", "y_"}], "]"}], " ", ":=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"Last", "[", "x", "]"}], "+", "1"}], ",", " ", "y"}], "}"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.771490726690679*^9, 3.771490815505294*^9}, {
   3.7714908752579*^9, 3.771490880306151*^9}, {3.771490935013633*^9, 
   3.7714909951047173`*^9}, 3.7714910658537407`*^9, {3.771491178838122*^9, 
   3.771491193991084*^9}},
 CellLabel->
  "In[1916]:=",ExpressionUUID->"2c31e3f3-1606-4bbf-90a6-8cdf7037e757"],

Cell["\<\
And finally the function to call the neural network along with some sample \
results. Execute the code again (shift + return or shift + enter) to see a \
different set of words.\
\>", "Text",
 CellChangeTimes->{{3.7714925230717278`*^9, 3.7714926032041283`*^9}, {
  3.7714949481763697`*^9, 
  3.7714950069283657`*^9}},ExpressionUUID->"3b2f690d-8796-4575-bdd7-\
3889a0e43f37"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"getPhonsAndSylls", "[", "word_String", "]"}], ":=", " ", 
   RowBox[{"Block", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"previousAnswer", " ", "=", " ", "\"\<>\>\""}], ",", " ", 
       RowBox[{"phonetic", " ", "=", " ", "\"\<\>\""}], ",", " ", 
       "syllabic"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"wordenc", " ", "=", " ", 
          RowBox[{"wordEncoding", "[", "word", "]"}]}], ",", "stateNet"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"decode", " ", "the", " ", "syllables"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"syllabic", " ", "=", " ", 
         RowBox[{"Flatten", "@", 
          RowBox[{"Position", "[", 
           RowBox[{
            RowBox[{"syllabicDec", "[", "wordenc", "]"}], ",", " ", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"pNonBreack_", ",", " ", "pBreack_"}], "}"}], " ", "/;",
              " ", 
             RowBox[{"pBreack", ">", "pNonBreack"}]}]}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"syllabic", " ", "=", " ", 
         RowBox[{"StringTake", "[", 
          RowBox[{"word", ",", " ", 
           RowBox[{"Rest", "@", 
            RowBox[{"FoldList", "[", 
             RowBox[{"toStrChunks", ",", " ", "1", ",", " ", "syllabic"}], 
             "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"decode", " ", "the", " ", "phonetic"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"stateNet", " ", "=", " ", 
         RowBox[{"NetStateObject", "[", 
          RowBox[{"phoneticDec", ",", " ", 
           RowBox[{"<|", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"2", ",", " ", "\"\<State\>\""}], "}"}], ":>", " ", 
             RowBox[{"Last", "@", "wordenc"}]}], "|>"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"While", "[", 
         RowBox[{
          RowBox[{"previousAnswer", " ", "=!=", " ", "\"\<<\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"previousAnswer", " ", "=", " ", 
            RowBox[{"stateNet", "[", "previousAnswer", "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"phonetic", " ", "=", " ", 
            RowBox[{"phonetic", "<>", "previousAnswer"}]}]}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"<|", 
         RowBox[{
          RowBox[{"\"\<Phonetic\>\"", " ", "\[Rule]", " ", 
           RowBox[{"StringDrop", "[", 
            RowBox[{"phonetic", ",", " ", 
             RowBox[{"-", "1"}]}], "]"}]}], ",", " ", 
          RowBox[{"\"\<Syllables\>\"", " ", "\[Rule]", " ", "syllabic"}]}], 
         "|>"}]}]}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testSample", "=", 
   RowBox[{
    RowBox[{"RandomSample", "[", 
     RowBox[{"test3", ",", "10"}], "]"}], "\[LeftDoubleBracket]", 
    RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"outputSample", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Flatten", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"#", ",", 
         RowBox[{"Values", "[", 
          RowBox[{"getPhonsAndSylls", "[", "#", "]"}], "]"}]}], "}"}], ",", 
       "1"}], "]"}], "&"}], "/@", "testSample"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"sampleDataset", "=", 
  RowBox[{"Dataset", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<input\>\"", "\[Rule]", 
         RowBox[{
         "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], ",", 
        RowBox[{"\"\<phonetic\>\"", "\[Rule]", 
         RowBox[{
         "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], ",", 
        RowBox[{"\"\<syllabic\>\"", "\[Rule]", 
         RowBox[{
         "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}]}], 
       "|>"}], "}"}], "&"}], "/@", "outputSample"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.7714573116901608`*^9, 3.771457332170472*^9}, {
   3.771491138514967*^9, 3.771491140821309*^9}, {3.771491190567881*^9, 
   3.771491209725915*^9}, {3.771491380379437*^9, 3.7714915994192753`*^9}, {
   3.771492665927416*^9, 3.771492684032712*^9}, {3.7714928021666403`*^9, 
   3.771492816176188*^9}, 3.7714949054244537`*^9, {3.771503334536285*^9, 
   3.771503339749852*^9}},
 CellLabel->
  "In[1927]:=",ExpressionUUID->"44c005f6-2c10-49f7-828a-25c733ea5cef"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 10, "Length" -> 10, "InitialType" -> TypeSystem`Vector[
          TypeSystem`Vector[
           TypeSystem`Struct[{"input", "phonetic", "syllabic"}, {
             TypeSystem`Atom[String], 
             TypeSystem`Atom[String], 
             TypeSystem`Vector[
              TypeSystem`Atom[String], TypeSystem`AnyLength]}], 1], 10], 
        "Shape" -> TypeSystem`PackageScope`HeaderShape[
          
          Association[{All, All, "input"} -> 1, {All, All, "phonetic"} -> 
           1, {All, All, "syllabic"} -> 1], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`ColumnShape[
              TypeSystem`PackageScope`RowShape[
               Association[
               "input" -> 
                TypeSystem`PackageScope`AtomShape[115.20000000000002`], 
                "phonetic" -> 
                TypeSystem`PackageScope`AtomShape[124.80000000000001`], 
                "syllabic" -> TypeSystem`PackageScope`UnknownShape]]], 1, {
             All}]], 10, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[107556285], "Type" -> 
        TypeSystem`Vector[
          TypeSystem`Vector[
           TypeSystem`Struct[{"input", "phonetic", "syllabic"}, {
             TypeSystem`Atom[String], 
             TypeSystem`Atom[String], 
             TypeSystem`Vector[
              TypeSystem`Atom[String], TypeSystem`AnyLength]}], 1], 10], 
        "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
        TypeSystem`PackageScope`CacheHandle[107556285]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"input\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"input\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1854904244][{All, All, "input"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[All, All, "input"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"phonetic\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"phonetic\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1854904244][{All, All, "phonetic"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[All, All, "phonetic"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"syllabic\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"syllabic\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1854904244][{All, All, "syllabic"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[All, All, "syllabic"]], "Mouse"], 
                Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["narcissistic", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[1, 1, 
                   Key["input"]]], "Mouse"], 
                ImageSize -> {{115.20000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["n\:02cc\:0252rs\:0259s\:02c8\:026ast\:026ak", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[1, 1, 
                   Key["phonetic"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"nar", "cis", "sis", "tic"}, ShowStringCharacters -> 
                    False], 
                    Style[
                    
                    Style[{"nar", "cis", "sis", "tic"}, ShowStringCharacters -> 
                    False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1854904244][{1, 1, 
                    Key["syllabic"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[1, 1, 
                   Key["syllabic"]]], "Mouse"]]}, {
               Pane[
                Annotation["interdict", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[2, 1, 
                   Key["input"]]], "Mouse"], 
                ImageSize -> {{115.20000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["\:02cc\:026ant\:025dd\:02c8\:026akt", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[2, 1, 
                   Key["phonetic"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"in", "ter", "dict"}, ShowStringCharacters -> 
                    False], 
                    Style[
                    
                    Style[{"in", "ter", "dict"}, ShowStringCharacters -> 
                    False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1854904244][{2, 1, 
                    Key["syllabic"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[2, 1, 
                   Key["syllabic"]]], "Mouse"]]}, {
               Pane[
                Annotation["prescience", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[3, 1, 
                   Key["input"]]], "Mouse"], 
                ImageSize -> {{115.20000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["pr\:02c8\:025bs\:0259k\:0259ns", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[3, 1, 
                   Key["phonetic"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{"pres", "ci", "ence"}, ShowStringCharacters -> 
                    False], 
                    Style[
                    
                    Style[{"pres", "ci", "ence"}, ShowStringCharacters -> 
                    False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1854904244][{3, 1, 
                    Key["syllabic"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[3, 1, 
                   Key["syllabic"]]], "Mouse"]]}, {
               Pane[
                Annotation["conception", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[4, 1, 
                   Key["input"]]], "Mouse"], 
                ImageSize -> {{115.20000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["k\:0259ns\:02c8\:025bp\:0283\:0259n", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[4, 1, 
                   Key["phonetic"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"con", "cep", "tion"}, ShowStringCharacters -> 
                    False], 
                    Style[
                    
                    Style[{"con", "cep", "tion"}, ShowStringCharacters -> 
                    False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1854904244][{4, 1, 
                    Key["syllabic"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[4, 1, 
                   Key["syllabic"]]], "Mouse"]]}, {
               Pane[
                Annotation["matrimonial", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[5, 1, 
                   Key["input"]]], "Mouse"], 
                ImageSize -> {{115.20000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "m\:02cc\[AE]t\:0259\:0261l\:02c8e\:026ad\:0259n", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[5, 1, 
                   Key["phonetic"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"mat", "ri", "mo", "ni", "al"}, 
                    ShowStringCharacters -> False], 
                    Style[
                    
                    Style[{"mat", "ri", "mo", "ni", "al"}, 
                    ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1854904244][{5, 1, 
                    Key["syllabic"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[5, 1, 
                   Key["syllabic"]]], "Mouse"]]}, {
               Pane[
                Annotation["commiserate", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[6, 1, 
                   Key["input"]]], "Mouse"], 
                ImageSize -> {{115.20000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["k\:0259m\:02c8\:026as\:025d\:0259t", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[6, 1, 
                   Key["phonetic"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"com", "mis", "e", "rate"}, ShowStringCharacters -> 
                    False], 
                    Style[
                    
                    Style[{"com", "mis", "e", "rate"}, ShowStringCharacters -> 
                    False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1854904244][{6, 1, 
                    Key["syllabic"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[6, 1, 
                   Key["syllabic"]]], "Mouse"]]}, {
               Pane[
                Annotation["micrometer", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[7, 1, 
                   Key["input"]]], "Mouse"], 
                ImageSize -> {{115.20000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["m\:02c8a\:026akr\:0259m\:02cc\:025bt\:025d", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[7, 1, 
                   Key["phonetic"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"mi", "cro", "m", "e", "ter"}, 
                    ShowStringCharacters -> False], 
                    Style[
                    
                    Style[{"mi", "cro", "m", "e", "ter"}, 
                    ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1854904244][{7, 1, 
                    Key["syllabic"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[7, 1, 
                   Key["syllabic"]]], "Mouse"]]}, {
               Pane[
                Annotation["exterior", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[8, 1, 
                   Key["input"]]], "Mouse"], 
                ImageSize -> {{115.20000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["\:026akst\:02c8\:026ari\:025d", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[8, 1, 
                   Key["phonetic"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"ex", "te", "ri", "or"}, ShowStringCharacters -> 
                    False], 
                    Style[
                    
                    Style[{"ex", "te", "ri", "or"}, ShowStringCharacters -> 
                    False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1854904244][{8, 1, 
                    Key["syllabic"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[8, 1, 
                   Key["syllabic"]]], "Mouse"]]}, {
               Pane[
                Annotation["unbolt", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[9, 1, 
                   Key["input"]]], "Mouse"], 
                ImageSize -> {{115.20000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["\:0259nb\:02c8\:0252lt", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[9, 1, 
                   Key["phonetic"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{"un", "bolt"}, ShowStringCharacters -> False], 
                    Style[
                    Style[{"un", "bolt"}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1854904244][{9, 1, 
                    Key["syllabic"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[9, 1, 
                   Key["syllabic"]]], "Mouse"]]}, {
               Pane[
                Annotation["scuba", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[10, 1, 
                   Key["input"]]], "Mouse"], 
                ImageSize -> {{115.20000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["sk\:02c8\:028cb\:0259", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[10, 1, 
                   Key["phonetic"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{"scu", "ba"}, ShowStringCharacters -> False], 
                    Style[
                    Style[{"scu", "ba"}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1854904244][{10, 1, 
                    Key["syllabic"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
                  GeneralUtilities`Slice[10, 1, 
                   Key["syllabic"]]], "Mouse"]]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1854904244][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1854904244]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1854904244][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {379., {142.134033203125, 147.865966796875}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellChangeTimes->{3.7714928180862827`*^9, 3.771494913353572*^9, 
  3.7715033511752367`*^9, 3.7715208849445343`*^9, 3.771527323310131*^9, 
  3.7715894451539993`*^9, 3.7716835615312843`*^9},
 CellLabel->
  "Out[1930]=",ExpressionUUID->"66717f35-9845-4471-9b21-b7c134f88559"]
}, Open  ]],

Cell["\<\
The error rate of this neural network is about 9.9% on the phonetic output \
and 4.1% on the syllabic. The phonetic error is somewhat high, but as this is \
a backup for words without the \[OpenCurlyDoubleQuote]PhoneticForm\
\[CloseCurlyDoubleQuote] property in WordData, the errors will impact the \
performance of the analysis only rarely. Improvements may be achieved by \
training the neural net with a larger set of data or tweaking its parameters.
\
\>", "Text",
 CellChangeTimes->{{3.771500945186429*^9, 3.7715010797254963`*^9}, {
   3.771501113439124*^9, 3.771501201353162*^9}, {3.771501237353696*^9, 
   3.771501323222722*^9}, {3.771504950404407*^9, 3.7715050528906097`*^9}, {
   3.77152751400388*^9, 3.7715275157526217`*^9}, 
   3.771602736395822*^9},ExpressionUUID->"0d491e6f-72f0-4cbd-a5e6-\
3f14b0c7e5ce"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Analysis of Meter", "Subtitle",
 CellChangeTimes->{{3.771185120553685*^9, 
  3.7711851399929*^9}},ExpressionUUID->"4f64d6f2-f37c-4075-8a4c-8f9ffcd9db3e"],

Cell["\<\
The first stanza of Edgar Allan Poe' s \"The Raven\" will serve as our \
example for analyses. This was copied from a website, \
www.poetryfoundation.org/poems/48860/the-raven. I changed only the appearance \
of new-lines from literal breaks to \[OpenCurlyDoubleQuote]\\n\
\[CloseCurlyDoubleQuote]. Punctuation, capitalization, and quotation marks \
will all be processed by the analyzing code. \
\>", "Text",
 CellChangeTimes->{{3.77106933004078*^9, 3.7710693394336853`*^9}, {
  3.771185156673585*^9, 3.771185206854855*^9}, {3.771185334808648*^9, 
  3.771185365992243*^9}, {3.7711854227334013`*^9, 3.771185498392941*^9}, {
  3.771185549899508*^9, 3.7711856012460337`*^9}, {3.7711856369139137`*^9, 
  3.7711856712628307`*^9}, {3.771444835720673*^9, 3.771444836279358*^9}, {
  3.771501479156107*^9, 3.7715014962338257`*^9}, {3.771501834711898*^9, 
  3.771501885170491*^9}, {3.771502088895801*^9, 3.771502198731276*^9}, {
  3.771502233706407*^9, 3.771502338249778*^9}, {3.771506946887787*^9, 
  3.77150696076836*^9}},ExpressionUUID->"12829ae6-6d68-4d80-9212-\
f751b788ff99"],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "stanza", "=", 
   "\"\<Once upon a midnight dreary, while I pondered, weak and weary,\\nOver \
many a quaint and curious volume of forgotten lore\[LongDash]\\nWhile I \
nodded, nearly napping, suddenly there came a tapping,\\nAs of some one \
gently rapping, rapping at my chamber door.\\n\[OpenCurlyDoubleQuote]\
\[CloseCurlyQuote]Tis some visitor,\[CloseCurlyDoubleQuote] I muttered, \
\[OpenCurlyDoubleQuote]tapping at my chamber door\[LongDash]\\nOnly this and \
nothing more.\[CloseCurlyDoubleQuote]\>\""}], ";"}]], "Input",
 CellLabel->
  "In[1931]:=",ExpressionUUID->"7a709bb4-44c1-4d6d-89e3-10e6e4f13839"],

Cell["\<\
We extract the meter, phonetic representation, and syllabification for each \
word of the poem. The first ten are shown here. Some subtleties include \
identification of one-syllable stop words, which are marked as stressed in \
WordData but often not stressed in context, and a cross-check between the \
meter and syllables to make sure they agree.\
\>", "Text",
 CellChangeTimes->{{3.771502497587448*^9, 3.771502572856125*^9}, {
  3.7715026621204844`*^9, 3.7715027047491837`*^9}, {3.771502845253927*^9, 
  3.771502889742609*^9}, {3.7715031683449507`*^9, 3.771503188485375*^9}, {
  3.771506731619165*^9, 
  3.771506879623919*^9}},ExpressionUUID->"d1120b01-22ea-4dc0-a37d-\
5907d7442b50"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"ipaVowels", "=", 
     RowBox[{"{", 
      RowBox[{
      "\"\<a\:026a\>\"", ",", "\"\<a\:028a\>\"", ",", "\"\<e\:026a\>\"", ",", 
       "\"\<\:0254\:026a\>\"", ",", "\"\<o\:028a\>\"", ",", "\"\<\:0250\>\"", 
       ",", "\"\<\:0251\>\"", ",", "\"\<\:0252\>\"", ",", "\"\<\:0254\>\"", 
       ",", "\"\<\:0258\>\"", ",", "\"\<\:0259\>\"", ",", "\"\<\:025b\>\"", 
       ",", "\"\<\:025c\>\"", ",", "\"\<\:025d\>\"", ",", "\"\<\:025e\>\"", 
       ",", "\"\<\:0264\>\"", ",", "\"\<\:0268\>\"", ",", "\"\<\:026a\>\"", 
       ",", "\"\<\:026f\>\"", ",", "\"\<\:0275\>\"", ",", "\"\<\:0276\>\"", 
       ",", "\"\<\:0289\>\"", ",", "\"\<\:028a\>\"", ",", "\"\<\:028c\>\"", 
       ",", "\"\<\:028f\>\"", ",", "\"\<a\>\"", ",", "\"\<\[AE]\>\"", ",", 
       "\"\<e\>\"", ",", "\"\<i\>\"", ",", "\"\<o\>\"", ",", "\"\<\[OE]\>\"", 
       ",", "\"\<\[OSlash]\>\"", ",", "\"\<u\>\"", ",", "\"\<y\>\""}], 
      "}"}]}], ";", 
    RowBox[{"oneSylStops", "=", 
     RowBox[{"Select", "[", 
      RowBox[{
       RowBox[{"DeleteMissing", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"WordData", "[", 
           RowBox[{"#", ",", "\"\<PhoneticForm\>\""}], "]"}], "&"}], "/@", 
         RowBox[{"WordData", "[", 
          RowBox[{"All", ",", "\"\<Stopwords\>\""}], "]"}]}], "]"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"StringCount", "[", 
          RowBox[{"#", ",", "ipaVowels"}], "]"}], "<", "2"}], "&"}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getPhoneticForm", "[", "word_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "phoneticForm", "}"}], ",", 
       RowBox[{
        RowBox[{"WordData", "[", 
         RowBox[{
          RowBox[{"ToLowerCase", "[", "word", "]"}], ",", 
          "\"\<PhoneticForm\>\""}], "]"}], "/.", 
        RowBox[{"_Missing", "\[Rule]", 
         RowBox[{
          RowBox[{"getPhonsAndSylls", "[", "word", "]"}], "[", 
          "\"\<Phonetic\>\"", "]"}]}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getMeter", "[", "phon_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "ipaSylCt", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"oneSylStops", ",", "phon"}], "]"}], ",", 
          RowBox[{"Return", "[", 
           RowBox[{"{", ".5", "}"}], "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"ipaSylCt", "=", 
         RowBox[{"StringCount", "[", 
          RowBox[{"phon", ",", "ipaVowels"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"ipaSylCt", "\[Equal]", "1"}], ",", 
          RowBox[{"{", "1", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"vowelSounds", "=", 
            RowBox[{"StringCases", "[", 
             RowBox[{"phon", ",", 
              RowBox[{
               RowBox[{"\"\<\:02c8\>\"", "|", 
                RowBox[{"\"\<\:02cc\>\"", "..."}]}], "~~", "ipaVowels"}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "/.", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"a_", "/;", 
                  RowBox[{"StringContainsQ", "[", 
                   RowBox[{"a", ",", "\"\<\:02c8\>\""}], "]"}]}], "\[Rule]", 
                 "1"}], ",", 
                RowBox[{
                 RowBox[{"a_", "/;", 
                  RowBox[{"StringContainsQ", "[", 
                   RowBox[{"a", ",", "\"\<\:02cc\>\""}], "]"}]}], "\[Rule]", 
                 ".5"}], ",", 
                RowBox[{"_", "\[Rule]", "0"}]}], "}"}]}], "&"}], "/@", 
            "vowelSounds"}]}]}], "]"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getSyllables", "[", "word_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"syllables", ",", "phonCheck", ",", "part1", ",", "part2"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"phonCheck", "=", 
         RowBox[{"StringCount", "[", 
          RowBox[{
           RowBox[{"getPhoneticForm", "[", "word", "]"}], ",", "ipaVowels"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"phonCheck", "\[LessEqual]", "1"}], ",", 
          RowBox[{"Return", "[", 
           RowBox[{"{", "word", "}"}], "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"syllables", "=", 
         RowBox[{
          RowBox[{"WordData", "[", 
           RowBox[{
            RowBox[{"ToLowerCase", "[", "word", "]"}], ",", 
            "\"\<Hyphenation\>\""}], "]"}], "/.", 
          RowBox[{"_Missing", "\[Rule]", 
           RowBox[{
            RowBox[{"getPhonsAndSylls", "[", 
             RowBox[{"ToLowerCase", "[", "word", "]"}], "]"}], "[", 
            "\"\<Syllables\>\"", "]"}]}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "syllables", "]"}], "\[Equal]", "1"}], "&&", 
           RowBox[{"phonCheck", "\[Equal]", "2"}]}], ",", 
          RowBox[{
           RowBox[{"vowels", "=", 
            RowBox[{"{", 
             RowBox[{
             "\"\<a\>\"", ",", "\"\<e\>\"", ",", "\"\<i\>\"", ",", 
              "\"\<o\>\"", ",", "\"\<u\>\""}], "}"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"part1", "=", 
            RowBox[{
             RowBox[{"StringCases", "[", 
              RowBox[{"\"\<over\>\"", ",", 
               RowBox[{"StartOfString", "~~", 
                RowBox[{
                 RowBox[{"Except", "[", "vowels", "]"}], "..."}], "~~", 
                RowBox[{"vowels", ".."}]}]}], "]"}], "\[LeftDoubleBracket]", 
             "1", "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"part2", "=", 
            RowBox[{"StringDelete", "[", 
             RowBox[{"\"\<over\>\"", ",", 
              RowBox[{"StartOfString", "~~", 
               RowBox[{
                RowBox[{"Except", "[", "vowels", "]"}], "..."}], "~~", 
               RowBox[{"vowels", ".."}]}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Return", "[", 
            RowBox[{"{", 
             RowBox[{"part1", ",", "part2"}], "}"}], "]"}]}], ",", 
          RowBox[{"Return", "[", "syllables", "]"}]}], "]"}]}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getWordInfo", "[", "word_", "]"}], ":=", 
     RowBox[{"Module", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"phon", "=", 
         RowBox[{"getPhoneticForm", "[", 
          RowBox[{"ToLowerCase", "[", "word", "]"}], "]"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"word", ",", 
         RowBox[{"getMeter", "[", "phon", "]"}], ",", 
         RowBox[{"getSyllables", "[", "word", "]"}], ",", "phon"}], "}"}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"first10words", "=", 
     RowBox[{"Take", "[", 
      RowBox[{
       RowBox[{"TextWords", "[", 
        RowBox[{"ToLowerCase", "[", "stanza", "]"}], "]"}], ",", "10"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"first10info", "=", 
     RowBox[{
      RowBox[{
       RowBox[{"getWordInfo", "[", "#", "]"}], "&"}], "/@", 
      "first10words"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"first10assoc", "=", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"<|", 
        RowBox[{
         RowBox[{"\"\<word\>\"", "\[Rule]", 
          RowBox[{
          "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], ",", 
         
         RowBox[{"\"\<meter\>\"", "\[Rule]", 
          RowBox[{
          "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], ",", 
         
         RowBox[{"\"\<syllables\>\"", "\[Rule]", 
          RowBox[{
          "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], ",", 
         
         RowBox[{"\"\<phonetics\>\"", "\[Rule]", 
          RowBox[{
          "#", "\[LeftDoubleBracket]", "4", "\[RightDoubleBracket]"}]}]}], 
        "|>"}], "&"}], "/@", "first10info"}], "//", 
     "Dataset"}]}]}]}]], "Input",
 CellChangeTimes->{{3.771185694693121*^9, 3.771185713632701*^9}, {
   3.771185890795471*^9, 3.7711859115337667`*^9}, 3.7711859925999117`*^9, {
   3.771186157814843*^9, 3.771186160419715*^9}, {3.771186548462009*^9, 
   3.771186691709321*^9}, {3.7711867428466578`*^9, 3.771186784320266*^9}, {
   3.771186946705101*^9, 3.771187102301517*^9}, {3.771187135429524*^9, 
   3.771187318360998*^9}, {3.771187357418638*^9, 3.7711874367281027`*^9}, {
   3.771187554354282*^9, 3.771187604671213*^9}, {3.77118764111569*^9, 
   3.7711876872143707`*^9}, {3.7711877865331497`*^9, 3.771187808921842*^9}, {
   3.7711878677510967`*^9, 3.771187873100072*^9}, {3.7711879262404547`*^9, 
   3.771187998131921*^9}, {3.7711880333147173`*^9, 3.771188079517694*^9}, {
   3.7711882086039267`*^9, 3.771188253370154*^9}, {3.7711882948694553`*^9, 
   3.771188311641419*^9}, 3.771188415618722*^9, {3.771188689074554*^9, 
   3.771188690005045*^9}, {3.771189129643529*^9, 3.7711891299811287`*^9}, {
   3.771189377754196*^9, 3.771189424458116*^9}, {3.771189487847332*^9, 
   3.771189550698307*^9}, {3.771189769979672*^9, 3.771189792199519*^9}, {
   3.771189823718176*^9, 3.771189984390958*^9}, {3.77119014460067*^9, 
   3.771190149779543*^9}, {3.771190255187079*^9, 3.771190255846919*^9}, {
   3.7711903857795486`*^9, 3.771190426425158*^9}, {3.771190476460668*^9, 
   3.7711904771925287`*^9}, {3.771190563601142*^9, 3.7711906680194387`*^9}, {
   3.771190911990481*^9, 3.771190936404627*^9}, {3.771190979688406*^9, 
   3.771191078922579*^9}, 3.7711911287988443`*^9, {3.771191233542272*^9, 
   3.7711912435619593`*^9}, 3.7711913789048634`*^9, 3.771191565930872*^9, {
   3.771193306675943*^9, 3.771193308995788*^9}, {3.771193349555627*^9, 
   3.771193350430949*^9}, {3.771194648522677*^9, 3.771194663788726*^9}, {
   3.7713182259320717`*^9, 3.771318240642811*^9}, {3.77131841903797*^9, 
   3.771318419506462*^9}, {3.771322954404315*^9, 3.771322958448719*^9}, {
   3.771323122751717*^9, 3.7713232074335413`*^9}, {3.771323239800823*^9, 
   3.771323319333755*^9}, {3.7713233642917423`*^9, 3.771323381650586*^9}, {
   3.77132342943892*^9, 3.771323461156563*^9}, {3.771323498496585*^9, 
   3.771323501537025*^9}, 3.771323543898184*^9, {3.771323650054294*^9, 
   3.77132368383875*^9}, {3.771323727327896*^9, 3.771323742759102*^9}, {
   3.7713237849255323`*^9, 3.7713238434195337`*^9}, {3.771323893492264*^9, 
   3.771323911335661*^9}, {3.7713240049667387`*^9, 3.771324053484023*^9}, {
   3.7713244023714523`*^9, 3.7713244064895973`*^9}, {3.771325516956134*^9, 
   3.771325528316434*^9}, {3.771325763912653*^9, 3.771325767879615*^9}, {
   3.771326155191991*^9, 3.771326186437199*^9}, {3.771326384152261*^9, 
   3.771326411606409*^9}, {3.771326510832903*^9, 3.771326527248178*^9}, {
   3.7713267023266068`*^9, 3.771326705208249*^9}, 3.771327009251503*^9, 
   3.771327127207979*^9, {3.771327157216688*^9, 3.7713271602465563`*^9}, {
   3.771327496980236*^9, 3.771327627455076*^9}, 3.771327739073839*^9, {
   3.771327799413664*^9, 3.7713278161594276`*^9}, {3.77132791770219*^9, 
   3.7713279317903147`*^9}, {3.7713279621511583`*^9, 3.7713279923217*^9}, {
   3.771328210628913*^9, 3.7713282444985237`*^9}, {3.771328299978058*^9, 
   3.77132833690749*^9}, 3.7713283698287563`*^9, {3.771328727989664*^9, 
   3.771328739076418*^9}, {3.7713287694692593`*^9, 3.771328779577602*^9}, {
   3.7714436779595013`*^9, 3.771443704640963*^9}, {3.7714518448175697`*^9, 
   3.771451899140881*^9}, 3.7715017977296267`*^9, {3.771502603463284*^9, 
   3.771502625904662*^9}, 3.771502975978018*^9, 3.7715030412590637`*^9, {
   3.771503130200224*^9, 3.771503135890189*^9}, {3.771503396915264*^9, 
   3.7715034131849737`*^9}, {3.771503535823427*^9, 3.7715035408854923`*^9}, 
   3.771503599055436*^9, {3.7715038479851027`*^9, 3.771503852767487*^9}, {
   3.771503898790228*^9, 3.7715039007896433`*^9}, 3.7715044591289473`*^9, {
   3.7715047225935307`*^9, 3.7715047267058353`*^9}, {3.771505167877616*^9, 
   3.771505237426676*^9}, {3.7715055342037153`*^9, 3.771505567448554*^9}, {
   3.7715056005058126`*^9, 3.771505607542202*^9}, {3.771505638705493*^9, 
   3.771505687442936*^9}, {3.7715057238144817`*^9, 3.77150572552619*^9}, {
   3.771505865313346*^9, 3.771505961460596*^9}, {3.771506027891205*^9, 
   3.77150613569166*^9}, {3.7715061691780043`*^9, 3.771506200632807*^9}, {
   3.7715063215511*^9, 3.7715064756675*^9}, {3.771506517664884*^9, 
   3.771506644946662*^9}, {3.771509629304487*^9, 3.7715096411544123`*^9}, {
   3.7716831103897943`*^9, 3.771683134876876*^9}},
 CellLabel->
  "In[1932]:=",ExpressionUUID->"8ecc9cd2-04f0-492e-8d63-ca5afe6d0590"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 10, "Length" -> 10, "InitialType" -> TypeSystem`Vector[
          TypeSystem`Struct[{"word", "meter", "syllables", "phonetics"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Vector[
             TypeSystem`Atom[Real], TypeSystem`AnyLength], 
            TypeSystem`Vector[
             TypeSystem`Atom[String], TypeSystem`AnyLength], 
            TypeSystem`Atom[String]}], 10], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          
          Association[{All, "word"} -> 1, {All, "meter"} -> 
           1, {All, "syllables"} -> 1, {All, "phonetics"} -> 1], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association[
             "word" -> TypeSystem`PackageScope`AtomShape[76.80000000000001], 
              "meter" -> TypeSystem`PackageScope`UnknownShape, "syllables" -> 
              TypeSystem`PackageScope`UnknownShape, "phonetics" -> 
              TypeSystem`PackageScope`AtomShape[67.20000000000002]]]], 
           10, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[706875181], "Type" -> 
        TypeSystem`Vector[
          TypeSystem`Struct[{"word", "meter", "syllables", "phonetics"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Vector[
             TypeSystem`Atom[Real], TypeSystem`AnyLength], 
            TypeSystem`Vector[
             TypeSystem`Atom[String], TypeSystem`AnyLength], 
            TypeSystem`Atom[String]}], 10], "HandleQ" -> True, "RowTarget" -> 
        20, "Data" -> TypeSystem`PackageScope`CacheHandle[706875181]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"word\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"word\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1803374123][{All, "word"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[All, "word"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"meter\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"meter\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1803374123][{All, "meter"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[All, "meter"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"syllables\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"syllables\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1803374123][{All, "syllables"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[All, "syllables"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"phonetics\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"phonetics\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1803374123][{All, "phonetics"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[All, "phonetics"]], "Mouse"], 
                Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["once", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[1, 
                   Key["word"]]], "Mouse"], 
                ImageSize -> {{76.80000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{0.5}, ShowStringCharacters -> False], 
                    Style[
                    Style[{0.5}, ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1803374123][{1, 
                    Key["meter"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[1, 
                   Key["meter"]]], "Mouse"]], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{"once"}, ShowStringCharacters -> False], 
                    Style[
                    Style[{"once"}, ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1803374123][{1, 
                    Key["syllables"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[1, 
                   Key["syllables"]]], "Mouse"]], 
               Pane[
                Annotation["w\:02c8\:028cns", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[1, 
                   Key["phonetics"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["upon", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[2, 
                   Key["word"]]], "Mouse"], 
                ImageSize -> {{76.80000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{0, 1}, ShowStringCharacters -> False], 
                    Style[
                    Style[{0, 1}, ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1803374123][{2, 
                    Key["meter"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[2, 
                   Key["meter"]]], "Mouse"]], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{"up", "on"}, ShowStringCharacters -> False], 
                    Style[
                    Style[{"up", "on"}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1803374123][{2, 
                    Key["syllables"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[2, 
                   Key["syllables"]]], "Mouse"]], 
               Pane[
                Annotation["\:0259p\:02c8\:0252n", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[2, 
                   Key["phonetics"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["a", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[3, 
                   Key["word"]]], "Mouse"], 
                ImageSize -> {{76.80000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{0.5}, ShowStringCharacters -> False], 
                    Style[
                    Style[{0.5}, ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1803374123][{3, 
                    Key["meter"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[3, 
                   Key["meter"]]], "Mouse"]], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{"a"}, ShowStringCharacters -> False], 
                    Style[
                    Style[{"a"}, ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1803374123][{3, 
                    Key["syllables"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[3, 
                   Key["syllables"]]], "Mouse"]], 
               Pane[
                Annotation["\:0259", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[3, 
                   Key["phonetics"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["midnight", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[4, 
                   Key["word"]]], "Mouse"], 
                ImageSize -> {{76.80000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{1, 0.5}, ShowStringCharacters -> False], 
                    Style[
                    Style[{1, 0.5}, ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1803374123][{4, 
                    Key["meter"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[4, 
                   Key["meter"]]], "Mouse"]], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{"mid", "night"}, ShowStringCharacters -> False], 
                    Style[
                    Style[{"mid", "night"}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1803374123][{4, 
                    Key["syllables"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[4, 
                   Key["syllables"]]], "Mouse"]], 
               Pane[
                Annotation["m\:02c8\:026adn\:02cca\:026at", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[4, 
                   Key["phonetics"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["dreary", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[5, 
                   Key["word"]]], "Mouse"], 
                ImageSize -> {{76.80000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{1, 0}, ShowStringCharacters -> False], 
                    Style[
                    Style[{1, 0}, ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1803374123][{5, 
                    Key["meter"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[5, 
                   Key["meter"]]], "Mouse"]], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{"drear", "y"}, ShowStringCharacters -> False], 
                    Style[
                    Style[{"drear", "y"}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1803374123][{5, 
                    Key["syllables"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[5, 
                   Key["syllables"]]], "Mouse"]], 
               Pane[
                Annotation["dr\:02c8\:026ari", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[5, 
                   Key["phonetics"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["while", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[6, 
                   Key["word"]]], "Mouse"], 
                ImageSize -> {{76.80000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{0.5}, ShowStringCharacters -> False], 
                    Style[
                    Style[{0.5}, ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1803374123][{6, 
                    Key["meter"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[6, 
                   Key["meter"]]], "Mouse"]], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{"while"}, ShowStringCharacters -> False], 
                    Style[
                    Style[{"while"}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1803374123][{6, 
                    Key["syllables"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[6, 
                   Key["syllables"]]], "Mouse"]], 
               Pane[
                Annotation["w\:02c8a\:026al", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[6, 
                   Key["phonetics"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["i", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[7, 
                   Key["word"]]], "Mouse"], 
                ImageSize -> {{76.80000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{0.5}, ShowStringCharacters -> False], 
                    Style[
                    Style[{0.5}, ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1803374123][{7, 
                    Key["meter"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[7, 
                   Key["meter"]]], "Mouse"]], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{"i"}, ShowStringCharacters -> False], 
                    Style[
                    Style[{"i"}, ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1803374123][{7, 
                    Key["syllables"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[7, 
                   Key["syllables"]]], "Mouse"]], 
               Pane[
                Annotation["\:02c8a\:026a", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[7, 
                   Key["phonetics"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["pondered", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[8, 
                   Key["word"]]], "Mouse"], 
                ImageSize -> {{76.80000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{1, 0}, ShowStringCharacters -> False], 
                    Style[
                    Style[{1, 0}, ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1803374123][{8, 
                    Key["meter"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[8, 
                   Key["meter"]]], "Mouse"]], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{"pon", "dered"}, ShowStringCharacters -> False], 
                    Style[
                    Style[{"pon", "dered"}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1803374123][{8, 
                    Key["syllables"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[8, 
                   Key["syllables"]]], "Mouse"]], 
               Pane[
                Annotation["p\:02c8\:0252nd\:025dd", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[8, 
                   Key["phonetics"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["weak", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[9, 
                   Key["word"]]], "Mouse"], 
                ImageSize -> {{76.80000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{1}, ShowStringCharacters -> False], 
                    Style[
                    Style[{1}, ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1803374123][{9, 
                    Key["meter"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[9, 
                   Key["meter"]]], "Mouse"]], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{"weak"}, ShowStringCharacters -> False], 
                    Style[
                    Style[{"weak"}, ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1803374123][{9, 
                    Key["syllables"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[9, 
                   Key["syllables"]]], "Mouse"]], 
               Pane[
                Annotation["w\:02c8ik", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[9, 
                   Key["phonetics"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["and", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[10, 
                   Key["word"]]], "Mouse"], 
                ImageSize -> {{76.80000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{0.5}, ShowStringCharacters -> False], 
                    Style[
                    Style[{0.5}, ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1803374123][{10, 
                    Key["meter"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[10, 
                   Key["meter"]]], "Mouse"]], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{"and"}, ShowStringCharacters -> False], 
                    Style[
                    Style[{"and"}, ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1803374123][{10, 
                    Key["syllables"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[10, 
                   Key["syllables"]]], "Mouse"]], 
               Pane[
                Annotation["\:02c8\[AE]nd", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
                  GeneralUtilities`Slice[10, 
                   Key["phonetics"]]], "Mouse"], 
                ImageSize -> {{67.20000000000002, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1803374123][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1803374123]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1803374123][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {297., {142.134033203125, 147.865966796875}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellChangeTimes->{{3.7715051911857357`*^9, 3.771505210900073*^9}, 
   3.771505242463126*^9, 3.771505557127987*^9, {3.771505675821527*^9, 
   3.771505689213029*^9}, 3.7715057274130774`*^9, {3.7715059765510817`*^9, 
   3.7715059852912483`*^9}, 3.771506119422347*^9, {3.771506178677252*^9, 
   3.771506203654125*^9}, {3.771506623572523*^9, 3.7715066466969957`*^9}, 
   3.77150964388293*^9, 3.771520885432354*^9, 3.771527577487504*^9, 
   3.771589461133762*^9, 3.771683561917756*^9},
 CellLabel->
  "Out[1939]=",ExpressionUUID->"d5820f7d-ccf9-496b-8ae0-c168ec4ae917"]
}, {2}]],

Cell["\<\
We have labeled each syllable that is definitely stressed with a 1, and each \
that is definitely unstressed with a zero. Ambiguous syllables we have marked \
with .5. Stress patterns are binary, so we must resolve the .5 syllables to \
either 1 or 0. We use a two-tier approach for this. First we apply a series \
of six replacement rules because English prefers not to run three stressed or \
three unstressed syllables consecutively. After that, I apply the \
SequencePredict function to find which of the possible remaining patterns \
best matches known poetic forms (the duple meter and triple meter mentioned \
at the beginning). No ambiguous syllable stresses remain after that step.\
\>", "Text",
 CellChangeTimes->{{3.771507334794261*^9, 3.771507810539427*^9}, {
  3.771507867770396*^9, 3.771507897366603*^9}, {3.771507933695381*^9, 
  3.771507955174955*^9}, {3.771602889482275*^9, 
  3.771602889740096*^9}},ExpressionUUID->"ec84d9db-6a1f-4d6a-921d-\
ee5156d21a46"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"iambic", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Flatten", "[", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}], ",", "n"}], "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "1", ",", "12"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"trochaic", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"RotateLeft", "[", "#", "]"}], "&"}], "/@", "iambic"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"anapestic", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Flatten", "[", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", "n"}], "]"}], "]"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "1", ",", "12"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dactylic", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"RotateRight", "[", "#", "]"}], "&"}], "/@", "anapestic"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allPatterns", "=", 
   RowBox[{"Join", "[", 
    RowBox[{"iambic", ",", "trochaic", ",", "anapestic", ",", "dactylic"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"analyzeMeter", "[", "stanza_", "]"}], ":=", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"lines", "=", 
      RowBox[{"StringSplit", "[", 
       RowBox[{"stanza", ",", "EndOfLine"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"words", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"TextWords", "[", "#", "]"}], "&"}], "/@", "lines"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"wordInfo", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"getWordInfo", "[", "#", "]"}], "&"}], ",", "words", ",", 
        RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"meter1", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"Flatten", "[", "#", "]"}], "&"}], "/@", 
       RowBox[{"wordInfo", "\[LeftDoubleBracket]", 
        RowBox[{"All", ",", "All", ",", "2"}], "\[RightDoubleBracket]"}]}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"meter2", "=", 
      RowBox[{"meter1", "//.", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a___", ",", "1", ",", "1", ",", "1", ",", "b___"}], "}"}],
           "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"a", ",", "1", ",", "0", ",", "1", ",", "b"}], "}"}]}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a___", ",", "1", ",", "1", ",", ".5", ",", "b___"}], 
           "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"a", ",", "1", ",", "1", ",", "0", ",", "b"}], "}"}]}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a___", ",", ".5", ",", "1", ",", "1", ",", "b___"}], 
           "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"a", ",", "0", ",", "1", ",", "1", ",", "b"}], "}"}]}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a___", ",", "0", ",", "0", ",", "0", ",", "b___"}], "}"}],
           "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"a", ",", "0", ",", "1", ",", "0", ",", "b"}], "}"}]}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a___", ",", "0", ",", "0", ",", ".5", ",", "b___"}], 
           "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"a", ",", "0", ",", "0", ",", "1", ",", "b"}], "}"}]}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a___", ",", ".5", ",", "0", ",", "0", ",", "b___"}], 
           "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"a", ",", "1", ",", "0", ",", "0", ",", "b"}], "}"}]}]}], 
        "}"}]}]}], " ", ";", "\[IndentingNewLine]", 
     RowBox[{"midCts", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"Count", "[", 
         RowBox[{"#", ",", ".5", ",", "2"}], "]"}], "&"}], "/@", "meter2"}]}],
      ";", "\[IndentingNewLine]", 
     RowBox[{"zero1s", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"Tuples", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}], ",", "#"}], "]"}], "&"}], "/@", 
       "midCts"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"midPos", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"Flatten", "[", 
         RowBox[{"Position", "[", 
          RowBox[{"#", ",", ".5"}], "]"}], "]"}], "&"}], "/@", "meter2"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"prelim", "=", 
      RowBox[{"MapIndexed", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"midPos", "\[LeftDoubleBracket]", 
            RowBox[{
            "#2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
            "\[RightDoubleBracket]"}], ",", "#1"}], "}"}], "&"}], ",", 
        "zero1s", ",", 
        RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"repRules", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Rule", "@@@", 
           RowBox[{"Partition", "[", 
            RowBox[{
             RowBox[{"Riffle", "@@", "#"}], ",", "2"}], "]"}]}], "&"}], ")"}],
         ",", "prelim", ",", 
        RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"replaced", "=", 
      RowBox[{"MapIndexed", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ReplacePart", "[", 
          RowBox[{
           RowBox[{"meter2", "\[LeftDoubleBracket]", 
            RowBox[{
            "#2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
            "\[RightDoubleBracket]"}], ",", "#1"}], "]"}], "&"}], ",", 
        "repRules", ",", 
        RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"seqPredict", "=", 
      RowBox[{"SequencePredict", "[", "allPatterns", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"result", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"seqPredict", "[", 
         RowBox[{"#", ",", "\"\<SequenceProbability\>\""}], "]"}], "&"}], "/@",
        "replaced"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"resultPos", "=", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Position", "[", 
          RowBox[{"#", ",", 
           RowBox[{"Max", "[", "#", "]"}]}], "]"}], "\[LeftDoubleBracket]", 
         RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], "&"}], "/@", 
       "result"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"meter3", "=", 
      RowBox[{"MapIndexed", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"replaced", "\[LeftDoubleBracket]", 
           RowBox[{"#2", ",", "#1"}], "\[RightDoubleBracket]"}], 
          "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "&"}], ",", 
        "resultPos"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"alignPt", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"Max", "[", 
         RowBox[{"Position", "[", 
          RowBox[{"#", ",", "1"}], "]"}], "]"}], "&"}], "/@", "meter3"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"splitMeters", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"Partition", "[", 
         RowBox[{"#", ",", 
          RowBox[{"UpTo", "[", 
           RowBox[{"Max", "[", 
            RowBox[{"Position", "[", 
             RowBox[{"#", ",", "1"}], "]"}], "]"}], "]"}]}], "]"}], "&"}], "/@",
        "meter3"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"bkOff", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"Min", "[", 
         RowBox[{"Position", "[", 
          RowBox[{
           RowBox[{"Reverse", "[", "#", "]"}], ",", "1"}], "]"}], "]"}], 
        "&"}], "/@", "meter3"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"coords", "=", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"MapIndexed", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"If", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{
              "#2", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
              "\[Equal]", "1"}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"1", "-", 
                RowBox[{
                "#2", "\[LeftDoubleBracket]", "3", 
                 "\[RightDoubleBracket]"}]}], ",", 
               RowBox[{"#1", "+", 
                RowBox[{"1.2", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                   "#2", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "-", "1"}], ")"}]}]}]}], "}"}],
              ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{
                "#2", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
                "-", "1"}], ",", 
               RowBox[{"#1", "+", 
                RowBox[{"1.2", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                   "#2", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "-", "1"}], ")"}]}]}]}], 
              "}"}]}], "\[IndentingNewLine]", "]"}], "&"}], ",", 
          RowBox[{"Reverse", "[", 
           RowBox[{"MapAt", "[", 
            RowBox[{
             RowBox[{"Prepend", "[", "1", "]"}], ",", 
             RowBox[{"MapAt", "[", 
              RowBox[{"Reverse", ",", 
               RowBox[{"splitMeters", "/.", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"{", "lhs_List", "}"}], "\[RuleDelayed]", 
                  RowBox[{"{", 
                   RowBox[{"lhs", ",", 
                    RowBox[{"{", "}"}]}], "}"}]}], ")"}]}], ",", 
               RowBox[{"{", 
                RowBox[{"All", ",", "1"}], "}"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"All", ",", "2"}], "}"}]}], "]"}], "]"}], ",", 
          RowBox[{"{", "3", "}"}]}], "]"}], ",", "1"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"xRuns", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"Range", "[", 
         RowBox[{"Length", "[", "#", "]"}], "]"}], "&"}], "/@", "meter3"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"lens", "=", 
      RowBox[{"Length", "/@", "meter3"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"endPts", "=", "bkOff"}], ";", "\[IndentingNewLine]", 
     RowBox[{"begPts", "=", 
      RowBox[{"endPts", "-", "lens"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"coordsX", "=", 
      RowBox[{"MapThread", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Range", "[", 
          RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"begPts", "+", "1"}], ",", "endPts"}], "}"}]}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"coordsY", "=", 
      RowBox[{"MapIndexed", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"#1", "+", 
            RowBox[{"1.2", "*", 
             RowBox[{
             "#2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}]}],
            "}"}], "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         "&"}], ",", 
        RowBox[{"Reverse", "[", "meter3", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"coords2", "=", 
      RowBox[{"MapThread", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Partition", "[", 
          RowBox[{
           RowBox[{"Riffle", "[", 
            RowBox[{"#1", ",", "#2"}], "]"}], ",", "2"}], "]"}], "&"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Reverse", "[", "coordsX", "]"}], ",", "coordsY"}], "}"}]}],
        "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"txtCoo", "=", 
      RowBox[{"MapIndexed", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
           "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
           
           RowBox[{
            RowBox[{"1.2", "*", 
             RowBox[{
             "#2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
            "+", ".5"}]}], "}"}], "&"}], ",", "coords2", ",", 
        RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"syllab", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"#", "\[LeftDoubleBracket]", 
         RowBox[{";;", ",", "3"}], "\[RightDoubleBracket]"}], "&"}], "/@", 
       RowBox[{"Reverse", "[", "wordInfo", "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"textGr", "=", 
      RowBox[{"MapThread", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Style", "[", 
          RowBox[{
           RowBox[{"Text", "[", 
            RowBox[{"#1", ",", "#2"}], "]"}], ",", "15", ",", 
           RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}]}], "]"}], "&"}],
         ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Flatten", "[", "syllab", "]"}], ",", 
          RowBox[{"Partition", "[", 
           RowBox[{
            RowBox[{"Flatten", "[", 
             RowBox[{"txtCoo", ",", "2"}], "]"}], ",", "2"}], "]"}]}], 
         "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"meterGraphic", "=", 
      RowBox[{"Graphics", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"GrayLevel", "[", ".7", "]"}], ",", 
          RowBox[{"Line", "[", "coords2", "]"}], ",", "Black", ",", 
          "textGr"}], "}"}], ",", 
        RowBox[{"ImageMargins", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"10", ",", "10"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "900"}]}], "]"}]}]}], 
    "\[IndentingNewLine]", ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"analyzeMeter", "[", "stanza", "]"}]}], "Input",
 CellChangeTimes->{{3.7659716810875893`*^9, 3.765971717139518*^9}, {
   3.7659717646277103`*^9, 3.765971824796339*^9}, {3.765971873355729*^9, 
   3.765971875429204*^9}, {3.765971906564228*^9, 3.76597191934861*^9}, {
   3.765971973029655*^9, 3.765972016807125*^9}, {3.7659721159340563`*^9, 
   3.765972117494604*^9}, {3.7659725710569067`*^9, 3.765972585189782*^9}, {
   3.7659727305024643`*^9, 3.765972736860527*^9}, {3.7659737928351927`*^9, 
   3.765973808626656*^9}, {3.765974000427876*^9, 3.765974026218441*^9}, 
   3.7659740618521214`*^9, {3.765974096771657*^9, 3.765974130233962*^9}, {
   3.765976017208343*^9, 3.765976019224102*^9}, {3.765984760004978*^9, 
   3.765984811323843*^9}, {3.7659848571410217`*^9, 3.765984894123783*^9}, {
   3.7659888272560577`*^9, 3.765988836886571*^9}, {3.7659888751121397`*^9, 
   3.765988881633481*^9}, 3.765989653301828*^9, {3.7659896877479277`*^9, 
   3.765989733019195*^9}, {3.765993579063072*^9, 3.765993695414093*^9}, {
   3.7659937330778933`*^9, 3.7659937761977777`*^9}, {3.765993851534264*^9, 
   3.765993882637817*^9}, {3.7659943276264753`*^9, 3.7659943987695913`*^9}, {
   3.7659944893494263`*^9, 3.7659945827131357`*^9}, {3.765994633108165*^9, 
   3.765994773145185*^9}, {3.7659950015412397`*^9, 3.765995059672831*^9}, 
   3.765995339719679*^9, {3.765995449971245*^9, 3.765995505679545*^9}, 
   3.765995771992436*^9, 3.765996269220446*^9, {3.765996785916461*^9, 
   3.7659968144329357`*^9}, {3.76599697581746*^9, 3.765997018511284*^9}, {
   3.765997375008106*^9, 3.765997423767213*^9}, {3.7659974715269337`*^9, 
   3.765997472278809*^9}, {3.765997545386465*^9, 3.765997558566971*^9}, {
   3.765997629687903*^9, 3.765997630358493*^9}, 3.766003693445408*^9, 
   3.7660500749445877`*^9, {3.766092382204688*^9, 3.766092417955399*^9}, {
   3.766102636129271*^9, 3.7661026735928183`*^9}, {3.766102711682355*^9, 
   3.766102721137155*^9}, {3.766102777468376*^9, 3.766102915272224*^9}, {
   3.7661029945125732`*^9, 3.766103086471841*^9}, {3.766104207750431*^9, 
   3.76610431258871*^9}, {3.7661044962889853`*^9, 3.766104528180767*^9}, {
   3.7661047333810997`*^9, 3.766104738755823*^9}, {3.766104826731574*^9, 
   3.766104834859524*^9}, {3.76610493565937*^9, 3.766104937795034*^9}, {
   3.766105051517036*^9, 3.766105053075109*^9}, {3.7661301889220343`*^9, 
   3.7661301921441936`*^9}, {3.7661303296175003`*^9, 
   3.7661303301679688`*^9}, {3.7661306923445377`*^9, 3.766130732822509*^9}, {
   3.7661308806636143`*^9, 3.7661309069264097`*^9}, {3.766131291786324*^9, 
   3.766131342912878*^9}, {3.76613137694648*^9, 3.766131381049143*^9}, {
   3.766131455578145*^9, 3.766131489496604*^9}, {3.7661315265704*^9, 
   3.766131528192357*^9}, {3.7661315633140783`*^9, 3.7661315797370377`*^9}, {
   3.766138510602912*^9, 3.766138512432728*^9}, {3.766138686106138*^9, 
   3.7661386895285482`*^9}, {3.76613878559403*^9, 3.766138790024335*^9}, {
   3.766138822969947*^9, 3.766138826720313*^9}, {3.766143488250951*^9, 
   3.766143508238168*^9}, {3.766157557266127*^9, 3.766157614144507*^9}, {
   3.766157729584478*^9, 3.7661578114163103`*^9}, {3.766163245699682*^9, 
   3.766163246442864*^9}, {3.766163593530045*^9, 3.766163671043727*^9}, {
   3.76616388814507*^9, 3.76616395414468*^9}, {3.766163985881135*^9, 
   3.76616402915252*^9}, 3.766164381329104*^9, {3.7661644208035593`*^9, 
   3.7661644294170713`*^9}, 3.766164834767993*^9, {3.7661652899328136`*^9, 
   3.766165296074881*^9}, {3.770820429892712*^9, 3.770820456590493*^9}, {
   3.770820537656665*^9, 3.770820574513883*^9}, 3.770820737427593*^9, {
   3.7708208067317038`*^9, 3.77082081034939*^9}, 3.770820850186244*^9, {
   3.770820975532374*^9, 3.7708211058130283`*^9}, {3.770821138576644*^9, 
   3.770821330294837*^9}, {3.77082157343011*^9, 3.770821676378825*^9}, {
   3.770821727028769*^9, 3.7708217553161297`*^9}, 3.7708255392823677`*^9, {
   3.770825705411543*^9, 3.7708257173508663`*^9}, {3.770897682844428*^9, 
   3.770897695412197*^9}, 3.770897765643257*^9, {3.77089781138035*^9, 
   3.7708978719145613`*^9}, {3.771068466408749*^9, 3.7710685270134277`*^9}, {
   3.771185233775848*^9, 3.771185239062052*^9}, 3.7711853824220448`*^9, 
   3.771185731164773*^9, {3.7711857941768427`*^9, 3.771185798253286*^9}, {
   3.771185900938017*^9, 3.7711859028274097`*^9}, {3.771186088326292*^9, 
   3.7711860983258333`*^9}, 3.771186151238667*^9, 3.771190888898542*^9, {
   3.771192718946638*^9, 3.771192719148596*^9}, {3.771192878684525*^9, 
   3.771192885702709*^9}, {3.771192951744073*^9, 3.7711929770049267`*^9}, 
   3.771193147748561*^9, {3.7711934753266277`*^9, 3.771193546757235*^9}, {
   3.771193738504385*^9, 3.771193764800515*^9}, {3.771193914592105*^9, 
   3.771193925006838*^9}, {3.771193965858886*^9, 3.7711940153299303`*^9}, 
   3.771194047458989*^9, {3.771194095468532*^9, 3.7711941499159203`*^9}, {
   3.7711941894259233`*^9, 3.7711941954812727`*^9}, {3.771194334546982*^9, 
   3.7711943436718397`*^9}, {3.771194396411336*^9, 3.771194424857099*^9}, {
   3.771194671428061*^9, 3.771194680331409*^9}, {3.771194742050054*^9, 
   3.771194804288293*^9}, {3.7711948651700897`*^9, 3.771194884111883*^9}, {
   3.7711949900092916`*^9, 3.7711949916747847`*^9}, {3.7711950322643557`*^9, 
   3.771195034203947*^9}, {3.771195258134798*^9, 3.771195261339478*^9}, {
   3.7712329480567417`*^9, 3.771233000146022*^9}, {3.771233110974297*^9, 
   3.771233125779189*^9}, 3.7712331746704884`*^9, {3.771233318802986*^9, 
   3.771233326473267*^9}, {3.771233470721718*^9, 3.771233480678074*^9}, {
   3.771233565593585*^9, 3.771233627702902*^9}, {3.771233665593071*^9, 
   3.7712337234465733`*^9}, {3.771233810572484*^9, 3.771233816643067*^9}, {
   3.771233851034687*^9, 3.771233857568342*^9}, {3.771233914393423*^9, 
   3.7712339340306597`*^9}, {3.7712340894302998`*^9, 3.771234113994514*^9}, {
   3.77123415673936*^9, 3.7712341916133127`*^9}, {3.7712342306021214`*^9, 
   3.77123426770341*^9}, {3.771234560018261*^9, 3.771234577162321*^9}, {
   3.771234625901696*^9, 3.771234684543453*^9}, {3.771234727767558*^9, 
   3.771234763695487*^9}, {3.771234843076138*^9, 3.771234854465418*^9}, {
   3.7712349024372883`*^9, 3.7712349428161373`*^9}, {3.77123514255835*^9, 
   3.771235160312621*^9}, {3.7712351963772507`*^9, 3.7712352037251873`*^9}, {
   3.7712352401842318`*^9, 3.7712352416031857`*^9}, {3.771235313858143*^9, 
   3.771235389178474*^9}, 3.771235422449864*^9, 3.771235467251151*^9, {
   3.771235506065055*^9, 3.771235629752275*^9}, {3.771235666496828*^9, 
   3.771235677088913*^9}, {3.771235982378078*^9, 3.771236037016279*^9}, {
   3.771236068372677*^9, 3.7712361661698923`*^9}, {3.771236258471612*^9, 
   3.771236291083911*^9}, {3.771236529818963*^9, 3.7712365675137873`*^9}, {
   3.771236599672509*^9, 3.7712366329774942`*^9}, {3.7712366795066557`*^9, 
   3.7712368221584463`*^9}, {3.771236853185534*^9, 3.771236855909482*^9}, {
   3.7712368885880327`*^9, 3.7712369039580717`*^9}, {3.7712369680979567`*^9, 
   3.771236970035284*^9}, {3.7712370113181*^9, 3.771237057320525*^9}, 
   3.771237109085436*^9, 3.7712371648001738`*^9, {3.7712372628796597`*^9, 
   3.771237313632783*^9}, {3.771237396611848*^9, 3.7712374003802137`*^9}, {
   3.7712374331819077`*^9, 3.771237493333816*^9}, {3.771237652865322*^9, 
   3.771237692285947*^9}, {3.771237740088632*^9, 3.7712377670396843`*^9}, {
   3.7712380644021177`*^9, 3.771238129042465*^9}, {3.771238190280592*^9, 
   3.7712381990230103`*^9}, {3.771238366473263*^9, 3.771238377214604*^9}, 
   3.7712384176370687`*^9, {3.77123845637254*^9, 3.771238505181308*^9}, 
   3.771238549625042*^9, {3.771238592022745*^9, 3.771238596722042*^9}, 
   3.7712386974213877`*^9, {3.7712389188199778`*^9, 3.771238921723131*^9}, 
   3.7712390387496777`*^9, {3.771239087647719*^9, 3.7712391608918743`*^9}, {
   3.7712391910854673`*^9, 3.771239204364551*^9}, {3.771252544171327*^9, 
   3.771252632584593*^9}, {3.771252666623391*^9, 3.771252670674429*^9}, 
   3.771252850154832*^9, {3.771252971398426*^9, 3.771252980578519*^9}, {
   3.7712530528802233`*^9, 3.7712530669659157`*^9}, {3.771253136296707*^9, 
   3.771253176917829*^9}, {3.771253227848393*^9, 3.771253251034775*^9}, {
   3.7712533035704317`*^9, 3.77125335281325*^9}, {3.7712534193800907`*^9, 
   3.771253451456567*^9}, 3.771253788574801*^9, {3.771253833076028*^9, 
   3.771253846500895*^9}, {3.771253926617612*^9, 3.77125397002842*^9}, {
   3.7712540196611147`*^9, 3.771254073441738*^9}, {3.771254156843236*^9, 
   3.7712542137403316`*^9}, {3.771254340400297*^9, 3.771254356670332*^9}, {
   3.7712544011732492`*^9, 3.7712544628105288`*^9}, {3.7712545707202463`*^9, 
   3.771254597235313*^9}, {3.771254640191551*^9, 3.771254664132118*^9}, {
   3.7712547180855303`*^9, 3.771254719872126*^9}, {3.771254768070313*^9, 
   3.771254797149741*^9}, {3.7712548360396338`*^9, 3.771254850970208*^9}, {
   3.771254944976269*^9, 3.7712549725407753`*^9}, {3.771255465375559*^9, 
   3.771255567103593*^9}, {3.771255623947165*^9, 3.7712556267043867`*^9}, {
   3.771255659466359*^9, 3.771255662469006*^9}, 3.771255708694471*^9, 
   3.771256177681119*^9, {3.7712562639531*^9, 3.7712563049084187`*^9}, {
   3.771256388020548*^9, 3.771256412852448*^9}, {3.7712564442321663`*^9, 
   3.771256520733581*^9}, {3.771256602588749*^9, 3.771256635011784*^9}, {
   3.771256668897064*^9, 3.771256670031047*^9}, {3.7712567173170567`*^9, 
   3.7712567269620733`*^9}, {3.771256759474552*^9, 3.771256788688591*^9}, {
   3.7712568267422667`*^9, 3.771256840680544*^9}, {3.771256906922521*^9, 
   3.7712569345107317`*^9}, {3.771256974482766*^9, 3.77125702227495*^9}, {
   3.771257250531897*^9, 3.771257369399897*^9}, {3.771257573434317*^9, 
   3.7712575835621653`*^9}, {3.771257858179582*^9, 3.771257864656571*^9}, 
   3.771257985437024*^9, {3.771260209095592*^9, 3.771260249427711*^9}, {
   3.7712602922133703`*^9, 3.771260302925762*^9}, {3.7712607193520107`*^9, 
   3.771260721147937*^9}, {3.771260763384573*^9, 3.7712607681258497`*^9}, {
   3.771260804493104*^9, 3.7712608796941853`*^9}, {3.7712609311123877`*^9, 
   3.7712609315957193`*^9}, {3.771261060408354*^9, 3.771261118900576*^9}, 
   3.7712612307581377`*^9, {3.771261360910624*^9, 3.7712613682067347`*^9}, {
   3.771261424806089*^9, 3.771261462714666*^9}, {3.771262578708688*^9, 
   3.7712625895335217`*^9}, {3.771262702226141*^9, 3.771262737041394*^9}, {
   3.771262818624106*^9, 3.771262839195362*^9}, {3.771262927127619*^9, 
   3.771262949265847*^9}, {3.771263008684696*^9, 3.7712630347155647`*^9}, {
   3.7712630690906467`*^9, 3.771263087321739*^9}, {3.771263159347114*^9, 
   3.771263215046139*^9}, {3.7712632603394423`*^9, 3.771263273612809*^9}, {
   3.7712633662148867`*^9, 3.771263366386874*^9}, {3.771263403476975*^9, 
   3.771263415976903*^9}, {3.77126345843715*^9, 3.771263534725437*^9}, {
   3.771263667598716*^9, 3.771263667751644*^9}, {3.771263713506834*^9, 
   3.771263766495021*^9}, {3.771263895601803*^9, 3.7712639584983063`*^9}, {
   3.771312060633142*^9, 3.7713121038554163`*^9}, {3.77131749374704*^9, 
   3.771317516399012*^9}, {3.771317711054072*^9, 3.7713177225475693`*^9}, 
   3.771317771918357*^9, {3.7713178068003273`*^9, 3.771317810388158*^9}, {
   3.771317859457271*^9, 3.7713178787044363`*^9}, {3.7713179119709253`*^9, 
   3.771317915472983*^9}, {3.771318499869993*^9, 3.771318517746088*^9}, {
   3.771320857839788*^9, 3.771320887876523*^9}, {3.771336072312497*^9, 
   3.771336076948947*^9}, {3.771336172371737*^9, 3.7713361816736937`*^9}, {
   3.7713376864893303`*^9, 3.771337752422268*^9}, 3.77133780121561*^9, {
   3.771337937586216*^9, 3.771337939679946*^9}, {3.771337971509727*^9, 
   3.771337975871196*^9}, {3.771338099954458*^9, 3.7713381021113567`*^9}, 
   3.771338144751625*^9, 3.771338210893896*^9, {3.771338609588875*^9, 
   3.7713386219997272`*^9}, {3.771339338022737*^9, 3.7713394197961607`*^9}, 
   3.7713403010692387`*^9, {3.771340430214218*^9, 3.771340435264637*^9}, {
   3.771343028798658*^9, 3.7713430646749477`*^9}, {3.7713432278383408`*^9, 
   3.7713432543657017`*^9}, {3.771343308565077*^9, 3.771343372073457*^9}, 
   3.771343421193253*^9, {3.7713458225098352`*^9, 3.771345855988614*^9}, {
   3.771345888676888*^9, 3.771345900837133*^9}, {3.771345960275784*^9, 
   3.7713461010632772`*^9}, {3.771346147300188*^9, 3.771346166726348*^9}, {
   3.771346492497731*^9, 3.771346577579708*^9}, {3.771346615738182*^9, 
   3.771346687394581*^9}, {3.771346720517098*^9, 3.771346728611094*^9}, {
   3.7713469519085712`*^9, 3.771346986685758*^9}, 3.771356502607749*^9, {
   3.771357072056613*^9, 3.771357102603121*^9}, {3.771357234436388*^9, 
   3.7713572379493923`*^9}, {3.771357452910132*^9, 3.7713576274643517`*^9}, {
   3.771357718691464*^9, 3.771357722980041*^9}, {3.7713580673803883`*^9, 
   3.771358070120503*^9}, {3.7713582137505207`*^9, 3.771358218617259*^9}, 
   3.771360272916318*^9, {3.771360317397596*^9, 3.7713603224289417`*^9}, {
   3.77136035861381*^9, 3.771360381507701*^9}, {3.7713604807872953`*^9, 
   3.771360531332406*^9}, {3.7713605775019836`*^9, 3.77136059895476*^9}, {
   3.771360630705611*^9, 3.7713606975214853`*^9}, {3.771360738668599*^9, 
   3.77136075716846*^9}, 3.771360795104631*^9, {3.7714447041044807`*^9, 
   3.7714447079128437`*^9}, 3.771448988740693*^9, {3.771449021474745*^9, 
   3.771449137220604*^9}, {3.771451924729394*^9, 3.7714519469836607`*^9}, 
   3.771452982913075*^9, {3.7715030010720778`*^9, 3.771503003713655*^9}, 
   3.7715045207557287`*^9, 3.771507063947238*^9, 3.771507153532902*^9, {
   3.77150822597755*^9, 3.771508238864381*^9}, 3.7715082893931007`*^9, {
   3.771508327475504*^9, 3.771508362655801*^9}, 3.77150858458117*^9, {
   3.771508617710888*^9, 3.771508621296357*^9}, {3.771508747576725*^9, 
   3.771508813702218*^9}, 3.771508953540559*^9, {3.771509018023574*^9, 
   3.771509067941627*^9}, {3.771509176375557*^9, 3.771509294542921*^9}, {
   3.771509702184903*^9, 3.771509715388535*^9}, 3.7715097572258787`*^9, 
   3.771510020066*^9, 3.771510216137083*^9, {3.771510409364533*^9, 
   3.771510544788307*^9}, {3.771510604521381*^9, 3.771510763017372*^9}, {
   3.7715108060391083`*^9, 3.771510836064694*^9}, {3.771510889675371*^9, 
   3.771510908627757*^9}, {3.7715109406209803`*^9, 3.771510986260353*^9}, 
   3.771511069200954*^9, {3.771511514950334*^9, 3.771511537041575*^9}, {
   3.7715117637273083`*^9, 3.771511778047902*^9}, 3.77151190624844*^9, {
   3.7715119659804688`*^9, 3.771512017488386*^9}, 3.7715121078806877`*^9, {
   3.771512989840907*^9, 3.771512996528597*^9}, {3.771513090953044*^9, 
   3.771513114726707*^9}, {3.771513171510146*^9, 3.771513173275429*^9}, {
   3.7715132143208857`*^9, 3.771513232848472*^9}, 3.771513291743805*^9, {
   3.77151334098629*^9, 3.771513462878854*^9}, {3.771513598313141*^9, 
   3.771513689007086*^9}, {3.771513728087863*^9, 3.7715137296550922`*^9}, {
   3.771513995725231*^9, 3.7715139976931267`*^9}, {3.771514095425029*^9, 
   3.771514096078022*^9}, {3.771514282466134*^9, 3.7715143260326223`*^9}, {
   3.771514368684636*^9, 3.7715144233212233`*^9}, {3.7715163943626833`*^9, 
   3.771516402981489*^9}, 3.7715164568189096`*^9, {3.771516584889277*^9, 
   3.771516585658746*^9}, {3.771516616468198*^9, 3.77151664659833*^9}, {
   3.771516890252267*^9, 3.7715169041022987`*^9}, {3.771516962307331*^9, 
   3.771516971793861*^9}, {3.7715170477041607`*^9, 3.771517053825124*^9}, {
   3.771517650001745*^9, 3.771517664239374*^9}, {3.77151791580667*^9, 
   3.771517976710999*^9}, {3.771518008187508*^9, 3.7715180083213654`*^9}, {
   3.7715181051397257`*^9, 3.771518164314666*^9}, {3.7715182624281263`*^9, 
   3.771518274172558*^9}, {3.771518313103487*^9, 3.7715183322445803`*^9}, {
   3.77151842456707*^9, 3.771518530850441*^9}, {3.771518725540473*^9, 
   3.771518731817121*^9}, {3.771518766084196*^9, 3.771518795949378*^9}, {
   3.771518891798684*^9, 3.771518927429673*^9}, {3.771518959098167*^9, 
   3.771518965634066*^9}, {3.771519103696041*^9, 3.771519103822721*^9}, {
   3.771519564976486*^9, 3.771519565614572*^9}, {3.7715692952359667`*^9, 
   3.771569336395129*^9}},
 CellLabel->
  "In[1940]:=",ExpressionUUID->"3516f487-59ad-4e0e-ac3a-9e2efe190bc9"],

Cell[BoxData[
 GraphicsBox[{
   {GrayLevel[0.7], 
    LineBox[{{{-5, 2.2}, {-4, 1.2}, {-3, 2.2}, {-2, 1.2}, {-1, 2.2}, {
       0, 1.2}, {
       1, 2.2}}, {{-13, 3.4}, {-12, 2.4}, {-11, 3.4}, {-10, 2.4}, {-9, 
        2.4}, {-8, 3.4}, {-7, 3.4}, {-6, 2.4}, {-5, 3.4}, {-4, 2.4}, {-3, 
        3.4}, {-2, 2.4}, {-1, 3.4}, {0, 2.4}, {
       1, 3.4}}, {{-13, 4.6}, {-12, 3.5999999999999996`}, {-11, 4.6}, {-10, 
        3.5999999999999996`}, {-9, 4.6}, {-8, 3.5999999999999996`}, {-7, 
        4.6}, {-6, 3.5999999999999996`}, {-5, 4.6}, {-4, 
        3.5999999999999996`}, {-3, 4.6}, {-2, 3.5999999999999996`}, {-1, 
        4.6}, {0, 3.5999999999999996`}, {
       1, 4.6}}, {{-13, 5.8}, {-12, 4.8}, {-11, 5.8}, {-10, 4.8}, {-9, 
        5.8}, {-8, 4.8}, {-7, 5.8}, {-6, 4.8}, {-5, 5.8}, {-4, 4.8}, {-3, 
        4.8}, {-2, 5.8}, {-1, 5.8}, {0, 4.8}, {1, 5.8}, {
       2, 4.8}}, {{-15, 7.}, {-14, 6.}, {-13, 7.}, {-12, 6.}, {-11, 7.}, {-10,
         7.}, {-9, 6.}, {-8, 7.}, {-7, 6.}, {-6, 6.}, {-5, 7.}, {-4, 6.}, {-3,
         7.}, {-2, 6.}, {-1, 7.}, {0, 6.}, {
       1, 7.}}, {{-13, 8.2}, {-12, 7.199999999999999}, {-11, 8.2}, {-10, 
        7.199999999999999}, {-9, 8.2}, {-8, 7.199999999999999}, {-7, 
        8.2}, {-6, 7.199999999999999}, {-5, 8.2}, {-4, 
        7.199999999999999}, {-3, 8.2}, {-2, 7.199999999999999}, {-1, 8.2}, {
       0, 7.199999999999999}, {1, 8.2}, {2, 7.199999999999999}}}]}, 
   {GrayLevel[0], 
    StyleBox[InsetBox["\<\"on\"\>", {-5, 1.7}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"ly\"\>", {-4, 1.7}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"this\"\>", {-3, 1.7}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"and\"\>", {-2, 1.7}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"noth\"\>", {-1, 1.7}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"ing\"\>", {0, 1.7}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"more\"\>", {1, 1.7}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"Tis\"\>", {-13, 2.9}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"some\"\>", {-12, 2.9}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"vis\"\>", {-11, 2.9}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"i\"\>", {-10, 2.9}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"tor\"\>", {-9, 2.9}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"I\"\>", {-8, 2.9}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"mut\"\>", {-7, 2.9}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"tered\"\>", {-6, 2.9}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"tap\"\>", {-5, 2.9}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"ping\"\>", {-4, 2.9}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"at\"\>", {-3, 2.9}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"my\"\>", {-2, 2.9}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"cham\"\>", {-1, 2.9}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"ber\"\>", {0, 2.9}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"door\"\>", {1, 2.9}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"As\"\>", {-13, 4.1}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"of\"\>", {-12, 4.1}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"some\"\>", {-11, 4.1}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"one\"\>", {-10, 4.1}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"gen\"\>", {-9, 4.1}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"tly\"\>", {-8, 4.1}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"rap\"\>", {-7, 4.1}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"ping\"\>", {-6, 4.1}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"rap\"\>", {-5, 4.1}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"ping\"\>", {-4, 4.1}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"at\"\>", {-3, 4.1}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"my\"\>", {-2, 4.1}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"cham\"\>", {-1, 4.1}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"ber\"\>", {0, 4.1}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"door\"\>", {1, 4.1}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"While\"\>", {-13, 5.3}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"I\"\>", {-12, 5.3}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"nod\"\>", {-11, 5.3}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"ded\"\>", {-10, 5.3}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"near\"\>", {-9, 5.3}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"ly\"\>", {-8, 5.3}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"nap\"\>", {-7, 5.3}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"ping\"\>", {-6, 5.3}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"sud\"\>", {-5, 5.3}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"den\"\>", {-4, 5.3}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"ly\"\>", {-3, 5.3}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"there\"\>", {-2, 5.3}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"came\"\>", {-1, 5.3}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"a\"\>", {0, 5.3}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"tap\"\>", {1, 5.3}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"ping\"\>", {2, 5.3}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"o\"\>", {-15, 6.5}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"ver\"\>", {-14, 6.5}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"man\"\>", {-13, 6.5}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"y\"\>", {-12, 6.5}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"a\"\>", {-11, 6.5}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"quaint\"\>", {-10, 6.5}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"and\"\>", {-9, 6.5}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"cu\"\>", {-8, 6.5}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"ri\"\>", {-7, 6.5}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"ous\"\>", {-6, 6.5}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"vol\"\>", {-5, 6.5}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"ume\"\>", {-4, 6.5}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"of\"\>", {-3, 6.5}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"for\"\>", {-2, 6.5}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"got\"\>", {-1, 6.5}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"ten\"\>", {0, 6.5}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"lore\"\>", {1, 6.5}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"Once\"\>", {-13, 7.699999999999999}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"up\"\>", {-12, 7.699999999999999}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"on\"\>", {-11, 7.699999999999999}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"a\"\>", {-10, 7.699999999999999}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"mid\"\>", {-9, 7.699999999999999}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"night\"\>", {-8, 7.699999999999999}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"drear\"\>", {-7, 7.699999999999999}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"y\"\>", {-6, 7.699999999999999}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"while\"\>", {-5, 7.699999999999999}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"I\"\>", {-4, 7.699999999999999}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"pon\"\>", {-3, 7.699999999999999}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"dered\"\>", {-2, 7.699999999999999}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"weak\"\>", {-1, 7.699999999999999}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"and\"\>", {0, 7.699999999999999}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"wea\"\>", {1, 7.699999999999999}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15], 
    StyleBox[InsetBox["\<\"ry\"\>", {2, 7.699999999999999}],
     StripOnInput->False,
     FontFamily->"Times",
     FontSize->15]}},
  ImageMargins->{{10, 10}, {0, 0}},
  ImageSize->900]], "Output",
 CellChangeTimes->{
  3.77151691569625*^9, 3.771516980912608*^9, 3.771517062154294*^9, {
   3.771517946714232*^9, 3.771517985713893*^9}, 3.771518017353466*^9, {
   3.771518115155394*^9, 3.771518172956399*^9}, {3.771518326872943*^9, 
   3.771518344913402*^9}, 3.771518451610886*^9, 3.771518510667098*^9, 
   3.7715185428393583`*^9, 3.7715187401440563`*^9, 3.771518804346257*^9, {
   3.771518908345462*^9, 3.7715189367254467`*^9}, 3.7715189737991123`*^9, 
   3.771519113479999*^9, 3.7715208926401176`*^9, 3.771527701598444*^9, 
   3.7715693489263067`*^9, 3.771589476148275*^9, 3.771683569399754*^9},
 CellLabel->
  "Out[1946]=",ExpressionUUID->"eeca8e0f-a6ba-4dd9-ba70-2255d817eaa9"]
}, {2}]],

Cell["\<\
The zigzag lines zig up for stressed syllables and down for unstressed. The \
last stressed syllable of each line is aligned because this will make the end \
rhyme more apparent in Part 2 of the project. The program\[CloseCurlyQuote]s \
analysis of this stanza matches exactly traditional scansion except for one \
mistake in syllabification, which it marks with the number 11, and the word \
\[OpenCurlyDoubleQuote]a\[CloseCurlyDoubleQuote] in the second line which \
should be unstressed. Poe is using a duple meter pattern, which alternates \
stressed and unstressed syllables. The graphic shows clearly that the overall \
framework alternates stressed-unstressed-stressed.... Where there are \
deviations from this pattern, the poet deliberately added an extra syllable \
or introduced an unexpected stress. I suggest that this graphic makes more \
metrical information readily available than the traditional method of marking \
feet above a line of text.\
\>", "Text",
 CellChangeTimes->{{3.766143541143097*^9, 3.766143599087043*^9}, {
   3.7661436438152103`*^9, 3.766143673350419*^9}, {3.766143792718873*^9, 
   3.766143955501923*^9}, 3.766150991281334*^9, {3.766153948063607*^9, 
   3.766153956847288*^9}, {3.766154421022707*^9, 3.7661544480063562`*^9}, {
   3.77131999462358*^9, 3.771320007145707*^9}, {3.7713200455576878`*^9, 
   3.7713202322192307`*^9}, {3.77132031757828*^9, 3.77132045160865*^9}, {
   3.7713204988499002`*^9, 3.771320635292222*^9}, {3.7715194174751673`*^9, 
   3.771519500889292*^9}, {3.77152773952945*^9, 3.77152782618435*^9}, {
   3.771527857884405*^9, 3.771527858787808*^9}, {3.771527898898919*^9, 
   3.771527910324204*^9}, {3.7716029896422033`*^9, 3.7716029960055027`*^9}, 
   3.771603039126333*^9},ExpressionUUID->"71f2f734-2fda-4e72-a856-\
0e0a7e1d50ad"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Part 2: Rhyme", "Chapter",
 CellChangeTimes->{{3.7656268178099813`*^9, 3.76562687076138*^9}, {
  3.765968908887895*^9, 3.765968909647869*^9}, {3.771320936283538*^9, 
  3.771320949814803*^9}},ExpressionUUID->"0604b781-b8e6-4ea8-96e6-\
1c7397a75fdb"],

Cell[TextData[{
 "Poems often rhyme. A naive explanation of rhyme says that one word rhymes \
with another if the ending sounds are the same, particularly the last vowel \
sounds and beyond. Rhyme in context is more complicated than that, and the \
concept of rhyme can be extended to a larger class of what we might call ",
 StyleBox["sound echoes",
  FontSlant->"Italic"],
 ". Inside a poem, we really are not rhyming one word with another. Instead, \
we rhyme one part of the stress pattern with another. It is always the same \
part of the pattern, a stressed syllable followed by zero to two unstressed \
syllables. With this definition, we can understand rhymes like \
\[OpenCurlyDoubleQuote]...pick it...\[CloseCurlyDoubleQuote] with \
\[OpenCurlyDoubleQuote]thicket\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]Le",
 StyleBox["nore",
  FontWeight->"Bold"],
 "\[CloseCurlyDoubleQuote] with \[OpenCurlyDoubleQuote]never",
 StyleBox["more",
  FontWeight->"Bold"],
 "\[CloseCurlyDoubleQuote]. The term ",
 StyleBox["rhyme",
  FontSlant->"Italic"],
 " can include a larger family of sound features in a poem. Here, we will \
consider traditional rhyme (end rhyme), alliteration (front rhyme), assonance \
(vowel rhyme), and consonance (consonant rhyme). Poets are certainly aware of \
these echoic features, often plying them for effect. With the help of the \
Wolfram Language, we will attempt to represent these rhymes in an informative \
way.\n\nThe neural network in Part 1 gives the phonetic representation of the \
entire word and the word separated into syllables. To map the sound features \
of the poem, we need also the phonetic representation of each syllable. \
Several solutions to this problem are possible. We could modify the neural \
network to give a third output of phonetic syllables. We could use each word\
\[CloseCurlyQuote]s phonetic representation and split it into the right \
number of syllables. This would maintain the proper phoneme sounds, but it \
would often divide the consonants differently than the plain English \
syllables. A better solution is to get a phonetic representation of the \
individual syllables we have already. This solution is not perfect, but it \
does give divisions that are consistent with the scheme we are using.\n\nWe \
create an indexed list of all the phonetic syllables and then use the Subsets \
function to get a list of all 3655 possible pairs."
}], "Text",
 CellChangeTimes->{{3.771320975134283*^9, 3.77132114944165*^9}, 
   3.7713212019988003`*^9, {3.771321232949607*^9, 3.771321325563241*^9}, {
   3.771321420583008*^9, 3.771321513745397*^9}, {3.771321568166904*^9, 
   3.771321743945798*^9}, {3.771321826610139*^9, 3.771321899877388*^9}, {
   3.771321933057971*^9, 3.7713221926045847`*^9}, {3.77132239627521*^9, 
   3.7713224209971943`*^9}, {3.77134463340866*^9, 3.7713446345865307`*^9}, {
   3.771344738705029*^9, 3.771344841219689*^9}, {3.771445203291243*^9, 
   3.771445215260666*^9}, {3.771448772293696*^9, 3.771448777335003*^9}, {
   3.771448819249659*^9, 3.77144884819272*^9}, {3.771519819089616*^9, 
   3.7715198219079638`*^9}, 3.771527950825697*^9, {3.771528065696402*^9, 
   3.7715281684781227`*^9}, {3.77152820191052*^9, 3.771528245089492*^9}, {
   3.771528390808124*^9, 3.7715288938663063`*^9}, {3.771528930245195*^9, 
   3.7715290272142344`*^9}, {3.771530441315935*^9, 3.771530499330611*^9}, {
   3.771530843176342*^9, 3.771530946614695*^9}, {3.771531292979314*^9, 
   3.771531326181696*^9}, {3.77153166226932*^9, 3.771531663822949*^9}, {
   3.7716034796708117`*^9, 3.7716034798212423`*^9}, {3.7716035110084763`*^9, 
   3.771603517440707*^9}},ExpressionUUID->"a4f67baa-d5bf-4a08-ae46-\
2ca40b96a49d"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"syllab2", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Flatten", "[", "#", "]"}], "&"}], "/@", 
    RowBox[{"Reverse", "[", "syllab", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"phonSylls", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"MapIndexed", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"StringDelete", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"WordData", "[", 
              RowBox[{"#1", ",", "\"\<PhoneticForm\>\""}], "]"}], "/.", 
             RowBox[{"_Missing", "\[Rule]", 
              RowBox[{
               RowBox[{"getPhonsAndSylls", "[", "#1", "]"}], "[", 
               "\"\<Phonetic\>\"", "]"}]}]}], ",", 
            RowBox[{"\"\<\:02c8\>\"", "|", "\"\<\:02cc\>\""}]}], "]"}], ",", 
          "#2"}], "}"}], "&"}], ",", "syllab2", ",", 
       RowBox[{"{", "2", "}"}]}], "]"}], ",", "1"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allPairs", "=", 
   RowBox[{"Subsets", "[", 
    RowBox[{"phonSylls", ",", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Short", "[", "phonSylls", "]"}], ",", 
    RowBox[{"Short", "[", "allPairs", "]"}]}], "}"}], "//", 
  "Column"}]}], "Input",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQBWIQfVhO6908yTeOk87s/AiiX7x8/BVEB+kc+weiTxiI
MM8H0itCe7hB9O27AkIgOu/FVjD9YHWeNIheuK5EFkTvmWuhA6LdVs4zBtHG
4o8sQPRyFjl3EK20TSgQRH9h5QgG0W8OKieC6Pbquxlg+Ua3XBCdOKskD0Sf
PFXcBKJleJvBdMFB6S4QbVkgOhlEV1SuWAWiN4QlrQXRVvtdtoHoID1PMH1B
YO8tEN2z2f4+iNZ7OfkniK5LsfwNojtsorgWAOkWreNges/9veJg/goJKRB9
pOa9PIiWqutRBNHr+paogWjfvdd0QPQlzzXP9gDpHSl8H0A0ADbWokw=
  "],
 CellLabel->
  "In[1947]:=",ExpressionUUID->"368d6ace-be61-46a7-b3aa-9f4b89dc3df8"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\<\"n\:025b\"\>", ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\<\"\:028cp\"\>", ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\<\"\:0252n\"\>", ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "3"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\<\"\:0259\"\>", ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "4"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\<\"m\:026ad\"\>", ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "5"}], "}"}]}], "}"}], ",", 
        RowBox[{"\[LeftSkeleton]", "76", "\[RightSkeleton]"}], ",", 
        RowBox[{"{", 
         RowBox[{"\<\"\[Eth]\:026as\"\>", ",", 
          RowBox[{"{", 
           RowBox[{"6", ",", "3"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\<\"\[AE]nd\"\>", ",", 
          RowBox[{"{", 
           RowBox[{"6", ",", "4"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\<\"n\:0252\[Theta]\"\>", ",", 
          RowBox[{"{", 
           RowBox[{"6", ",", "5"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\<\"\:026a\:014b\"\>", ",", 
          RowBox[{"{", 
           RowBox[{"6", ",", "6"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\<\"m\:0254r\"\>", ",", 
          RowBox[{"{", 
           RowBox[{"6", ",", "7"}], "}"}]}], "}"}]}], "}"}],
      Short]},
    {
     TagBox[
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\<\"n\:025b\"\>", ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\<\"\:028cp\"\>", ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "2"}], "}"}]}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\<\"n\:025b\"\>", ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\<\"\:0252n\"\>", ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "3"}], "}"}]}], "}"}]}], "}"}], ",", 
        RowBox[{"\[LeftSkeleton]", "3651", "\[RightSkeleton]"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\<\"n\:0252\[Theta]\"\>", ",", 
            RowBox[{"{", 
             RowBox[{"6", ",", "5"}], "}"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\<\"m\:0254r\"\>", ",", 
            RowBox[{"{", 
             RowBox[{"6", ",", "7"}], "}"}]}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\<\"\:026a\:014b\"\>", ",", 
            RowBox[{"{", 
             RowBox[{"6", ",", "6"}], "}"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\<\"m\:0254r\"\>", ",", 
            RowBox[{"{", 
             RowBox[{"6", ",", "7"}], "}"}]}], "}"}]}], "}"}]}], "}"}],
      Short]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{3.771531535196308*^9, 3.771531628887127*^9, 
  3.7715896534638243`*^9, 3.771590539116707*^9, 3.771683570238099*^9},
 CellLabel->
  "Out[1950]=",ExpressionUUID->"06978733-a756-4648-820f-6aaedda5b508"]
}, Open  ]],

Cell["\<\
We can find the various kinds of echoes. For now we will not consider the \
stress values of the syllables. There are 185 alliterative pairs, but only 19 \
close enough to be heard as echoic features of the poem.\
\>", "Text",
 CellChangeTimes->{{3.771531772583469*^9, 3.771531811586286*^9}, {
  3.771531885603951*^9, 3.7715319403152122`*^9}, {3.771532019346223*^9, 
  3.771532025335478*^9}, {3.7715330001364727`*^9, 3.771533040810224*^9}, {
  3.771534304541589*^9, 
  3.771534304638989*^9}},ExpressionUUID->"2604a861-09b7-410b-a909-\
acd43a63cb1e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"alliterationAll", "=", 
   RowBox[{"Cases", "[", 
    RowBox[{"allPairs", ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"ps1_", ",", "_"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"ps2_", ",", "_"}], "}"}]}], "}"}], "/;", 
      RowBox[{
       RowBox[{
        RowBox[{"Characters", "[", 
         RowBox[{"StringDelete", "[", 
          RowBox[{"ps1", ",", 
           RowBox[{"\"\<\:02c8\>\"", "|", "\"\<\:02cc\>\""}]}], "]"}], "]"}], 
        "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "\[Equal]", 
       RowBox[{
        RowBox[{"Characters", "[", 
         RowBox[{"StringDelete", "[", 
          RowBox[{"ps2", ",", 
           RowBox[{"\"\<\:02c8\>\"", "|", "\"\<\:02cc\>\""}]}], "]"}], "]"}], 
        "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}]}]}], "]"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"alliterationClose", "=", 
   RowBox[{"Cases", "[", 
    RowBox[{"alliterationAll", ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"_", ",", 
          RowBox[{"{", 
           RowBox[{"l1_", ",", "s1_"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"_", ",", 
          RowBox[{"{", 
           RowBox[{"l2_", ",", "s2_"}], "}"}]}], "}"}]}], "}"}], "/;", 
      RowBox[{
       RowBox[{"l1", "===", "l2"}], "&&", 
       RowBox[{
        RowBox[{"Abs", "[", 
         RowBox[{"s2", "-", "s1"}], "]"}], "<", "6"}]}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"alliterationCoords", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"Reverse", "[", "txtCoo", "]"}], "\[LeftDoubleBracket]", 
        RowBox[{
         RowBox[{"#", "\[LeftDoubleBracket]", 
          RowBox[{"1", ",", "2", ",", "1"}], "\[RightDoubleBracket]"}], ",", 
         RowBox[{"#", "\[LeftDoubleBracket]", 
          RowBox[{"1", ",", "2", ",", "2"}], "\[RightDoubleBracket]"}]}], 
        "\[RightDoubleBracket]"}], ",", 
       RowBox[{
        RowBox[{"Reverse", "[", "txtCoo", "]"}], "\[LeftDoubleBracket]", 
        RowBox[{
         RowBox[{"#", "\[LeftDoubleBracket]", 
          RowBox[{"2", ",", "2", ",", "1"}], "\[RightDoubleBracket]"}], ",", 
         RowBox[{"#", "\[LeftDoubleBracket]", 
          RowBox[{"2", ",", "2", ",", "2"}], "\[RightDoubleBracket]"}]}], 
        "\[RightDoubleBracket]"}]}], "}"}], "&"}], "/@", 
    "alliterationClose"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"alliterationArcs", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"BezierCurve", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         "+", 
         RowBox[{"{", 
          RowBox[{"0", ",", ".1"}], "}"}]}], ",", 
        RowBox[{
         RowBox[{"Mean", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
            
            RowBox[{
            "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
           "}"}], "]"}], "+", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1.5"}], "}"}]}], ",", 
        RowBox[{
         RowBox[{"#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
         "+", 
         RowBox[{"{", 
          RowBox[{"0", ",", ".1"}], "}"}]}]}], "}"}], "]"}], "&"}], "/@", 
    "alliterationCoords"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Show", "[", 
  RowBox[{"meterGraphic", ",", 
   RowBox[{"Graphics", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Darker", "[", "Green", "]"}], ",", "alliterationArcs"}], "}"}],
     "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7715319567174177`*^9, 3.771531977959038*^9}, {
   3.7715320941065187`*^9, 3.771532112103518*^9}, {3.771532184043208*^9, 
   3.77153237092102*^9}, {3.771532463516967*^9, 3.771532550281864*^9}, {
   3.771532719582904*^9, 3.7715328025901623`*^9}, {3.7715328507170553`*^9, 
   3.771532851591267*^9}, {3.771532890010558*^9, 3.771532891904417*^9}, {
   3.771532945288817*^9, 3.771532973416876*^9}, 3.771533051989997*^9, {
   3.771533099857939*^9, 3.7715332334538603`*^9}, {3.771533268359399*^9, 
   3.771533269624151*^9}, {3.771533367871681*^9, 3.771533487850013*^9}, {
   3.771533669507875*^9, 3.771533678572612*^9}, {3.7715338420305233`*^9, 
   3.7715340517765913`*^9}, {3.7715342054764557`*^9, 3.771534238271617*^9}, {
   3.771534404358182*^9, 3.771534450968335*^9}, {3.771534494531805*^9, 
   3.771534523809149*^9}, {3.7715345758931627`*^9, 3.771534586114561*^9}, {
   3.771534721631008*^9, 3.7715347823079576`*^9}, {3.7715348308389473`*^9, 
   3.7715348699722223`*^9}, {3.77153491034509*^9, 3.771534953265482*^9}, {
   3.771567787996141*^9, 3.771567803052434*^9}, {3.771567846912483*^9, 
   3.771567855367395*^9}, {3.771568115595798*^9, 3.771568148822402*^9}, {
   3.771568180169263*^9, 3.771568204651713*^9}, {3.7715683457025433`*^9, 
   3.771568379583817*^9}, {3.771568414319502*^9, 3.771568444349721*^9}, {
   3.771568479808443*^9, 3.771568631331333*^9}, {3.77156881157813*^9, 
   3.771568842167897*^9}, 3.771568920377324*^9, {3.771568993783821*^9, 
   3.771569059692595*^9}, {3.771569256205455*^9, 3.771569257833334*^9}, {
   3.771569408221899*^9, 3.7715694109437838`*^9}, {3.771569448950672*^9, 
   3.771569561621578*^9}, {3.771569595927951*^9, 3.771569665889678*^9}, {
   3.771569749391925*^9, 3.771569751831501*^9}, {3.771569812902484*^9, 
   3.7715698151422586`*^9}, {3.771569951004895*^9, 3.771569980571879*^9}, {
   3.771570083956812*^9, 3.771570084704638*^9}, {3.771570543208808*^9, 
   3.7715705862644787`*^9}, 3.771683185656816*^9},
 CellLabel->
  "In[1951]:=",ExpressionUUID->"9cbc32ee-1c54-4bc5-b5a0-874f45420210"],

Cell[BoxData[
 GraphicsBox[{{
    {GrayLevel[0.7], 
     LineBox[{{{-5, 2.2}, {-4, 1.2}, {-3, 2.2}, {-2, 1.2}, {-1, 2.2}, {
        0, 1.2}, {
        1, 2.2}}, {{-13, 3.4}, {-12, 2.4}, {-11, 3.4}, {-10, 2.4}, {-9, 
         2.4}, {-8, 3.4}, {-7, 3.4}, {-6, 2.4}, {-5, 3.4}, {-4, 2.4}, {-3, 
         3.4}, {-2, 2.4}, {-1, 3.4}, {0, 2.4}, {
        1, 3.4}}, {{-13, 4.6}, {-12, 3.5999999999999996`}, {-11, 4.6}, {-10, 
         3.5999999999999996`}, {-9, 4.6}, {-8, 3.5999999999999996`}, {-7, 
         4.6}, {-6, 3.5999999999999996`}, {-5, 4.6}, {-4, 
         3.5999999999999996`}, {-3, 4.6}, {-2, 3.5999999999999996`}, {-1, 
         4.6}, {0, 3.5999999999999996`}, {
        1, 4.6}}, {{-13, 5.8}, {-12, 4.8}, {-11, 5.8}, {-10, 4.8}, {-9, 
         5.8}, {-8, 4.8}, {-7, 5.8}, {-6, 4.8}, {-5, 5.8}, {-4, 4.8}, {-3, 
         4.8}, {-2, 5.8}, {-1, 5.8}, {0, 4.8}, {1, 5.8}, {
        2, 4.8}}, {{-15, 7.}, {-14, 6.}, {-13, 7.}, {-12, 6.}, {-11, 
         7.}, {-10, 7.}, {-9, 6.}, {-8, 7.}, {-7, 6.}, {-6, 6.}, {-5, 
         7.}, {-4, 6.}, {-3, 7.}, {-2, 6.}, {-1, 7.}, {0, 6.}, {
        1, 7.}}, {{-13, 8.2}, {-12, 7.199999999999999}, {-11, 8.2}, {-10, 
         7.199999999999999}, {-9, 8.2}, {-8, 7.199999999999999}, {-7, 
         8.2}, {-6, 7.199999999999999}, {-5, 8.2}, {-4, 
         7.199999999999999}, {-3, 8.2}, {-2, 7.199999999999999}, {-1, 8.2}, {
        0, 7.199999999999999}, {1, 8.2}, {2, 7.199999999999999}}}]}, 
    {GrayLevel[0], 
     StyleBox[InsetBox["\<\"on\"\>", {-5, 1.7}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ly\"\>", {-4, 1.7}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"this\"\>", {-3, 1.7}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"and\"\>", {-2, 1.7}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"noth\"\>", {-1, 1.7}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ing\"\>", {0, 1.7}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"more\"\>", {1, 1.7}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"Tis\"\>", {-13, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"some\"\>", {-12, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"vis\"\>", {-11, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"i\"\>", {-10, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"tor\"\>", {-9, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"I\"\>", {-8, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"mut\"\>", {-7, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"tered\"\>", {-6, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"tap\"\>", {-5, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ping\"\>", {-4, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"at\"\>", {-3, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"my\"\>", {-2, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"cham\"\>", {-1, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ber\"\>", {0, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"door\"\>", {1, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"As\"\>", {-13, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"of\"\>", {-12, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"some\"\>", {-11, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"one\"\>", {-10, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"gen\"\>", {-9, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"tly\"\>", {-8, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"rap\"\>", {-7, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ping\"\>", {-6, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"rap\"\>", {-5, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ping\"\>", {-4, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"at\"\>", {-3, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"my\"\>", {-2, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"cham\"\>", {-1, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ber\"\>", {0, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"door\"\>", {1, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"While\"\>", {-13, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"I\"\>", {-12, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"nod\"\>", {-11, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ded\"\>", {-10, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"near\"\>", {-9, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ly\"\>", {-8, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"nap\"\>", {-7, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ping\"\>", {-6, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"sud\"\>", {-5, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"den\"\>", {-4, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ly\"\>", {-3, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"there\"\>", {-2, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"came\"\>", {-1, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"a\"\>", {0, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"tap\"\>", {1, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ping\"\>", {2, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"o\"\>", {-15, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ver\"\>", {-14, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"man\"\>", {-13, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"y\"\>", {-12, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"a\"\>", {-11, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"quaint\"\>", {-10, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"and\"\>", {-9, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"cu\"\>", {-8, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ri\"\>", {-7, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ous\"\>", {-6, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"vol\"\>", {-5, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ume\"\>", {-4, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"of\"\>", {-3, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"for\"\>", {-2, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"got\"\>", {-1, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ten\"\>", {0, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"lore\"\>", {1, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"Once\"\>", {-13, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"up\"\>", {-12, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"on\"\>", {-11, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"a\"\>", {-10, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"mid\"\>", {-9, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"night\"\>", {-8, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"drear\"\>", {-7, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"y\"\>", {-6, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"while\"\>", {-5, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"I\"\>", {-4, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"pon\"\>", {-3, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"dered\"\>", {-2, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"weak\"\>", {-1, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"and\"\>", {0, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"wea\"\>", {1, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ry\"\>", {2, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15]}}, 
   {RGBColor[0, 
     NCache[
      Rational[2, 3], 0.6666666666666666], 0], 
    BezierCurveBox[
     NCache[{{-13, 7.799999999999999}, {
       Rational[-21, 2], 9.2}, {-8, 7.799999999999999}}, {{-13, 
        7.799999999999999}, {-10.5, 9.2}, {-8, 7.799999999999999}}]], 
    BezierCurveBox[
     NCache[{{-7, 7.799999999999999}, {
       Rational[-9, 2], 9.2}, {-2, 7.799999999999999}}, {{-7, 
        7.799999999999999}, {-4.5, 9.2}, {-2, 7.799999999999999}}]], 
    BezierCurveBox[
     NCache[{{-6, 7.799999999999999}, {
       Rational[-11, 2], 9.2}, {-5, 7.799999999999999}}, {{-6, 
        7.799999999999999}, {-5.5, 9.2}, {-5, 7.799999999999999}}]], 
    BezierCurveBox[
     NCache[{{-6, 7.799999999999999}, {
       Rational[-7, 2], 9.2}, {-1, 7.799999999999999}}, {{-6, 
        7.799999999999999}, {-3.5, 9.2}, {-1, 7.799999999999999}}]], 
    BezierCurveBox[{{-5, 7.799999999999999}, {-3, 9.2}, {-1, 
       7.799999999999999}}], 
    BezierCurveBox[{{-1, 7.799999999999999}, {0, 9.2}, {
      1, 7.799999999999999}}], 
    BezierCurveBox[{{-11, 5.3999999999999995`}, {-10, 6.8}, {-9, 
       5.3999999999999995`}}], 
    BezierCurveBox[{{-11, 5.3999999999999995`}, {-9, 6.8}, {-7, 
       5.3999999999999995`}}], 
    BezierCurveBox[{{-9, 5.3999999999999995`}, {-8, 6.8}, {-7, 
       5.3999999999999995`}}], 
    BezierCurveBox[
     NCache[{{-8, 5.3999999999999995`}, {
       Rational[-11, 2], 6.8}, {-3, 5.3999999999999995`}}, {{-8, 
        5.3999999999999995`}, {-5.5, 6.8}, {-3, 5.3999999999999995`}}]], 
    BezierCurveBox[{{-7, 4.199999999999999}, {-6, 5.6}, {-5, 
       4.199999999999999}}], 
    BezierCurveBox[{{-6, 4.199999999999999}, {-5, 5.6}, {-4, 
       4.199999999999999}}], 
    BezierCurveBox[
     NCache[{{-9, 3.}, {Rational[-15, 2], 4.4}, {-6, 3.}}, {{-9, 3.}, {-7.5, 
       4.4}, {-6, 3.}}]], BezierCurveBox[{{-9, 3.}, {-7, 4.4}, {-5, 3.}}], 
    BezierCurveBox[
     NCache[{{-7, 3.}, {Rational[-9, 2], 4.4}, {-2, 3.}}, {{-7, 3.}, {-4.5, 
       4.4}, {-2, 3.}}]], 
    BezierCurveBox[
     NCache[{{-6, 3.}, {Rational[-11, 2], 4.4}, {-5, 3.}}, {{-6, 3.}, {-5.5, 
       4.4}, {-5, 3.}}]], 
    BezierCurveBox[
     NCache[{{-6, 3.}, {Rational[-7, 2], 4.4}, {-1, 3.}}, {{-6, 3.}, {-3.5, 
       4.4}, {-1, 3.}}]], BezierCurveBox[{{-5, 3.}, {-3, 4.4}, {-1, 3.}}]}},
  ImageMargins->{{10, 10}, {0, 0}},
  ImageSize->900]], "Output",
 CellChangeTimes->{
  3.771569015326322*^9, 3.7715691023448277`*^9, 3.771569521716629*^9, 
   3.771569562603853*^9, {3.771569640568088*^9, 3.771569667237857*^9}, 
   3.7715698172798157`*^9, {3.771569955570506*^9, 3.7715699818151484`*^9}, 
   3.771570086520399*^9, {3.771570559106938*^9, 3.771570588461591*^9}, 
   3.771589662093688*^9, 3.771590547623032*^9, 3.771683570348427*^9},
 CellLabel->
  "Out[1955]=",ExpressionUUID->"b779d76b-2c00-42de-b41a-bba4d8eb91f4"]
}, Open  ]],

Cell["\<\
Some alliterations ring louder than others, and we can analyze that too. If \
the alliteration is between two stressed syllables, then we hear the echo \
clearly. If not, then the echo is faint. This could be represented by line \
thickness or transparency.\
\>", "Text",
 CellChangeTimes->{{3.771526771641882*^9, 3.771526777242558*^9}, {
   3.77152807826854*^9, 3.77152808083594*^9}, 3.7715290366084137`*^9, {
   3.771534109568143*^9, 3.7715341182757053`*^9}, {3.7715708169861507`*^9, 
   3.771571029075889*^9}, {3.771603640269166*^9, 
   3.77160364618476*^9}},ExpressionUUID->"99cfc5b1-52c2-46b2-900d-\
0bffd2ab1e97"],

Cell["\<\
For consonance, which is the repetition of consonant sounds anywhere in two \
syllables, we change the code slightly.\
\>", "Text",
 CellChangeTimes->{{3.771571106292471*^9, 
  3.7715711903223963`*^9}},ExpressionUUID->"ee6a78e6-5d3a-4f40-b730-\
a99cc8576376"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"allPhonemes", "=", 
   RowBox[{"ipaChars", "/.", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
      "\"\<<\>\"", "|", "\"\<>\>\"", "|", "\"\<\:02c8\>\"", "|", 
       "\"\<\:02cc\>\""}], ")"}], "\[Rule]", "Nothing"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ipaConsonants", "=", 
   RowBox[{"Complement", "[", 
    RowBox[{"allPhonemes", ",", "ipaVowels"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"consonanceAll", "=", 
   RowBox[{"Cases", "[", 
    RowBox[{"allPairs", ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"ps1_", ",", "_"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"ps2_", ",", "_"}], "}"}]}], "}"}], "/;", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"Intersection", "[", 
         RowBox[{
          RowBox[{"Characters", "[", "ps1", "]"}], ",", 
          RowBox[{"Characters", "[", "ps2", "]"}], ",", "ipaConsonants"}], 
         "]"}], "]"}], ">", "0"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"consonanceClose", "=", 
   RowBox[{"Cases", "[", 
    RowBox[{"consonanceAll", ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"_", ",", 
          RowBox[{"{", 
           RowBox[{"l1_", ",", "s1_"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"_", ",", 
          RowBox[{"{", 
           RowBox[{"l2_", ",", "s2_"}], "}"}]}], "}"}]}], "}"}], "/;", 
      RowBox[{
       RowBox[{"l1", "===", "l2"}], "&&", 
       RowBox[{
        RowBox[{"Abs", "[", 
         RowBox[{"s2", "-", "s1"}], "]"}], "<", "4"}]}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"consonanceCoords", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"Reverse", "[", "txtCoo", "]"}], "\[LeftDoubleBracket]", 
        RowBox[{
         RowBox[{"#", "\[LeftDoubleBracket]", 
          RowBox[{"1", ",", "2", ",", "1"}], "\[RightDoubleBracket]"}], ",", 
         RowBox[{"#", "\[LeftDoubleBracket]", 
          RowBox[{"1", ",", "2", ",", "2"}], "\[RightDoubleBracket]"}]}], 
        "\[RightDoubleBracket]"}], ",", 
       RowBox[{
        RowBox[{"Reverse", "[", "txtCoo", "]"}], "\[LeftDoubleBracket]", 
        RowBox[{
         RowBox[{"#", "\[LeftDoubleBracket]", 
          RowBox[{"2", ",", "2", ",", "1"}], "\[RightDoubleBracket]"}], ",", 
         RowBox[{"#", "\[LeftDoubleBracket]", 
          RowBox[{"2", ",", "2", ",", "2"}], "\[RightDoubleBracket]"}]}], 
        "\[RightDoubleBracket]"}]}], "}"}], "&"}], "/@", 
    "consonanceClose"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"consonanceArcs", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"BezierCurve", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         "+", 
         RowBox[{"{", 
          RowBox[{"0", ",", ".1"}], "}"}]}], ",", 
        RowBox[{
         RowBox[{"Mean", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
            
            RowBox[{
            "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
           "}"}], "]"}], "+", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1.5"}], "}"}]}], ",", 
        RowBox[{
         RowBox[{"#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
         "+", 
         RowBox[{"{", 
          RowBox[{"0", ",", ".1"}], "}"}]}]}], "}"}], "]"}], "&"}], "/@", 
    "consonanceCoords"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Show", "[", 
  RowBox[{"meterGraphic", ",", 
   RowBox[{"Graphics", "[", 
    RowBox[{"{", 
     RowBox[{"Purple", ",", "consonanceArcs"}], "}"}], "]"}]}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.771445096218667*^9, 3.771445152438294*^9}, {
   3.771571211318969*^9, 3.771571301501359*^9}, {3.7715754487355413`*^9, 
   3.771575642624419*^9}, {3.771575678609951*^9, 3.771575682939066*^9}, {
   3.7715757263785458`*^9, 3.771575743251877*^9}, 3.771575797367219*^9, {
   3.7715758633165407`*^9, 3.771575878787593*^9}, {3.771576133129719*^9, 
   3.7715761462584887`*^9}, {3.771576182929119*^9, 3.771576186670238*^9}, {
   3.771576589958218*^9, 3.771576660572452*^9}, {3.7715768758516827`*^9, 
   3.771576943968073*^9}, {3.771576999480036*^9, 3.771577042088278*^9}, 
   3.771577083724036*^9, {3.771577169356139*^9, 3.771577177345544*^9}, {
   3.771578512416561*^9, 3.7715785306006203`*^9}, 3.771579683383808*^9, 
   3.771683206174691*^9},
 CellLabel->
  "In[1956]:=",ExpressionUUID->"3ccb344b-f204-4a1d-a226-23a539efed1b"],

Cell[BoxData[
 GraphicsBox[{{
    {GrayLevel[0.7], 
     LineBox[{{{-5, 2.2}, {-4, 1.2}, {-3, 2.2}, {-2, 1.2}, {-1, 2.2}, {
        0, 1.2}, {
        1, 2.2}}, {{-13, 3.4}, {-12, 2.4}, {-11, 3.4}, {-10, 2.4}, {-9, 
         2.4}, {-8, 3.4}, {-7, 3.4}, {-6, 2.4}, {-5, 3.4}, {-4, 2.4}, {-3, 
         3.4}, {-2, 2.4}, {-1, 3.4}, {0, 2.4}, {
        1, 3.4}}, {{-13, 4.6}, {-12, 3.5999999999999996`}, {-11, 4.6}, {-10, 
         3.5999999999999996`}, {-9, 4.6}, {-8, 3.5999999999999996`}, {-7, 
         4.6}, {-6, 3.5999999999999996`}, {-5, 4.6}, {-4, 
         3.5999999999999996`}, {-3, 4.6}, {-2, 3.5999999999999996`}, {-1, 
         4.6}, {0, 3.5999999999999996`}, {
        1, 4.6}}, {{-13, 5.8}, {-12, 4.8}, {-11, 5.8}, {-10, 4.8}, {-9, 
         5.8}, {-8, 4.8}, {-7, 5.8}, {-6, 4.8}, {-5, 5.8}, {-4, 4.8}, {-3, 
         4.8}, {-2, 5.8}, {-1, 5.8}, {0, 4.8}, {1, 5.8}, {
        2, 4.8}}, {{-15, 7.}, {-14, 6.}, {-13, 7.}, {-12, 6.}, {-11, 
         7.}, {-10, 7.}, {-9, 6.}, {-8, 7.}, {-7, 6.}, {-6, 6.}, {-5, 
         7.}, {-4, 6.}, {-3, 7.}, {-2, 6.}, {-1, 7.}, {0, 6.}, {
        1, 7.}}, {{-13, 8.2}, {-12, 7.199999999999999}, {-11, 8.2}, {-10, 
         7.199999999999999}, {-9, 8.2}, {-8, 7.199999999999999}, {-7, 
         8.2}, {-6, 7.199999999999999}, {-5, 8.2}, {-4, 
         7.199999999999999}, {-3, 8.2}, {-2, 7.199999999999999}, {-1, 8.2}, {
        0, 7.199999999999999}, {1, 8.2}, {2, 7.199999999999999}}}]}, 
    {GrayLevel[0], 
     StyleBox[InsetBox["\<\"on\"\>", {-5, 1.7}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ly\"\>", {-4, 1.7}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"this\"\>", {-3, 1.7}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"and\"\>", {-2, 1.7}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"noth\"\>", {-1, 1.7}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ing\"\>", {0, 1.7}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"more\"\>", {1, 1.7}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"Tis\"\>", {-13, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"some\"\>", {-12, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"vis\"\>", {-11, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"i\"\>", {-10, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"tor\"\>", {-9, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"I\"\>", {-8, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"mut\"\>", {-7, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"tered\"\>", {-6, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"tap\"\>", {-5, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ping\"\>", {-4, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"at\"\>", {-3, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"my\"\>", {-2, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"cham\"\>", {-1, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ber\"\>", {0, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"door\"\>", {1, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"As\"\>", {-13, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"of\"\>", {-12, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"some\"\>", {-11, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"one\"\>", {-10, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"gen\"\>", {-9, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"tly\"\>", {-8, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"rap\"\>", {-7, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ping\"\>", {-6, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"rap\"\>", {-5, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ping\"\>", {-4, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"at\"\>", {-3, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"my\"\>", {-2, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"cham\"\>", {-1, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ber\"\>", {0, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"door\"\>", {1, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"While\"\>", {-13, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"I\"\>", {-12, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"nod\"\>", {-11, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ded\"\>", {-10, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"near\"\>", {-9, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ly\"\>", {-8, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"nap\"\>", {-7, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ping\"\>", {-6, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"sud\"\>", {-5, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"den\"\>", {-4, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ly\"\>", {-3, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"there\"\>", {-2, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"came\"\>", {-1, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"a\"\>", {0, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"tap\"\>", {1, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ping\"\>", {2, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"o\"\>", {-15, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ver\"\>", {-14, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"man\"\>", {-13, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"y\"\>", {-12, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"a\"\>", {-11, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"quaint\"\>", {-10, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"and\"\>", {-9, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"cu\"\>", {-8, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ri\"\>", {-7, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ous\"\>", {-6, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"vol\"\>", {-5, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ume\"\>", {-4, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"of\"\>", {-3, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"for\"\>", {-2, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"got\"\>", {-1, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ten\"\>", {0, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"lore\"\>", {1, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"Once\"\>", {-13, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"up\"\>", {-12, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"on\"\>", {-11, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"a\"\>", {-10, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"mid\"\>", {-9, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"night\"\>", {-8, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"drear\"\>", {-7, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"y\"\>", {-6, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"while\"\>", {-5, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"I\"\>", {-4, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"pon\"\>", {-3, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"dered\"\>", {-2, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"weak\"\>", {-1, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"and\"\>", {0, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"wea\"\>", {1, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ry\"\>", {2, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15]}}, 
   {RGBColor[0.5, 0, 0.5], 
    BezierCurveBox[{{-13, 7.799999999999999}, {-12, 9.2}, {-11, 
       7.799999999999999}}], 
    BezierCurveBox[
     NCache[{{-11, 7.799999999999999}, {
       Rational[-19, 2], 9.2}, {-8, 7.799999999999999}}, {{-11, 
        7.799999999999999}, {-9.5, 9.2}, {-8, 7.799999999999999}}]], 
    BezierCurveBox[{{-9, 7.799999999999999}, {-8, 9.2}, {-7, 
       7.799999999999999}}], 
    BezierCurveBox[
     NCache[{{-7, 7.799999999999999}, {
       Rational[-11, 2], 9.2}, {-4, 7.799999999999999}}, {{-7, 
        7.799999999999999}, {-5.5, 9.2}, {-4, 7.799999999999999}}]], 
    BezierCurveBox[
     NCache[{{-6, 7.799999999999999}, {
       Rational[-11, 2], 9.2}, {-5, 7.799999999999999}}, {{-6, 
        7.799999999999999}, {-5.5, 9.2}, {-5, 7.799999999999999}}]], 
    BezierCurveBox[{{-4, 7.799999999999999}, {-3, 9.2}, {-2, 
       7.799999999999999}}], 
    BezierCurveBox[
     NCache[{{-3, 7.799999999999999}, {Rational[-3, 2], 9.2}, {
       0, 7.799999999999999}}, {{-3, 7.799999999999999}, {-1.5, 9.2}, {
       0, 7.799999999999999}}]], 
    BezierCurveBox[{{-2, 7.799999999999999}, {-1, 9.2}, {
      0, 7.799999999999999}}], 
    BezierCurveBox[{{-1, 7.799999999999999}, {0, 9.2}, {
      1, 7.799999999999999}}], 
    BezierCurveBox[
     NCache[{{-13, 6.6}, {
       Rational[-23, 2], 8.}, {-10, 6.6}}, {{-13, 6.6}, {-11.5, 
       8.}, {-10, 6.6}}]], 
    BezierCurveBox[{{-12, 6.6}, {-11, 8.}, {-10, 6.6}}], 
    BezierCurveBox[
     NCache[{{-10, 6.6}, {
       Rational[-19, 2], 8.}, {-9, 6.6}}, {{-10, 6.6}, {-9.5, 
       8.}, {-9, 6.6}}]], 
    BezierCurveBox[
     NCache[{{-9, 6.6}, {Rational[-17, 2], 8.}, {-8, 6.6}}, {{-9, 6.6}, {-8.5,
        8.}, {-8, 6.6}}]], 
    BezierCurveBox[
     NCache[{{-9, 6.6}, {Rational[-15, 2], 8.}, {-6, 6.6}}, {{-9, 6.6}, {-7.5,
        8.}, {-6, 6.6}}]], BezierCurveBox[{{-8, 6.6}, {-7, 8.}, {-6, 6.6}}], 
    BezierCurveBox[{{-5, 6.6}, {-4, 8.}, {-3, 6.6}}], 
    BezierCurveBox[
     NCache[{{-2, 6.6}, {Rational[-1, 2], 8.}, {1, 6.6}}, {{-2, 6.6}, {-0.5, 
       8.}, {1, 6.6}}]], 
    BezierCurveBox[
     NCache[{{-1, 6.6}, {Rational[-1, 2], 8.}, {0, 6.6}}, {{-1, 6.6}, {-0.5, 
       8.}, {0, 6.6}}]], 
    BezierCurveBox[
     NCache[{{-12, 5.3999999999999995`}, {
       Rational[-21, 2], 6.8}, {-9, 5.3999999999999995`}}, {{-12, 
        5.3999999999999995`}, {-10.5, 6.8}, {-9, 5.3999999999999995`}}]], 
    BezierCurveBox[
     NCache[{{-11, 5.3999999999999995`}, {
       Rational[-21, 2], 6.8}, {-10, 5.3999999999999995`}}, {{-11, 
        5.3999999999999995`}, {-10.5, 6.8}, {-10, 5.3999999999999995`}}]], 
    BezierCurveBox[{{-11, 5.3999999999999995`}, {-10, 6.8}, {-9, 
       5.3999999999999995`}}], 
    BezierCurveBox[{{-9, 5.3999999999999995`}, {-8, 6.8}, {-7, 
       5.3999999999999995`}}], 
    BezierCurveBox[
     NCache[{{-7, 5.3999999999999995`}, {
       Rational[-13, 2], 6.8}, {-6, 5.3999999999999995`}}, {{-7, 
        5.3999999999999995`}, {-6.5, 6.8}, {-6, 5.3999999999999995`}}]], 
    BezierCurveBox[
     NCache[{{-7, 5.3999999999999995`}, {
       Rational[-11, 2], 6.8}, {-4, 5.3999999999999995`}}, {{-7, 
        5.3999999999999995`}, {-5.5, 6.8}, {-4, 5.3999999999999995`}}]], 
    BezierCurveBox[
     NCache[{{-5, 5.3999999999999995`}, {
       Rational[-9, 2], 6.8}, {-4, 5.3999999999999995`}}, {{-5, 
        5.3999999999999995`}, {-4.5, 6.8}, {-4, 5.3999999999999995`}}]], 
    BezierCurveBox[
     NCache[{{1, 5.3999999999999995`}, {Rational[3, 2], 6.8}, {
       2, 5.3999999999999995`}}, {{1, 5.3999999999999995`}, {1.5, 6.8}, {
       2, 5.3999999999999995`}}]], 
    BezierCurveBox[
     NCache[{{-13, 4.199999999999999}, {
       Rational[-23, 2], 5.6}, {-10, 4.199999999999999}}, {{-13, 
        4.199999999999999}, {-11.5, 5.6}, {-10, 4.199999999999999}}]], 
    BezierCurveBox[
     NCache[{{-10, 4.199999999999999}, {
       Rational[-19, 2], 5.6}, {-9, 4.199999999999999}}, {{-10, 
        4.199999999999999}, {-9.5, 5.6}, {-9, 4.199999999999999}}]], 
    BezierCurveBox[
     NCache[{{-9, 4.199999999999999}, {
       Rational[-17, 2], 5.6}, {-8, 4.199999999999999}}, {{-9, 
        4.199999999999999}, {-8.5, 5.6}, {-8, 4.199999999999999}}]], 
    BezierCurveBox[
     NCache[{{-7, 4.199999999999999}, {
       Rational[-13, 2], 5.6}, {-6, 4.199999999999999}}, {{-7, 
        4.199999999999999}, {-6.5, 5.6}, {-6, 4.199999999999999}}]], 
    BezierCurveBox[{{-7, 4.199999999999999}, {-6, 5.6}, {-5, 
       4.199999999999999}}], 
    BezierCurveBox[
     NCache[{{-7, 4.199999999999999}, {
       Rational[-11, 2], 5.6}, {-4, 4.199999999999999}}, {{-7, 
        4.199999999999999}, {-5.5, 5.6}, {-4, 4.199999999999999}}]], 
    BezierCurveBox[
     NCache[{{-6, 4.199999999999999}, {
       Rational[-11, 2], 5.6}, {-5, 4.199999999999999}}, {{-6, 
        4.199999999999999}, {-5.5, 5.6}, {-5, 4.199999999999999}}]], 
    BezierCurveBox[{{-6, 4.199999999999999}, {-5, 5.6}, {-4, 
       4.199999999999999}}], 
    BezierCurveBox[
     NCache[{{-5, 4.199999999999999}, {
       Rational[-9, 2], 5.6}, {-4, 4.199999999999999}}, {{-5, 
        4.199999999999999}, {-4.5, 5.6}, {-4, 4.199999999999999}}]], 
    BezierCurveBox[{{-3, 4.199999999999999}, {-2, 5.6}, {-1, 
       4.199999999999999}}], 
    BezierCurveBox[
     NCache[{{-2, 4.199999999999999}, {
       Rational[-3, 2], 5.6}, {-1, 4.199999999999999}}, {{-2, 
        4.199999999999999}, {-1.5, 5.6}, {-1, 4.199999999999999}}]], 
    BezierCurveBox[
     NCache[{{-13, 3.}, {
       Rational[-25, 2], 4.4}, {-12, 3.}}, {{-13, 3.}, {-12.5, 
       4.4}, {-12, 3.}}]], BezierCurveBox[{{-13, 3.}, {-12, 4.4}, {-11, 3.}}],
     BezierCurveBox[
     NCache[{{-12, 3.}, {
       Rational[-23, 2], 4.4}, {-11, 3.}}, {{-12, 3.}, {-11.5, 
       4.4}, {-11, 3.}}]], 
    BezierCurveBox[
     NCache[{{-9, 3.}, {Rational[-17, 2], 4.4}, {-8, 3.}}, {{-9, 3.}, {-8.5, 
       4.4}, {-8, 3.}}]], BezierCurveBox[{{-9, 3.}, {-8, 4.4}, {-7, 3.}}], 
    BezierCurveBox[
     NCache[{{-9, 3.}, {Rational[-15, 2], 4.4}, {-6, 3.}}, {{-9, 3.}, {-7.5, 
       4.4}, {-6, 3.}}]], BezierCurveBox[{{-8, 3.}, {-7, 4.4}, {-6, 3.}}], 
    BezierCurveBox[
     NCache[{{-7, 3.}, {Rational[-13, 2], 4.4}, {-6, 3.}}, {{-7, 3.}, {-6.5, 
       4.4}, {-6, 3.}}]], BezierCurveBox[{{-7, 3.}, {-6, 4.4}, {-5, 3.}}], 
    BezierCurveBox[
     NCache[{{-6, 3.}, {Rational[-11, 2], 4.4}, {-5, 3.}}, {{-6, 3.}, {-5.5, 
       4.4}, {-5, 3.}}]], 
    BezierCurveBox[
     NCache[{{-6, 3.}, {Rational[-9, 2], 4.4}, {-3, 3.}}, {{-6, 3.}, {-4.5, 
       4.4}, {-3, 3.}}]], 
    BezierCurveBox[
     NCache[{{-5, 3.}, {Rational[-9, 2], 4.4}, {-4, 3.}}, {{-5, 3.}, {-4.5, 
       4.4}, {-4, 3.}}]], BezierCurveBox[{{-5, 3.}, {-4, 4.4}, {-3, 3.}}], 
    BezierCurveBox[{{-3, 3.}, {-2, 4.4}, {-1, 3.}}], 
    BezierCurveBox[
     NCache[{{-2, 3.}, {Rational[-3, 2], 4.4}, {-1, 3.}}, {{-2, 3.}, {-1.5, 
       4.4}, {-1, 3.}}]], 
    BezierCurveBox[
     NCache[{{-5, 1.8}, {Rational[-7, 2], 3.2}, {-2, 1.8}}, {{-5, 1.8}, {-3.5,
        3.2}, {-2, 1.8}}]], 
    BezierCurveBox[
     NCache[{{-2, 1.8}, {Rational[-3, 2], 3.2}, {-1, 1.8}}, {{-2, 1.8}, {-1.5,
        3.2}, {-1, 1.8}}]]}},
  ImageMargins->{{10, 10}, {0, 0}},
  ImageSize->900]], "Output",
 CellChangeTimes->{3.771577088101798*^9, 3.771577184104417*^9, 
  3.771578532894332*^9, 3.771579685123266*^9, 3.771589682042696*^9, 
  3.771590558771674*^9, 3.771683570412445*^9},
 CellLabel->
  "Out[1962]=",ExpressionUUID->"f564bebd-e74b-4e66-af45-7db1d1b1aff3"]
}, Open  ]],

Cell["\<\
And again for assonance, the echo of vowel sounds, the code is slightly \
different.\
\>", "Text",
 CellChangeTimes->{{3.771445168365431*^9, 3.77144519661854*^9}, {
  3.771445247360746*^9, 3.771445448491578*^9}, {3.771579973171626*^9, 
  3.771580001643482*^9}},ExpressionUUID->"2a0887aa-5ba4-47bb-975e-\
bad968ee646c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"assonanceAll", "=", 
   RowBox[{"Cases", "[", 
    RowBox[{"allPairs", ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"ps1_", ",", "_"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"ps2_", ",", "_"}], "}"}]}], "}"}], "/;", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"Intersection", "[", 
         RowBox[{
          RowBox[{"Characters", "[", "ps1", "]"}], ",", 
          RowBox[{"Characters", "[", "ps2", "]"}], ",", "ipaVowels"}], "]"}], 
        "]"}], ">", "0"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"assonanceClose", "=", 
   RowBox[{"Cases", "[", 
    RowBox[{"assonanceAll", ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"_", ",", 
          RowBox[{"{", 
           RowBox[{"l1_", ",", "s1_"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"_", ",", 
          RowBox[{"{", 
           RowBox[{"l2_", ",", "s2_"}], "}"}]}], "}"}]}], "}"}], "/;", 
      RowBox[{
       RowBox[{"l1", "===", "l2"}], "&&", 
       RowBox[{
        RowBox[{"Abs", "[", 
         RowBox[{"s2", "-", "s1"}], "]"}], "<", "4"}]}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"assonanceCoords", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"Reverse", "[", "txtCoo", "]"}], "\[LeftDoubleBracket]", 
        RowBox[{
         RowBox[{"#", "\[LeftDoubleBracket]", 
          RowBox[{"1", ",", "2", ",", "1"}], "\[RightDoubleBracket]"}], ",", 
         RowBox[{"#", "\[LeftDoubleBracket]", 
          RowBox[{"1", ",", "2", ",", "2"}], "\[RightDoubleBracket]"}]}], 
        "\[RightDoubleBracket]"}], ",", 
       RowBox[{
        RowBox[{"Reverse", "[", "txtCoo", "]"}], "\[LeftDoubleBracket]", 
        RowBox[{
         RowBox[{"#", "\[LeftDoubleBracket]", 
          RowBox[{"2", ",", "2", ",", "1"}], "\[RightDoubleBracket]"}], ",", 
         RowBox[{"#", "\[LeftDoubleBracket]", 
          RowBox[{"2", ",", "2", ",", "2"}], "\[RightDoubleBracket]"}]}], 
        "\[RightDoubleBracket]"}]}], "}"}], "&"}], "/@", "assonanceClose"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"assonanceArcs", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"BezierCurve", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         "+", 
         RowBox[{"{", 
          RowBox[{"0", ",", ".1"}], "}"}]}], ",", 
        RowBox[{
         RowBox[{"Mean", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
            
            RowBox[{
            "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
           "}"}], "]"}], "+", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1.5"}], "}"}]}], ",", 
        RowBox[{
         RowBox[{"#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
         "+", 
         RowBox[{"{", 
          RowBox[{"0", ",", ".1"}], "}"}]}]}], "}"}], "]"}], "&"}], "/@", 
    "assonanceCoords"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Show", "[", 
  RowBox[{"meterGraphic", ",", 
   RowBox[{"Graphics", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Darker", "[", "Orange", "]"}], ",", "assonanceArcs"}], "}"}], 
    "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.771445482565741*^9, 3.771445503658827*^9}, 
   3.771580118245882*^9, {3.771580738666772*^9, 3.771580840945635*^9}, {
   3.771582543555953*^9, 3.771582545802566*^9}, {3.7715826219735537`*^9, 
   3.7715826279403257`*^9}, 3.771683220694037*^9},
 CellLabel->
  "In[1963]:=",ExpressionUUID->"c26784f3-6f42-4e7f-a358-2556bf7befd1"],

Cell[BoxData[
 GraphicsBox[{{
    {GrayLevel[0.7], 
     LineBox[{{{-5, 2.2}, {-4, 1.2}, {-3, 2.2}, {-2, 1.2}, {-1, 2.2}, {
        0, 1.2}, {
        1, 2.2}}, {{-13, 3.4}, {-12, 2.4}, {-11, 3.4}, {-10, 2.4}, {-9, 
         2.4}, {-8, 3.4}, {-7, 3.4}, {-6, 2.4}, {-5, 3.4}, {-4, 2.4}, {-3, 
         3.4}, {-2, 2.4}, {-1, 3.4}, {0, 2.4}, {
        1, 3.4}}, {{-13, 4.6}, {-12, 3.5999999999999996`}, {-11, 4.6}, {-10, 
         3.5999999999999996`}, {-9, 4.6}, {-8, 3.5999999999999996`}, {-7, 
         4.6}, {-6, 3.5999999999999996`}, {-5, 4.6}, {-4, 
         3.5999999999999996`}, {-3, 4.6}, {-2, 3.5999999999999996`}, {-1, 
         4.6}, {0, 3.5999999999999996`}, {
        1, 4.6}}, {{-13, 5.8}, {-12, 4.8}, {-11, 5.8}, {-10, 4.8}, {-9, 
         5.8}, {-8, 4.8}, {-7, 5.8}, {-6, 4.8}, {-5, 5.8}, {-4, 4.8}, {-3, 
         4.8}, {-2, 5.8}, {-1, 5.8}, {0, 4.8}, {1, 5.8}, {
        2, 4.8}}, {{-15, 7.}, {-14, 6.}, {-13, 7.}, {-12, 6.}, {-11, 
         7.}, {-10, 7.}, {-9, 6.}, {-8, 7.}, {-7, 6.}, {-6, 6.}, {-5, 
         7.}, {-4, 6.}, {-3, 7.}, {-2, 6.}, {-1, 7.}, {0, 6.}, {
        1, 7.}}, {{-13, 8.2}, {-12, 7.199999999999999}, {-11, 8.2}, {-10, 
         7.199999999999999}, {-9, 8.2}, {-8, 7.199999999999999}, {-7, 
         8.2}, {-6, 7.199999999999999}, {-5, 8.2}, {-4, 
         7.199999999999999}, {-3, 8.2}, {-2, 7.199999999999999}, {-1, 8.2}, {
        0, 7.199999999999999}, {1, 8.2}, {2, 7.199999999999999}}}]}, 
    {GrayLevel[0], 
     StyleBox[InsetBox["\<\"on\"\>", {-5, 1.7}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ly\"\>", {-4, 1.7}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"this\"\>", {-3, 1.7}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"and\"\>", {-2, 1.7}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"noth\"\>", {-1, 1.7}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ing\"\>", {0, 1.7}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"more\"\>", {1, 1.7}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"Tis\"\>", {-13, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"some\"\>", {-12, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"vis\"\>", {-11, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"i\"\>", {-10, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"tor\"\>", {-9, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"I\"\>", {-8, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"mut\"\>", {-7, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"tered\"\>", {-6, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"tap\"\>", {-5, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ping\"\>", {-4, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"at\"\>", {-3, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"my\"\>", {-2, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"cham\"\>", {-1, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ber\"\>", {0, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"door\"\>", {1, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"As\"\>", {-13, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"of\"\>", {-12, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"some\"\>", {-11, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"one\"\>", {-10, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"gen\"\>", {-9, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"tly\"\>", {-8, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"rap\"\>", {-7, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ping\"\>", {-6, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"rap\"\>", {-5, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ping\"\>", {-4, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"at\"\>", {-3, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"my\"\>", {-2, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"cham\"\>", {-1, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ber\"\>", {0, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"door\"\>", {1, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"While\"\>", {-13, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"I\"\>", {-12, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"nod\"\>", {-11, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ded\"\>", {-10, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"near\"\>", {-9, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ly\"\>", {-8, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"nap\"\>", {-7, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ping\"\>", {-6, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"sud\"\>", {-5, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"den\"\>", {-4, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ly\"\>", {-3, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"there\"\>", {-2, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"came\"\>", {-1, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"a\"\>", {0, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"tap\"\>", {1, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ping\"\>", {2, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"o\"\>", {-15, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ver\"\>", {-14, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"man\"\>", {-13, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"y\"\>", {-12, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"a\"\>", {-11, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"quaint\"\>", {-10, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"and\"\>", {-9, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"cu\"\>", {-8, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ri\"\>", {-7, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ous\"\>", {-6, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"vol\"\>", {-5, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ume\"\>", {-4, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"of\"\>", {-3, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"for\"\>", {-2, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"got\"\>", {-1, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ten\"\>", {0, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"lore\"\>", {1, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"Once\"\>", {-13, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"up\"\>", {-12, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"on\"\>", {-11, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"a\"\>", {-10, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"mid\"\>", {-9, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"night\"\>", {-8, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"drear\"\>", {-7, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"y\"\>", {-6, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"while\"\>", {-5, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"I\"\>", {-4, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"pon\"\>", {-3, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"dered\"\>", {-2, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"weak\"\>", {-1, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"and\"\>", {0, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"wea\"\>", {1, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ry\"\>", {2, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15]}}, 
   {RGBColor[
     NCache[
      Rational[2, 3], 0.6666666666666666], 0.33333333333333337`, 0], 
    BezierCurveBox[
     NCache[{{-9, 7.799999999999999}, {
       Rational[-17, 2], 9.2}, {-8, 7.799999999999999}}, {{-9, 
        7.799999999999999}, {-8.5, 9.2}, {-8, 7.799999999999999}}]], 
    BezierCurveBox[{{-9, 7.799999999999999}, {-8, 9.2}, {-7, 
       7.799999999999999}}], 
    BezierCurveBox[
     NCache[{{-9, 7.799999999999999}, {
       Rational[-15, 2], 9.2}, {-6, 7.799999999999999}}, {{-9, 
        7.799999999999999}, {-7.5, 9.2}, {-6, 7.799999999999999}}]], 
    BezierCurveBox[
     NCache[{{-8, 7.799999999999999}, {
       Rational[-15, 2], 9.2}, {-7, 7.799999999999999}}, {{-8, 
        7.799999999999999}, {-7.5, 9.2}, {-7, 7.799999999999999}}]], 
    BezierCurveBox[{{-8, 7.799999999999999}, {-7, 9.2}, {-6, 
       7.799999999999999}}], 
    BezierCurveBox[
     NCache[{{-8, 7.799999999999999}, {
       Rational[-13, 2], 9.2}, {-5, 7.799999999999999}}, {{-8, 
        7.799999999999999}, {-6.5, 9.2}, {-5, 7.799999999999999}}]], 
    BezierCurveBox[
     NCache[{{-7, 7.799999999999999}, {
       Rational[-13, 2], 9.2}, {-6, 7.799999999999999}}, {{-7, 
        7.799999999999999}, {-6.5, 9.2}, {-6, 7.799999999999999}}]], 
    BezierCurveBox[{{-7, 7.799999999999999}, {-6, 9.2}, {-5, 
       7.799999999999999}}], 
    BezierCurveBox[
     NCache[{{-6, 7.799999999999999}, {
       Rational[-11, 2], 9.2}, {-5, 7.799999999999999}}, {{-6, 
        7.799999999999999}, {-5.5, 9.2}, {-5, 7.799999999999999}}]], 
    BezierCurveBox[
     NCache[{{-4, 7.799999999999999}, {
       Rational[-7, 2], 9.2}, {-3, 7.799999999999999}}, {{-4, 
        7.799999999999999}, {-3.5, 9.2}, {-3, 7.799999999999999}}]], 
    BezierCurveBox[{{-1, 7.799999999999999}, {0, 9.2}, {
      1, 7.799999999999999}}], 
    BezierCurveBox[{{-12, 6.6}, {-11, 8.}, {-10, 6.6}}], 
    BezierCurveBox[
     NCache[{{-10, 6.6}, {
       Rational[-17, 2], 8.}, {-7, 6.6}}, {{-10, 6.6}, {-8.5, 
       8.}, {-7, 6.6}}]], 
    BezierCurveBox[
     NCache[{{-8, 6.6}, {Rational[-13, 2], 8.}, {-5, 6.6}}, {{-8, 6.6}, {-6.5,
        8.}, {-5, 6.6}}]], 
    BezierCurveBox[
     NCache[{{-5, 6.6}, {Rational[-7, 2], 8.}, {-2, 6.6}}, {{-5, 6.6}, {-3.5, 
       8.}, {-2, 6.6}}]], 
    BezierCurveBox[
     NCache[{{-2, 6.6}, {Rational[-1, 2], 8.}, {1, 6.6}}, {{-2, 6.6}, {-0.5, 
       8.}, {1, 6.6}}]], 
    BezierCurveBox[
     NCache[{{-12, 5.3999999999999995`}, {
       Rational[-23, 2], 6.8}, {-11, 5.3999999999999995`}}, {{-12, 
        5.3999999999999995`}, {-11.5, 6.8}, {-11, 5.3999999999999995`}}]], 
    BezierCurveBox[
     NCache[{{-9, 5.3999999999999995`}, {
       Rational[-17, 2], 6.8}, {-8, 5.3999999999999995`}}, {{-9, 
        5.3999999999999995`}, {-8.5, 6.8}, {-8, 5.3999999999999995`}}]], 
    BezierCurveBox[
     NCache[{{-9, 5.3999999999999995`}, {
       Rational[-15, 2], 6.8}, {-6, 5.3999999999999995`}}, {{-9, 
        5.3999999999999995`}, {-7.5, 6.8}, {-6, 5.3999999999999995`}}]], 
    BezierCurveBox[{{-8, 5.3999999999999995`}, {-7, 6.8}, {-6, 
       5.3999999999999995`}}], 
    BezierCurveBox[
     NCache[{{-6, 5.3999999999999995`}, {
       Rational[-9, 2], 6.8}, {-3, 5.3999999999999995`}}, {{-6, 
        5.3999999999999995`}, {-4.5, 6.8}, {-3, 5.3999999999999995`}}]], 
    BezierCurveBox[{{-4, 5.3999999999999995`}, {-3, 6.8}, {-2, 
       5.3999999999999995`}}], 
    BezierCurveBox[{{-3, 5.3999999999999995`}, {-2, 6.8}, {-1, 
       5.3999999999999995`}}], 
    BezierCurveBox[
     NCache[{{-1, 5.3999999999999995`}, {Rational[1, 2], 6.8}, {
       2, 5.3999999999999995`}}, {{-1, 5.3999999999999995`}, {0.5, 6.8}, {
       2, 5.3999999999999995`}}]], 
    BezierCurveBox[
     NCache[{{-12, 4.199999999999999}, {
       Rational[-23, 2], 5.6}, {-11, 4.199999999999999}}, {{-12, 
        4.199999999999999}, {-11.5, 5.6}, {-11, 4.199999999999999}}]], 
    BezierCurveBox[{{-12, 4.199999999999999}, {-11, 5.6}, {-10, 
       4.199999999999999}}], 
    BezierCurveBox[
     NCache[{{-11, 4.199999999999999}, {
       Rational[-21, 2], 5.6}, {-10, 4.199999999999999}}, {{-11, 
        4.199999999999999}, {-10.5, 5.6}, {-10, 4.199999999999999}}]], 
    BezierCurveBox[
     NCache[{{-9, 4.199999999999999}, {
       Rational[-17, 2], 5.6}, {-8, 4.199999999999999}}, {{-9, 
        4.199999999999999}, {-8.5, 5.6}, {-8, 4.199999999999999}}]], 
    BezierCurveBox[{{-7, 4.199999999999999}, {-6, 5.6}, {-5, 
       4.199999999999999}}], 
    BezierCurveBox[{{-6, 4.199999999999999}, {-5, 5.6}, {-4, 
       4.199999999999999}}], 
    BezierCurveBox[{{-5, 4.199999999999999}, {-4, 5.6}, {-3, 
       4.199999999999999}}], 
    BezierCurveBox[{{-4, 4.199999999999999}, {-3, 5.6}, {-2, 
       4.199999999999999}}], 
    BezierCurveBox[{{-3, 4.199999999999999}, {-2, 5.6}, {-1, 
       4.199999999999999}}], 
    BezierCurveBox[{{-13, 3.}, {-12, 4.4}, {-11, 3.}}], 
    BezierCurveBox[
     NCache[{{-13, 3.}, {
       Rational[-23, 2], 4.4}, {-10, 3.}}, {{-13, 3.}, {-11.5, 
       4.4}, {-10, 3.}}]], 
    BezierCurveBox[
     NCache[{{-11, 3.}, {
       Rational[-21, 2], 4.4}, {-10, 3.}}, {{-11, 3.}, {-10.5, 
       4.4}, {-10, 3.}}]], BezierCurveBox[{{-5, 3.}, {-4, 4.4}, {-3, 3.}}], 
    BezierCurveBox[{{-4, 3.}, {-3, 4.4}, {-2, 3.}}], 
    BezierCurveBox[{{-3, 3.}, {-2, 4.4}, {-1, 3.}}], 
    BezierCurveBox[
     NCache[{{-4, 1.8}, {Rational[-7, 2], 3.2}, {-3, 1.8}}, {{-4, 1.8}, {-3.5,
        3.2}, {-3, 1.8}}]], 
    BezierCurveBox[
     NCache[{{-3, 1.8}, {Rational[-3, 2], 3.2}, {0, 1.8}}, {{-3, 1.8}, {-1.5, 
       3.2}, {0, 1.8}}]]}},
  ImageMargins->{{10, 10}, {0, 0}},
  ImageSize->900]], "Output",
 CellChangeTimes->{3.771580843825499*^9, 3.771582718358717*^9, 
  3.771589690238386*^9, 3.771590565406149*^9, 3.771683570542181*^9},
 CellLabel->
  "Out[1967]=",ExpressionUUID->"79e526d1-f9b0-425a-82d7-cbe4696b5762"]
}, Open  ]],

Cell["\<\
The echoes of traditional end rhyme, what we commonly think of as rhyme, are \
more difficult to map because they can span multiple lines, they involve \
groups of syllables, and they are restricted to certain parts of the metrical \
pattern. This takes some prep work. We will gather a list of rhyme candidates \
and then test them for identical phonetic endings.\
\>", "Text",
 CellChangeTimes->{{3.7714455236862803`*^9, 3.77144557636202*^9}, {
  3.7714456261450043`*^9, 3.7714457063381367`*^9}, {3.771581461464674*^9, 
  3.771581571434803*^9}, {3.771581632037486*^9, 3.771581663597163*^9}, {
  3.771581882464726*^9, 3.771582076509392*^9}, {3.771582115748897*^9, 
  3.771582116216237*^9}, {3.7715902531524687`*^9, 3.771590318786532*^9}, {
  3.771603769805665*^9, 
  3.771603823568956*^9}},ExpressionUUID->"fb53edc1-4884-491e-8f1f-\
e979941115be"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"phonSyllsMeter", "=", 
   RowBox[{"MapThread", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Append", "[", 
       RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
     RowBox[{"{", 
      RowBox[{"phonSylls", ",", 
       RowBox[{"Flatten", "[", "meter3", "]"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"endRhymeMultiCans", "=", 
   RowBox[{"SequenceCases", "[", 
    RowBox[{"phonSyllsMeter", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"_", ",", "_", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"_", ",", "_", ",", "0"}], "}"}], ",", 
       RowBox[{"Repeated", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"_", ",", "_", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}]}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"endRhymeMultiSwords", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"#", "\[LeftDoubleBracket]", 
         RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], "<>", 
        RowBox[{"#", "\[LeftDoubleBracket]", 
         RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"#", "\[LeftDoubleBracket]", 
          RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}], ",", 
         RowBox[{"#", "\[LeftDoubleBracket]", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "2"}], "\[RightDoubleBracket]"}]}], 
        "}"}]}], "}"}], "&"}], "/@", "endRhymeMultiCans"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"endRhymeUniCans", "=", 
   RowBox[{"Append", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
       "&"}], "/@", 
      RowBox[{"SequenceCases", "[", 
       RowBox[{"phonSyllsMeter", ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"_", ",", 
             RowBox[{"{", 
              RowBox[{"a_", ",", "_"}], "}"}], ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"_", ",", 
             RowBox[{"{", 
              RowBox[{"b_", ",", "_"}], "}"}], ",", "_"}], "}"}]}], "}"}], "/;", 
         RowBox[{"a", "\[NotEqual]", "b"}]}]}], "]"}]}], ",", 
     RowBox[{"phonSyllsMeter", "\[LeftDoubleBracket]", 
      RowBox[{"-", "1"}], "\[RightDoubleBracket]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"endRhymeUniSwords", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
         ",", 
         RowBox[{
         "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
        "}"}]}], "}"}], "&"}], "/@", "endRhymeUniCans"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"endRhymeSwords", "=", 
   RowBox[{"Join", "[", 
    RowBox[{"endRhymeMultiSwords", ",", "endRhymeUniSwords"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"endRhymeSubsets", "=", 
   RowBox[{"Subsets", "[", 
    RowBox[{"endRhymeSwords", ",", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"endRhymes", "=", 
   RowBox[{"Cases", "[", 
    RowBox[{"endRhymeSubsets", ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"s1_", ",", "_"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"s2_", ",", "_"}], "}"}]}], "}"}], "/;", 
      RowBox[{"StringContainsQ", "[", 
       RowBox[{"s1", ",", 
        RowBox[{"StringDelete", "[", 
         RowBox[{"s2", ",", 
          RowBox[{"StartOfString", "~~", 
           RowBox[{"ipaConsonants", "..."}]}]}], "]"}]}], "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"endRhymeBgLt", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Rectangle", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Reverse", "[", "txtCoo", "]"}], "\[LeftDoubleBracket]", 
         RowBox[{
          RowBox[{"#", "\[LeftDoubleBracket]", 
           RowBox[{"1", ",", "2", ",", "1", ",", "1"}], 
           "\[RightDoubleBracket]"}], ",", 
          RowBox[{"#", "\[LeftDoubleBracket]", 
           RowBox[{"1", ",", "2", ",", "1", ",", "2"}], 
           "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], "+", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", ".4"}], ",", 
          RowBox[{"-", ".1"}]}], "}"}]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"Reverse", "[", "txtCoo", "]"}], "\[LeftDoubleBracket]", 
         RowBox[{
          RowBox[{"#", "\[LeftDoubleBracket]", 
           RowBox[{"1", ",", "2", ",", "2", ",", "1"}], 
           "\[RightDoubleBracket]"}], ",", 
          RowBox[{"#", "\[LeftDoubleBracket]", 
           RowBox[{"1", ",", "2", ",", "2", ",", "2"}], 
           "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], "+", 
        RowBox[{"{", 
         RowBox[{".4", ",", ".1"}], "}"}]}]}], "]"}], "&"}], "/@", 
    "endRhymes"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"endRhymeBgRt", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Rectangle", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Reverse", "[", "txtCoo", "]"}], "\[LeftDoubleBracket]", 
         RowBox[{
          RowBox[{"#", "\[LeftDoubleBracket]", 
           RowBox[{"2", ",", "2", ",", "1", ",", "1"}], 
           "\[RightDoubleBracket]"}], ",", 
          RowBox[{"#", "\[LeftDoubleBracket]", 
           RowBox[{"2", ",", "2", ",", "1", ",", "2"}], 
           "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], "+", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", ".4"}], ",", 
          RowBox[{"-", ".1"}]}], "}"}]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"Reverse", "[", "txtCoo", "]"}], "\[LeftDoubleBracket]", 
         RowBox[{
          RowBox[{"#", "\[LeftDoubleBracket]", 
           RowBox[{"2", ",", "2", ",", "2", ",", "1"}], 
           "\[RightDoubleBracket]"}], ",", 
          RowBox[{"#", "\[LeftDoubleBracket]", 
           RowBox[{"2", ",", "2", ",", "2", ",", "2"}], 
           "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], "+", 
        RowBox[{"{", 
         RowBox[{".4", ",", ".1"}], "}"}]}]}], "]"}], "&"}], "/@", 
    "endRhymes"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"endRhymeBg", "=", 
   RowBox[{"Join", "[", 
    RowBox[{"endRhymeBgLt", ",", "endRhymeBgRt"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"endRhymeCoords", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"Reverse", "[", "txtCoo", "]"}], "\[LeftDoubleBracket]", 
        RowBox[{
         RowBox[{"#", "\[LeftDoubleBracket]", 
          RowBox[{"1", ",", "2", ",", "1", ",", "1"}], 
          "\[RightDoubleBracket]"}], ",", 
         RowBox[{"#", "\[LeftDoubleBracket]", 
          RowBox[{"1", ",", "2", ",", "1", ",", "2"}], 
          "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}], ",", 
       RowBox[{
        RowBox[{"Reverse", "[", "txtCoo", "]"}], "\[LeftDoubleBracket]", 
        RowBox[{
         RowBox[{"#", "\[LeftDoubleBracket]", 
          RowBox[{"2", ",", "2", ",", "1", ",", "1"}], 
          "\[RightDoubleBracket]"}], ",", 
         RowBox[{"#", "\[LeftDoubleBracket]", 
          RowBox[{"2", ",", "2", ",", "1", ",", "2"}], 
          "\[RightDoubleBracket]"}]}], "\[RightDoubleBracket]"}]}], "}"}], 
     "&"}], "/@", "endRhymes"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"endRhymeArcs", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"BezierCurve", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         "+", 
         RowBox[{"{", 
          RowBox[{"0", ",", ".1"}], "}"}]}], ",", 
        RowBox[{
         RowBox[{"Mean", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
            
            RowBox[{
            "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
           "}"}], "]"}], "+", 
         RowBox[{"{", 
          RowBox[{"1.5", ",", ".5"}], "}"}]}], ",", 
        RowBox[{
         RowBox[{"#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
         "+", 
         RowBox[{"{", 
          RowBox[{"0", ",", ".1"}], "}"}]}]}], "}"}], "]"}], "&"}], "/@", 
    "endRhymeCoords"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"Graphics", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"RGBColor", "[", 
       RowBox[{".8", ",", ".8", ",", "1"}], "]"}], ",", "endRhymeBg"}], "}"}],
     "]"}], ",", "meterGraphic", ",", 
   RowBox[{"Graphics", "[", 
    RowBox[{"{", 
     RowBox[{"Blue", ",", "endRhymeArcs"}], "}"}], "]"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "800"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.771582232770173*^9, 3.771582234712425*^9}, 
   3.771582389066803*^9, {3.771582453324296*^9, 3.771582475146035*^9}, {
   3.771582508250702*^9, 3.771582514328259*^9}, {3.771582750869211*^9, 
   3.7715828076634483`*^9}, {3.771582850730403*^9, 3.771582892588859*^9}, {
   3.771583306701798*^9, 3.771583337865367*^9}, {3.771583785072483*^9, 
   3.7715838406786213`*^9}, 3.771588035486039*^9, {3.771588067631378*^9, 
   3.7715880676323023`*^9}, {3.7715885190190773`*^9, 3.771588567889845*^9}, {
   3.771588607892651*^9, 3.771588706017552*^9}, {3.771589724686537*^9, 
   3.771589769333539*^9}, {3.771590169190052*^9, 3.771590184017119*^9}, {
   3.771590705223495*^9, 3.771590722514852*^9}, {3.771590767649743*^9, 
   3.771590789949512*^9}, {3.7715925657220383`*^9, 3.771592718973673*^9}, {
   3.771592768890381*^9, 3.7715928330323057`*^9}, {3.771592912633519*^9, 
   3.7715929332314377`*^9}, 3.7715930666446*^9, {3.771593194975849*^9, 
   3.771593201401163*^9}, 3.771593738208674*^9, 3.771593871207513*^9, {
   3.771594062046238*^9, 3.771594105273202*^9}, {3.7715943423274612`*^9, 
   3.771594403555526*^9}, {3.771594476374284*^9, 3.771594483451068*^9}, {
   3.7715945138114357`*^9, 3.771594539718006*^9}, {3.771594583310195*^9, 
   3.771594608712948*^9}, {3.771594646555497*^9, 3.771594659531939*^9}, {
   3.771594760600031*^9, 3.7715948667650642`*^9}, {3.771594905200996*^9, 
   3.7715950065985823`*^9}, {3.771595223512452*^9, 3.771595233756096*^9}, {
   3.771595398028079*^9, 3.771595449175433*^9}, {3.771595808420128*^9, 
   3.7715960621883287`*^9}, {3.7715961591784573`*^9, 3.771596180204829*^9}, {
   3.771596221717054*^9, 3.771596245393845*^9}, {3.7715963161608353`*^9, 
   3.771596358052248*^9}, {3.771596446736071*^9, 3.771596476110108*^9}, {
   3.77159651926705*^9, 3.771596528492261*^9}, 3.771596683225621*^9, {
   3.7715967544596777`*^9, 3.771596813668618*^9}, {3.7715968461854486`*^9, 
   3.771596876078927*^9}, {3.771596939777237*^9, 3.771597005354754*^9}, {
   3.771597090352129*^9, 3.771597114925314*^9}, {3.7715971599076242`*^9, 
   3.77159728415339*^9}, 3.771597322402371*^9, {3.771597384641157*^9, 
   3.771597402733033*^9}, {3.7715974641287117`*^9, 3.771597464265099*^9}, {
   3.771597517807859*^9, 3.771597517931037*^9}, {3.771598082662366*^9, 
   3.771598093914083*^9}, {3.771598152143941*^9, 3.771598178481945*^9}, 
   3.7715982748114023`*^9, {3.7715984700736732`*^9, 3.77159852385112*^9}, {
   3.771598581751214*^9, 3.771598608206884*^9}, {3.771598676757526*^9, 
   3.771598745658036*^9}, {3.771598852957062*^9, 3.7715988826507463`*^9}, {
   3.771598926611683*^9, 3.7715989861904984`*^9}, {3.7715990332994432`*^9, 
   3.7715990707781477`*^9}, {3.7715991168317547`*^9, 3.771599215575473*^9}, {
   3.7715992661252813`*^9, 3.771599408630026*^9}, {3.771599464702574*^9, 
   3.771599616979312*^9}, {3.77159964867846*^9, 3.7715996577365932`*^9}, {
   3.7715997092725267`*^9, 3.771599855237958*^9}, {3.77160008352468*^9, 
   3.771600209066906*^9}, {3.7716003995911016`*^9, 3.7716004105346947`*^9}, {
   3.7716004596504917`*^9, 3.771600538734666*^9}, {3.771600584254169*^9, 
   3.7716006020757437`*^9}, {3.771600659318721*^9, 3.771600661815637*^9}, {
   3.771600767459902*^9, 3.771600777882333*^9}, {3.7716008325167923`*^9, 
   3.771600884551832*^9}, {3.771600928934276*^9, 3.7716009322193327`*^9}, {
   3.7716010060927362`*^9, 3.771601068810636*^9}},
 CellLabel->
  "In[1968]:=",ExpressionUUID->"08d025fb-ff0d-4772-bceb-958bb33f7c7c"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.8, 0.8, 1], 
    RectangleBox[{-5.4, 7.6}, {-3.6, 7.799999999999999}], 
    RectangleBox[{-3.4, 6.4}, {-1.6, 6.6}], 
    RectangleBox[{-3.4, 6.4}, {-1.6, 6.6}], 
    RectangleBox[{-3.4, 6.4}, {-1.6, 6.6}], 
    RectangleBox[{-3.4, 6.4}, {-1.6, 6.6}], 
    RectangleBox[{-7.4, 5.2}, {-5.6, 5.3999999999999995}], 
    RectangleBox[{-7.4, 5.2}, {-5.6, 5.3999999999999995}], 
    RectangleBox[{-7.4, 5.2}, {-5.6, 5.3999999999999995}], 
    RectangleBox[{-7.4, 5.2}, {-5.6, 5.3999999999999995}], 
    RectangleBox[{0.6, 5.2}, {2.4, 5.3999999999999995}], 
    RectangleBox[{0.6, 5.2}, {2.4, 5.3999999999999995}], 
    RectangleBox[{0.6, 5.2}, {2.4, 5.3999999999999995}], 
    RectangleBox[{-7.4, 3.9999999999999996}, {-5.6, 4.199999999999999}], 
    RectangleBox[{-7.4, 3.9999999999999996}, {-5.6, 4.199999999999999}], 
    RectangleBox[{-5.4, 3.9999999999999996}, {-3.6, 4.199999999999999}], 
    RectangleBox[{-3.4, 3.9999999999999996}, {-1.6, 4.199999999999999}], 
    RectangleBox[{-1.4, 3.9999999999999996}, {0.4, 4.199999999999999}], 
    RectangleBox[{0.6, 6.4}, {1.4, 6.6}], 
    RectangleBox[{0.6, 6.4}, {1.4, 6.6}], 
    RectangleBox[{0.6, 6.4}, {1.4, 6.6}], 
    RectangleBox[{0.6, 3.9999999999999996}, {1.4, 4.199999999999999}], 
    RectangleBox[{0.6, 3.9999999999999996}, {1.4, 4.199999999999999}], 
    RectangleBox[{0.6, 2.8}, {1.4, 3.}], 
    RectangleBox[{-13.4, 5.2}, {-11.6, 5.3999999999999995}], 
    RectangleBox[{0.6, 6.4}, {1.4, 6.6}], 
    RectangleBox[{0.6, 3.9999999999999996}, {1.4, 4.199999999999999}], 
    RectangleBox[{0.6, 2.8}, {1.4, 3.}], 
    RectangleBox[{0.6, 1.5999999999999999}, {1.4, 1.8}], 
    RectangleBox[{0.6, 5.2}, {2.4, 5.3999999999999995}], 
    RectangleBox[{-7.4, 3.9999999999999996}, {-5.6, 4.199999999999999}], 
    RectangleBox[{-5.4, 3.9999999999999996}, {-3.6, 4.199999999999999}], 
    RectangleBox[{-5.4, 2.8}, {-3.6, 3.}], 
    RectangleBox[{-7.4, 3.9999999999999996}, {-5.6, 4.199999999999999}], 
    RectangleBox[{-5.4, 3.9999999999999996}, {-3.6, 4.199999999999999}], 
    RectangleBox[{-5.4, 2.8}, {-3.6, 3.}], 
    RectangleBox[{-5.4, 3.9999999999999996}, {-3.6, 4.199999999999999}], 
    RectangleBox[{-5.4, 2.8}, {-3.6, 3.}], 
    RectangleBox[{-5.4, 2.8}, {-3.6, 3.}], 
    RectangleBox[{-3.4, 2.8}, {-1.6, 3.}], 
    RectangleBox[{-1.4, 2.8}, {0.4, 3.}], 
    RectangleBox[{0.6, 3.9999999999999996}, {1.4, 4.199999999999999}], 
    RectangleBox[{0.6, 2.8}, {1.4, 3.}], 
    RectangleBox[{0.6, 1.5999999999999999}, {1.4, 1.8}], 
    RectangleBox[{0.6, 2.8}, {1.4, 3.}], 
    RectangleBox[{0.6, 1.5999999999999999}, {1.4, 1.8}], 
    RectangleBox[{0.6, 1.5999999999999999}, {1.4, 1.8}]}, {
    {GrayLevel[0.7], 
     LineBox[{{{-5, 2.2}, {-4, 1.2}, {-3, 2.2}, {-2, 1.2}, {-1, 2.2}, {
        0, 1.2}, {
        1, 2.2}}, {{-13, 3.4}, {-12, 2.4}, {-11, 3.4}, {-10, 2.4}, {-9, 
         2.4}, {-8, 3.4}, {-7, 3.4}, {-6, 2.4}, {-5, 3.4}, {-4, 2.4}, {-3, 
         3.4}, {-2, 2.4}, {-1, 3.4}, {0, 2.4}, {
        1, 3.4}}, {{-13, 4.6}, {-12, 3.5999999999999996`}, {-11, 4.6}, {-10, 
         3.5999999999999996`}, {-9, 4.6}, {-8, 3.5999999999999996`}, {-7, 
         4.6}, {-6, 3.5999999999999996`}, {-5, 4.6}, {-4, 
         3.5999999999999996`}, {-3, 4.6}, {-2, 3.5999999999999996`}, {-1, 
         4.6}, {0, 3.5999999999999996`}, {
        1, 4.6}}, {{-13, 5.8}, {-12, 4.8}, {-11, 5.8}, {-10, 4.8}, {-9, 
         5.8}, {-8, 4.8}, {-7, 5.8}, {-6, 4.8}, {-5, 5.8}, {-4, 4.8}, {-3, 
         4.8}, {-2, 5.8}, {-1, 5.8}, {0, 4.8}, {1, 5.8}, {
        2, 4.8}}, {{-15, 7.}, {-14, 6.}, {-13, 7.}, {-12, 6.}, {-11, 
         7.}, {-10, 7.}, {-9, 6.}, {-8, 7.}, {-7, 6.}, {-6, 6.}, {-5, 
         7.}, {-4, 6.}, {-3, 7.}, {-2, 6.}, {-1, 7.}, {0, 6.}, {
        1, 7.}}, {{-13, 8.2}, {-12, 7.199999999999999}, {-11, 8.2}, {-10, 
         7.199999999999999}, {-9, 8.2}, {-8, 7.199999999999999}, {-7, 
         8.2}, {-6, 7.199999999999999}, {-5, 8.2}, {-4, 
         7.199999999999999}, {-3, 8.2}, {-2, 7.199999999999999}, {-1, 8.2}, {
        0, 7.199999999999999}, {1, 8.2}, {2, 7.199999999999999}}}]}, 
    {GrayLevel[0], 
     StyleBox[InsetBox["\<\"on\"\>", {-5, 1.7}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ly\"\>", {-4, 1.7}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"this\"\>", {-3, 1.7}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"and\"\>", {-2, 1.7}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"noth\"\>", {-1, 1.7}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ing\"\>", {0, 1.7}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"more\"\>", {1, 1.7}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"Tis\"\>", {-13, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"some\"\>", {-12, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"vis\"\>", {-11, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"i\"\>", {-10, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"tor\"\>", {-9, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"I\"\>", {-8, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"mut\"\>", {-7, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"tered\"\>", {-6, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"tap\"\>", {-5, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ping\"\>", {-4, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"at\"\>", {-3, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"my\"\>", {-2, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"cham\"\>", {-1, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ber\"\>", {0, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"door\"\>", {1, 2.9}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"As\"\>", {-13, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"of\"\>", {-12, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"some\"\>", {-11, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"one\"\>", {-10, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"gen\"\>", {-9, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"tly\"\>", {-8, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"rap\"\>", {-7, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ping\"\>", {-6, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"rap\"\>", {-5, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ping\"\>", {-4, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"at\"\>", {-3, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"my\"\>", {-2, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"cham\"\>", {-1, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ber\"\>", {0, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"door\"\>", {1, 4.1}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"While\"\>", {-13, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"I\"\>", {-12, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"nod\"\>", {-11, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ded\"\>", {-10, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"near\"\>", {-9, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ly\"\>", {-8, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"nap\"\>", {-7, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ping\"\>", {-6, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"sud\"\>", {-5, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"den\"\>", {-4, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ly\"\>", {-3, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"there\"\>", {-2, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"came\"\>", {-1, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"a\"\>", {0, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"tap\"\>", {1, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ping\"\>", {2, 5.3}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"o\"\>", {-15, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ver\"\>", {-14, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"man\"\>", {-13, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"y\"\>", {-12, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"a\"\>", {-11, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"quaint\"\>", {-10, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"and\"\>", {-9, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"cu\"\>", {-8, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ri\"\>", {-7, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ous\"\>", {-6, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"vol\"\>", {-5, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ume\"\>", {-4, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"of\"\>", {-3, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"for\"\>", {-2, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"got\"\>", {-1, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ten\"\>", {0, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"lore\"\>", {1, 6.5}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"Once\"\>", {-13, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"up\"\>", {-12, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"on\"\>", {-11, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"a\"\>", {-10, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"mid\"\>", {-9, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"night\"\>", {-8, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"drear\"\>", {-7, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"y\"\>", {-6, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"while\"\>", {-5, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"I\"\>", {-4, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"pon\"\>", {-3, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"dered\"\>", {-2, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"weak\"\>", {-1, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"and\"\>", {0, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"wea\"\>", {1, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15], 
     StyleBox[InsetBox["\<\"ry\"\>", {2, 7.699999999999999}],
      StripOnInput->False,
      FontFamily->"Times",
      FontSize->15]}}, 
   {RGBColor[0, 0, 1], 
    BezierCurveBox[{{-5, 7.799999999999999}, {-7.5, 
      7.}, {-13, 5.3999999999999995`}}], 
    BezierCurveBox[{{-3, 6.6}, {0.5, 7.}, {1, 6.6}}], 
    BezierCurveBox[{{-3, 6.6}, {0.5, 5.8}, {1, 4.199999999999999}}], 
    BezierCurveBox[{{-3, 6.6}, {0.5, 5.2}, {1, 3.}}], 
    BezierCurveBox[{{-3, 6.6}, {0.5, 4.6}, {1, 1.8}}], 
    BezierCurveBox[{{-7, 5.3999999999999995`}, {-1.5, 5.8}, {
      1, 5.3999999999999995`}}], 
    BezierCurveBox[{{-7, 5.3999999999999995`}, {-5.5, 
      5.199999999999999}, {-7, 4.199999999999999}}], 
    BezierCurveBox[{{-7, 5.3999999999999995`}, {-4.5, 
      5.199999999999999}, {-5, 4.199999999999999}}], 
    BezierCurveBox[{{-7, 5.3999999999999995`}, {-4.5, 4.6}, {-5, 3.}}], 
    BezierCurveBox[{{1, 5.3999999999999995`}, {-1.5, 
      5.199999999999999}, {-7, 4.199999999999999}}], 
    BezierCurveBox[{{1, 5.3999999999999995`}, {-0.5, 
      5.199999999999999}, {-5, 4.199999999999999}}], 
    BezierCurveBox[{{1, 5.3999999999999995`}, {-0.5, 4.6}, {-5, 3.}}], 
    BezierCurveBox[{{-7, 4.199999999999999}, {-4.5, 
      4.6}, {-5, 4.199999999999999}}], 
    BezierCurveBox[{{-7, 4.199999999999999}, {-4.5, 4.}, {-5, 3.}}], 
    BezierCurveBox[{{-5, 4.199999999999999}, {-3.5, 4.}, {-5, 3.}}], 
    BezierCurveBox[{{-3, 4.199999999999999}, {-1.5, 4.}, {-3, 3.}}], 
    BezierCurveBox[{{-1, 4.199999999999999}, {0.5, 4.}, {-1, 3.}}], 
    BezierCurveBox[{{1, 6.6}, {2.5, 5.8}, {1, 4.199999999999999}}], 
    BezierCurveBox[{{1, 6.6}, {2.5, 5.2}, {1, 3.}}], 
    BezierCurveBox[{{1, 6.6}, {2.5, 4.6}, {1, 1.8}}], 
    BezierCurveBox[{{1, 4.199999999999999}, {2.5, 4.}, {1, 3.}}], 
    BezierCurveBox[{{1, 4.199999999999999}, {2.5, 3.4}, {1, 1.8}}], 
    BezierCurveBox[{{1, 3.}, {2.5, 2.8}, {1, 1.8}}]}},
  ImageSize->800]], "Output",
 CellChangeTimes->{
  3.771600891370688*^9, 3.771600934620998*^9, {3.771601029986483*^9, 
   3.771601071012068*^9}, 3.77168357060863*^9},
 CellLabel->
  "Out[1981]=",ExpressionUUID->"4e23da2c-984b-43f7-b222-e2967c40424f"]
}, Open  ]],

Cell[TextData[{
 "One might object that ",
 StyleBox["rapping",
  FontSlant->"Italic"],
 " doesn\[CloseCurlyQuote]t rhyme with ",
 StyleBox["rapping",
  FontSlant->"Italic"],
 ". It does echo, so I included such repetitions. Eliminating them is as \
simple as adjusting the matching criterion in the line that begins ",
 StyleBox["endRhymes = ", "Code"],
 "."
}], "Text",
 CellChangeTimes->{{3.771603878125639*^9, 3.771603984743475*^9}, {
  3.771604066412383*^9, 
  3.771604090351224*^9}},ExpressionUUID->"398e0519-1e7a-4f6c-ba61-\
1e13e8b44cff"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Conclusion", "Chapter",
 CellChangeTimes->{{3.771446468088813*^9, 
  3.7714464798571157`*^9}},ExpressionUUID->"e11f6326-b8ad-41db-879d-\
674edcef2689"],

Cell[TextData[{
 "With a computer we can inspect more than just a poem\[CloseCurlyQuote]s \
meter and rhyme. The placement of natural stops and the \
poet\[CloseCurlyQuote]s tendency to twist expected syntax also await \
computational analysis, but those are paths to be explore another time.\n\nIt \
is easy to get drawn into thinking that poems are these beautiful flowers of \
emotional expression and miss the craft that molds them from natural \
language. If we had a way to see some of that craft, to extract and visualize \
the interplay between sculptor and verbal clay, perhaps that would lead to a \
better understanding... and maybe ",
 StyleBox["even",
  FontColor->GrayLevel[1]],
 " a deeper appreciation. Isn\[CloseCurlyQuote]t a flower that much more \
wonderful if you recognize the Fibonacci sequence swirling around its \
center?"
}], "Text",
 CellChangeTimes->{{3.771446536313739*^9, 3.77144685825714*^9}, {
   3.771447313885372*^9, 3.7714473290710278`*^9}, {3.77144739733322*^9, 
   3.7714475646389914`*^9}, {3.77144760009518*^9, 3.7714476617849007`*^9}, {
   3.771447731481338*^9, 3.771447742565378*^9}, {3.77144779543157*^9, 
   3.771447796077516*^9}, {3.771447919798369*^9, 3.771448064149138*^9}, {
   3.7714481197709703`*^9, 3.771448153583778*^9}, {3.771448185781589*^9, 
   3.771448333275825*^9}, {3.771448366757029*^9, 3.771448399478548*^9}, {
   3.7714484339390593`*^9, 3.7714484349006*^9}, {3.771448537542857*^9, 
   3.7714485506420403`*^9}, {3.771448911680889*^9, 3.771448934775323*^9}, {
   3.771451602284602*^9, 3.771451603133731*^9}, {3.7715899266485357`*^9, 
   3.7715899332944717`*^9}, {3.77158998087611*^9, 3.7715900001166143`*^9}, 
   3.771601704561283*^9, {3.771604196832563*^9, 3.77160420440738*^9}, {
   3.771604259792506*^9, 
   3.771604280659243*^9}},ExpressionUUID->"8b517eaf-20f6-4b34-9610-\
775d203ad8fd"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1299, 1152},
WindowMargins->{{Automatic, 0}, {0, Automatic}},
DockedCells->{
  Cell[
   TextData[{
     StyleBox["  WOLFRAM ", 
      RGBColor[0.97, 0.83, 0.35], FontFamily -> "Source Sans Pro", FontWeight -> 
      Bold, FontSize -> 40], 
     StyleBox["SUMMER SCHOOL", 
      GrayLevel[1], FontFamily -> "Source Sans Pro", FontSize -> 40], 
     StyleBox[" 2019", 
      RGBColor[0.97, 0.83, 0.35], FontFamily -> "Source Sans Pro", FontSize -> 
      40]}], CellFrameMargins -> 10, Background -> 
   RGBColor[0.12, 0.14, 0.15]]},
FrontEndVersion->"12.0 for Mac OS X x86 (64-bit) (April 11, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 247, 4, 98, "Title",ExpressionUUID->"49ab34ee-bfd5-49f5-beef-400d3cc456dd"],
Cell[830, 28, 404, 6, 35, "Text",ExpressionUUID->"94536f76-3fd2-4bf6-b228-fa93ec9acae9"],
Cell[1237, 36, 359, 6, 35, "Text",ExpressionUUID->"b70c649b-a958-4202-9f22-238ea1f9c7d4"],
Cell[CellGroupData[{
Cell[1621, 46, 219, 4, 69, "Chapter",ExpressionUUID->"d0492975-865f-4cc2-aeef-d7e4b6b3ffdd"],
Cell[1843, 52, 4320, 65, 242, "Text",ExpressionUUID->"bceea5bb-6add-46e4-8627-c51d49057fd3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6200, 122, 292, 4, 53, "Subtitle",ExpressionUUID->"50a37f85-010e-4cdd-aa37-23d37c049ca0"],
Cell[6495, 128, 3007, 44, 196, "Text",ExpressionUUID->"87a35d28-484e-415f-8432-23c154bc1739"],
Cell[CellGroupData[{
Cell[9527, 176, 3408, 86, 220, "Input",ExpressionUUID->"6f5240b5-4982-4917-ac4c-f5e0acc32d46"],
Cell[12938, 264, 2316, 54, 99, "Output",ExpressionUUID->"a44a77f6-55f1-4512-8dd4-a3f787ec81a5"]
}, Open  ]],
Cell[15269, 321, 614, 11, 81, "Text",ExpressionUUID->"fbae500f-5205-49c9-bf79-89149bb54a9f"],
Cell[CellGroupData[{
Cell[15908, 336, 874, 24, 73, "Input",ExpressionUUID->"c1d3246f-fb2d-4056-a7bb-791dc8d170be"],
Cell[16785, 362, 7451, 150, 64, "Output",ExpressionUUID->"7edcd829-8e09-4596-996c-2dc8cd05b240"]
}, Open  ]],
Cell[24251, 515, 950, 15, 81, "Text",ExpressionUUID->"8148676e-c16b-48a4-bbfc-b5fae0cbe27b"],
Cell[CellGroupData[{
Cell[25226, 534, 4626, 99, 913, "Input",ExpressionUUID->"46a0a36c-bd7c-4169-8838-9534ebda8bca"],
Cell[29855, 635, 74938, 1427, 75, "Output",ExpressionUUID->"4c6d7858-e58c-4d44-a110-e2d1971310d4"]
}, Open  ]],
Cell[104808, 2065, 176, 3, 30, "Input",ExpressionUUID->"37e42455-7c77-4002-8b56-dd5a8702d685"],
Cell[104987, 2070, 658, 11, 58, "Text",ExpressionUUID->"4c0c94c5-a2cf-4e0f-82e3-328a32248686"],
Cell[CellGroupData[{
Cell[105670, 2085, 3320, 72, 451, "Input",ExpressionUUID->"742dd5d3-6480-466d-999a-7f297608aefa"],
Cell[108993, 2159, 90244, 1705, 75, "Output",ExpressionUUID->"e81879c7-c7c3-4752-bd94-e816a051b595"]
}, Open  ]],
Cell[199252, 3867, 611, 10, 58, "Text",ExpressionUUID->"2952e7ac-314c-44e4-9f0f-0d48c459f81d"],
Cell[CellGroupData[{
Cell[199888, 3881, 1460, 31, 52, "Input",ExpressionUUID->"51c32f67-e877-42fc-957a-83a7ac235f52"],
Cell[201351, 3914, 18524, 395, 462, "Output",ExpressionUUID->"5b339ff8-842a-4101-956d-41ec9cca7364"]
}, Open  ]],
Cell[219890, 4312, 717, 13, 58, "Text",ExpressionUUID->"f21ea08f-e19f-437e-9ed3-b07a0bd133ea"],
Cell[220610, 4327, 6545, 171, 409, "Input",ExpressionUUID->"2c31e3f3-1606-4bbf-90a6-8cdf7037e757"],
Cell[227158, 4500, 384, 8, 35, "Text",ExpressionUUID->"3b2f690d-8796-4575-bdd7-3889a0e43f37"],
Cell[CellGroupData[{
Cell[227567, 4512, 4683, 114, 325, "Input",ExpressionUUID->"44c005f6-2c10-49f7-828a-25c733ea5cef"],
Cell[232253, 4628, 33666, 652, 309, "Output",ExpressionUUID->"66717f35-9845-4471-9b21-b7c134f88559"]
}, Open  ]],
Cell[265934, 5283, 828, 14, 104, "Text",ExpressionUUID->"0d491e6f-72f0-4cbd-a5e6-3f14b0c7e5ce"]
}, Open  ]],
Cell[CellGroupData[{
Cell[266799, 5302, 159, 2, 53, "Subtitle",ExpressionUUID->"4f64d6f2-f37c-4075-8a4c-8f9ffcd9db3e"],
Cell[266961, 5306, 1082, 17, 58, "Text",ExpressionUUID->"12829ae6-6d68-4d80-9212-f751b788ff99"],
Cell[268046, 5325, 651, 12, 94, "Input",ExpressionUUID->"7a709bb4-44c1-4d6d-89e3-10e6e4f13839"],
Cell[268700, 5339, 698, 12, 58, "Text",ExpressionUUID->"d1120b01-22ea-4dc0-a37d-5907d7442b50"],
Cell[CellGroupData[{
Cell[269423, 5355, 13134, 277, 539, "Input",ExpressionUUID->"8ecc9cd2-04f0-492e-8d63-ca5afe6d0590"],
Cell[282560, 5634, 44917, 866, 343, "Output",ExpressionUUID->"d5820f7d-ccf9-496b-8ae0-c168ec4ae917"]
}, {2}]],
Cell[327489, 6503, 984, 15, 104, "Text",ExpressionUUID->"ec84d9db-6a1f-4d6a-921d-ee5156d21a46"],
Cell[CellGroupData[{
Cell[328498, 6522, 30288, 604, 1018, "Input",ExpressionUUID->"3516f487-59ad-4e0e-ac3a-9e2efe190bc9"],
Cell[358789, 7128, 12904, 381, 408, "Output",ExpressionUUID->"eeca8e0f-a6ba-4dd9-ba70-2255d817eaa9"]
}, {2}]],
Cell[371705, 7512, 1799, 26, 127, "Text",ExpressionUUID->"71f2f734-2fda-4e72-a856-0e0a7e1d50ad"]
}, Open  ]],
Cell[CellGroupData[{
Cell[373541, 7543, 254, 4, 69, "Chapter",ExpressionUUID->"0604b781-b8e6-4ea8-96e6-1c7397a75fdb"],
Cell[373798, 7549, 3693, 58, 334, "Text",ExpressionUUID->"a4f67baa-d5bf-4a08-ae46-2ca40b96a49d"],
Cell[CellGroupData[{
Cell[377516, 7611, 1837, 49, 115, "Input",ExpressionUUID->"368d6ace-be61-46a7-b3aa-9f4b89dc3df8"],
Cell[379356, 7662, 3641, 102, 51, "Output",ExpressionUUID->"06978733-a756-4648-820f-6aaedda5b508"]
}, Open  ]],
Cell[383012, 7767, 559, 10, 58, "Text",ExpressionUUID->"2604a861-09b7-410b-a909-acd43a63cb1e"],
Cell[CellGroupData[{
Cell[383596, 7781, 5831, 135, 115, "Input",ExpressionUUID->"9cbc32ee-1c54-4bc5-b5a0-874f45420210"],
Cell[389430, 7918, 15366, 427, 459, "Output",ExpressionUUID->"b779d76b-2c00-42de-b41a-bba4d8eb91f4"]
}, Open  ]],
Cell[404811, 8348, 629, 11, 58, "Text",ExpressionUUID->"99cfc5b1-52c2-46b2-900d-0bffd2ab1e97"],
Cell[405443, 8361, 269, 6, 35, "Text",ExpressionUUID->"ee6a78e6-5d3a-4f40-b730-a99cc8576376"],
Cell[CellGroupData[{
Cell[405737, 8371, 4722, 126, 157, "Input",ExpressionUUID->"3ccb344b-f204-4a1d-a226-23a539efed1b"],
Cell[410462, 8499, 20002, 526, 459, "Output",ExpressionUUID->"f564bebd-e74b-4e66-af45-7db1d1b1aff3"]
}, Open  ]],
Cell[430479, 9028, 328, 7, 35, "Text",ExpressionUUID->"2a0887aa-5ba4-47bb-975e-bad968ee646c"],
Cell[CellGroupData[{
Cell[430832, 9039, 3805, 105, 115, "Input",ExpressionUUID->"c26784f3-6f42-4e7f-a358-2556bf7befd1"],
Cell[434640, 9146, 18387, 494, 459, "Output",ExpressionUUID->"79e526d1-f9b0-425a-82d7-cbe4696b5762"]
}, Open  ]],
Cell[453042, 9643, 858, 14, 58, "Text",ExpressionUUID->"fb53edc1-4884-491e-8f1f-e979941115be"],
Cell[CellGroupData[{
Cell[453925, 9661, 12648, 303, 304, "Input",ExpressionUUID->"08d025fb-ff0d-4772-bceb-958bb33f7c7c"],
Cell[466576, 9966, 17212, 452, 355, "Output",ExpressionUUID->"4e23da2c-984b-43f7-b222-e2967c40424f"]
}, Open  ]],
Cell[483803, 10421, 546, 15, 58, "Text",ExpressionUUID->"398e0519-1e7a-4f6c-ba61-1e13e8b44cff"]
}, Open  ]],
Cell[CellGroupData[{
Cell[484386, 10441, 157, 3, 69, "Chapter",ExpressionUUID->"e11f6326-b8ad-41db-879d-674edcef2689"],
Cell[484546, 10446, 1849, 30, 150, "Text",ExpressionUUID->"8b517eaf-20f6-4b34-9610-775d203ad8fd"]
}, Open  ]]
}, Open  ]]
}
]
*)

